{
  "version": 3,
  "sources": ["../src/index.browser.ts", "../src/components/index.browser.ts", "../src/components/component.ts", "../src/components/helpers/stream-factory.ts", "../src/utils/bits.ts", "../src/utils/protocols/rtp.ts", "../src/components/message.ts", "../src/components/messageStreams.ts", "../src/components/aacdepay/parser.ts", "../src/components/aacdepay/index.ts", "../src/components/basicdepay/index.ts", "../src/components/canvas/index.ts", "../src/utils/clock.ts", "../src/utils/scheduler.ts", "../src/components/h264depay/index.ts", "../src/components/h264depay/parser.ts", "../src/components/http-source/index.ts", "../src/components/inspector/index.ts", "../src/components/jpegdepay/index.ts", "../src/components/jpegdepay/headers.ts", "../src/utils/clamp.ts", "../src/components/jpegdepay/make-qtable.ts", "../src/components/jpegdepay/parser.ts", "../src/components/mp4capture/index.ts", "../src/components/mp4muxer/index.ts", "../src/components/mp4muxer/helpers/isom.ts", "../src/components/mp4muxer/helpers/aacSettings.ts", "../src/components/mp4muxer/helpers/bufferreader.ts", "../src/components/mp4muxer/helpers/spsparser.ts", "../src/components/mp4muxer/helpers/utils.ts", "../src/components/mp4muxer/helpers/h264Settings.ts", "../src/components/mp4muxer/helpers/boxbuilder.ts", "../src/components/mse/index.ts", "../src/utils/protocols/rtcp.ts", "../src/components/onvifdepay/index.ts", "../src/components/rtsp-parser/index.ts", "../src/components/rtsp-parser/builder.ts", "../src/utils/protocols/rtsp.ts", "../src/utils/protocols/sdp.ts", "../src/components/rtsp-parser/parser.ts", "../src/components/rtsp-session/index.ts", "../src/utils/config.ts", "../src/utils/protocols/ntp.ts", "../src/components/ws-source/index.ts", "../src/components/ws-source/openwebsocket.ts", "../src/pipelines/index.browser.ts", "../src/pipelines/pipeline.ts", "../src/pipelines/rtsp-pipeline.ts", "../src/pipelines/rtsp-mjpeg-pipeline.ts", "../src/pipelines/rtsp-mp4-pipeline.ts", "../src/components/auth/digest.ts", "../src/components/auth/www-authenticate.ts", "../src/components/auth/index.ts", "../src/pipelines/html5-canvas-pipeline.ts", "../src/pipelines/html5-video-pipeline.ts", "../src/pipelines/html5-video-metadata-pipeline.ts", "../src/pipelines/metadata-pipeline.ts", "../src/pipelines/ws-sdp-pipeline.ts", "../src/components/http-mp4/index.ts", "../src/pipelines/http-mse-pipeline.ts", "../src/utils/index.browser.ts", "../src/utils/retry.ts"],
  "sourcesContent": ["import * as components from './components/index.browser'\nimport * as pipelines from './pipelines/index.browser'\nimport * as utils from './utils/index.browser'\n\nexport { components, pipelines, utils }\n\nexport * from './components/index.browser'\nexport * from './pipelines/index.browser'\nexport * from './utils/index.browser'\n", "export * from './component'\n\nexport * from './aacdepay'\nexport * from './basicdepay'\nexport * from './canvas'\nexport * from './h264depay'\nexport * from './http-source'\nexport * from './inspector'\nexport * from './jpegdepay'\nexport * from './message'\nexport * from './messageStreams'\nexport * from './mp4capture'\nexport * from './mp4muxer'\nexport * from './mse'\nexport * from './onvifdepay'\nexport * from './rtsp-parser'\nexport * from './rtsp-session'\nexport * from './ws-source'\n", "import { Duplex, PassThrough, Readable, Stream, Writable } from 'stream'\n\nimport StreamFactory from './helpers/stream-factory'\nimport { GenericMessage, MessageHandler } from './message'\n\nexport type Component = Source | Tube | Sink\n\ntype ErrorEventHandler = (err: Error) => void\n\n/**\n * Component\n *\n * A component is a set of bi-directional streams consisting of an 'incoming'\n * and 'outgoing' stream.\n *\n * They contain references to other components so they can form a linked list of\n * components, i.e. a pipeline. When linking components, the incoming and\n * outgoing streams are piped, so that data flowing through the incoming stream\n * is transfered to the next component, and data in the outgoing stream flows\n * to the previous component.\n *\n * Components at the end of such a pipeline typically connect the incoming and\n * outgoing streams to a data source or data sink.\n *\n * Typically, for a component that is connected to two other components, both\n * incoming and outgoing will be Transform streams. For a source, 'incoming'\n * will be a Readable stream and 'outgoing' a Writable stream, while for a sink\n * it is reversed. Both source and sink could also use a single Duplex stream,\n * with incoming === outgoing.\n *\n * server end-point                          client end-point\n *  /-------------      -----------------      -------------\\\n *  |  Writable  |  <-  |   Transform   |  <-  |  Readable  |\n *  |   source   |      |      tube     |      |    sink    |\n *  |  Readable  |  ->  |   Transform   |  ->  |  Writable  |\n *  \\-------------      -----------------      -------------/\n */\nabstract class AbstractComponent {\n  /**\n   * The stream going towards the client end-point\n   */\n  public abstract incoming: Stream\n  /**\n   * The stream going back to the server end-point\n   */\n  public abstract outgoing: Stream\n  /**\n   * The next component (downstream, towards the client)\n   */\n  public abstract next: Tube | Sink | null\n  /**\n   * The previous component (upstream, towards the server)\n   */\n  public abstract prev: Tube | Source | null\n  protected _incomingErrorHandler?: ErrorEventHandler\n  protected _outgoingErrorHandler?: ErrorEventHandler\n  /**\n   * Connect a downstream component (towards the client)\n   */\n  public abstract connect(next: Tube | Sink | null): Component\n  /**\n   * Disconnect a downstream component downstream (towards the client)\n   */\n  public abstract disconnect(): Component\n}\n\n/**\n * Source component\n *\n * A component that can only have a next component connected (no previous) and\n * where the incoming and outgoing streams are connected to an external data\n * source.\n */\nexport class Source extends AbstractComponent {\n  /**\n   * Set up a source component that has a message list as data source.\n   *\n   * @param messages - List of objects (with data property) to emit on the\n   * incoming stream\n   */\n  public static fromMessages(messages: GenericMessage[]) {\n    const component = new Source(\n      StreamFactory.producer(messages),\n      StreamFactory.consumer()\n    )\n\n    return component\n  }\n\n  public incoming: Readable\n  public outgoing: Writable\n  public next: Tube | Sink | null\n  public prev: null\n\n  constructor(\n    incoming: Readable = new Readable({ objectMode: true }),\n    outgoing: Writable = new Writable({ objectMode: true })\n  ) {\n    super()\n    this.incoming = incoming\n    this.outgoing = outgoing\n    this.next = null\n    this.prev = null\n  }\n\n  /**\n   * Attach another component so the the 'down' stream flows into the\n   * next component 'down' stream and the 'up' stream of the other component\n   * flows into the 'up' stream of this component. This is what establishes the\n   * meaning of 'up' and 'down'.\n   * @param  next - The component to connect.\n   * @return A reference to the connected component.\n   *\n   *      -------------- pipe --------------\n   *  <-  |  outgoing  |  <-  |  outgoing  | <-\n   *      |    this    |      |    next    |\n   *  ->  |  incoming  |  ->  |  incoming  | ->\n   *      -------------- pipe --------------\n   */\n  public connect(next: Tube | Sink | null): Component {\n    // If the next component is not there, we want to return this component\n    // so that it is possible to continue to chain. If there is a next component,\n    // but this component already has a next one, or the next one already has a\n    // previous component, throw an error.\n    if (next === null) {\n      return this\n    } else if (this.next !== null || next.prev !== null) {\n      throw new Error('connection failed: component(s) already connected')\n    }\n\n    if (!this.incoming.readable || !this.outgoing.writable) {\n      throw new Error('connection failed: this component not compatible')\n    }\n\n    if (!next.incoming.writable || !next.outgoing.readable) {\n      throw new Error('connection failed: next component not compatible')\n    }\n\n    try {\n      this.incoming.pipe(next.incoming)\n      next.outgoing.pipe(this.outgoing)\n    } catch (e) {\n      throw new Error(`connection failed: ${(e as Error).message}`)\n    }\n\n    /**\n     * Propagate errors back upstream, this assures an error will be propagated\n     * to all previous streams (but not further than any endpoints). What happens\n     * when an error is emitted on a stream is up to the stream's implementation.\n     */\n    const incomingErrorHandler: ErrorEventHandler = (err) => {\n      this.incoming.emit('error', err)\n    }\n    next.incoming.on('error', incomingErrorHandler)\n\n    const outgoingErrorHandler: ErrorEventHandler = (err) => {\n      next.outgoing.emit('error', err)\n    }\n    this.outgoing.on('error', outgoingErrorHandler)\n\n    // Keep a bidirectional linked list of components by storing\n    // a reference to the next component and the listeners that we set up.\n    this.next = next\n    next.prev = this\n    this._incomingErrorHandler = incomingErrorHandler\n    this._outgoingErrorHandler = outgoingErrorHandler\n\n    return next\n  }\n\n  /**\n   * Disconnect the next connected component. When there is no next component\n   * the function will just do nothing.\n   * @return {Component} - A reference to this component.\n   */\n  public disconnect(): Component {\n    const next = this.next\n\n    if (next !== null) {\n      this.incoming.unpipe(next.incoming)\n      next.outgoing.unpipe(this.outgoing)\n\n      if (typeof this._incomingErrorHandler !== 'undefined') {\n        next.incoming.removeListener('error', this._incomingErrorHandler)\n      }\n      if (typeof this._outgoingErrorHandler !== 'undefined') {\n        this.outgoing.removeListener('error', this._outgoingErrorHandler)\n      }\n\n      this.next = null\n      next.prev = null\n      delete this._incomingErrorHandler\n      delete this._outgoingErrorHandler\n    }\n\n    return this\n  }\n}\n\n/**\n * Tube component\n *\n * A component where both incoming and outgoing streams are Duplex streams, and\n * can be connected to a previous and next component, typically in the middle of\n * a pipeline.\n */\nexport class Tube extends Source {\n  /**\n   * Create a component that calls a handler function for each message passing\n   * through, but otherwise just passes data through.\n   *\n   * Can be used to log messages passing through a pipeline.\n   */\n  public static fromHandlers(\n    fnIncoming: MessageHandler | undefined,\n    fnOutgoing: MessageHandler | undefined\n  ) {\n    const incomingStream = fnIncoming\n      ? StreamFactory.peeker(fnIncoming)\n      : undefined\n    const outgoingStream = fnOutgoing\n      ? StreamFactory.peeker(fnOutgoing)\n      : undefined\n\n    return new Tube(incomingStream, outgoingStream)\n  }\n\n  public incoming: Duplex\n  public outgoing: Duplex\n\n  constructor(\n    incoming: Duplex = new PassThrough({ objectMode: true }),\n    outgoing: Duplex = new PassThrough({ objectMode: true })\n  ) {\n    super(incoming, outgoing)\n    this.incoming = incoming\n    this.outgoing = outgoing\n  }\n}\n\n/**\n * Sink component\n *\n * A component that can only have a previous component connected (no next) and\n * where the incoming and outgoing streams are connected to an external data\n * source.\n */\nexport class Sink extends AbstractComponent {\n  /**\n   * Create a component that swallows incoming data (calling fn on it).  To\n   * print data, you would use fn = console.log.\n   *\n   * @param fn - The callback to use for the incoming data.\n   */\n  public static fromHandler(fn: MessageHandler) {\n    const component = new Sink(\n      StreamFactory.consumer(fn),\n      StreamFactory.producer(undefined)\n    )\n    // A sink should propagate when stream is ending.\n    component.incoming.on('finish', () => {\n      component.outgoing.push(null)\n    })\n\n    return component\n  }\n\n  public incoming: Writable\n  public outgoing: Readable\n  public next: null\n  public prev: Tube | Source | null\n\n  constructor(\n    incoming: Writable = new Writable({ objectMode: true }),\n    outgoing: Readable = new Readable({ objectMode: true })\n  ) {\n    super()\n    this.incoming = incoming\n    this.outgoing = outgoing\n    this.next = null\n    this.prev = null\n  }\n\n  public connect(): Component {\n    throw new Error('connection failed: attempting to connect after a sink')\n  }\n\n  public disconnect(): Component {\n    return this\n  }\n}\n", "import { Readable, Transform, Writable } from 'stream'\n\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nexport default class StreamFactory {\n  /**\n   * Creates a writable stream that sends all messages written to the stream\n   * to a callback function and then considers it written.\n   * @param fn  The callback to be invoked on the message\n   */\n  public static consumer(\n    fn: (msg: any) => void = () => {\n      /* */\n    }\n  ) {\n    return new Writable({\n      objectMode: true,\n      write(msg, _encoding, callback) {\n        fn(msg)\n        callback()\n      },\n    })\n  }\n\n  public static peeker(fn: (msg: any) => void) {\n    if (typeof fn !== 'function') {\n      throw new Error('you must supply a function')\n    }\n    return new Transform({\n      objectMode: true,\n      transform(msg, _encoding, callback) {\n        fn(msg)\n        callback(undefined, msg)\n      },\n    })\n  }\n\n  /**\n   * Creates a readable stream that sends a message for each element of an array.\n   * @param arr  The array with elements to be turned into a stream.\n   */\n  public static producer(messages?: any[]) {\n    let counter = 0\n    return new Readable({\n      objectMode: true,\n      read() {\n        if (messages !== undefined) {\n          if (counter < messages.length) {\n            this.push(messages[counter++])\n          } else {\n            // End the stream\n            this.push(null)\n          }\n        }\n      },\n    })\n  }\n\n  public static recorder(type: string, fileStream: NodeJS.WritableStream) {\n    return new Transform({\n      objectMode: true,\n      transform(msg, encoding, callback) {\n        const timestamp = Date.now()\n        // Replace binary data with base64 string\n        const message = Object.assign({}, msg, {\n          data: msg.data.toString('base64'),\n        })\n        fileStream.write(JSON.stringify({ type, timestamp, message }, null, 2))\n        fileStream.write(',\\n')\n        callback(undefined, msg)\n      },\n    })\n  }\n\n  /**\n   * Yield binary messages from JSON packet array until depleted.\n   * @return {Generator} Returns a JSON packet iterator.\n   */\n  public static replayer(packets: any[]) {\n    let packetCounter = 0\n    let lastTimestamp = packets[0].timestamp\n    return new Readable({\n      objectMode: true,\n      read() {\n        const packet = packets[packetCounter++]\n        if (packet) {\n          const { type, timestamp, message } = packet\n          const delay = timestamp - lastTimestamp\n          lastTimestamp = timestamp\n          if (message) {\n            const data = message.data\n              ? Buffer.from(message.data, 'base64')\n              : Buffer.alloc(0)\n            const msg = Object.assign({}, message, { data })\n            this.push({ type, delay, msg })\n          } else {\n            this.push({ type, delay, msg: null })\n          }\n        } else {\n          this.push(null)\n        }\n      },\n    })\n  }\n}\n", "export const POS = [0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01]\n", "import { POS } from '../bits'\n\n// Real Time Protocol (RTP)\n// https://tools.ietf.org/html/rfc3550#section-5.1\n\n/*\nRTP Fixed Header Fields\n\n  0               1               2               3\n  0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  |V=2|P|X|  CC   |M|     PT      |       sequence number         |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  |                           timestamp                           |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  |           synchronization source (SSRC) identifier            |\n  +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n  |            contributing source (CSRC) identifiers             |\n  |                             ....                              |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  |   profile-specific ext. id    | profile-specific ext. length  |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  |                 profile-specific extension                    |\n  |                             ....                              |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n*/\n\nexport const version = (buffer: Buffer) => {\n  return buffer[0] >>> 6\n}\n\nexport const padding = (buffer: Buffer) => {\n  return !!(buffer[0] & POS[2])\n}\n\nexport const extension = (buffer: Buffer) => {\n  return !!(buffer[0] & POS[3])\n}\n\nexport const cSrcCount = (buffer: Buffer) => {\n  return buffer[0] & 0x0f\n}\n\nexport const marker = (buffer: Buffer) => {\n  return !!(buffer[1] & POS[0])\n}\n\nexport const payloadType = (buffer: Buffer) => {\n  return buffer[1] & 0x7f\n}\n\nexport const sequenceNumber = (buffer: Buffer) => {\n  return buffer.readUInt16BE(2)\n}\n\nexport const timestamp = (buffer: Buffer) => {\n  return buffer.readUInt32BE(4)\n}\n\nexport const sSrc = (buffer: Buffer) => {\n  return buffer.readUInt32BE(8)\n}\n\nexport const cSrc = (buffer: Buffer, rank = 0) => {\n  return cSrcCount(buffer) > rank ? buffer.readUInt32BE(12 + rank * 4) : 0\n}\n\nexport const extHeaderLength = (buffer: Buffer) => {\n  return !extension(buffer)\n    ? 0\n    : buffer.readUInt16BE(12 + cSrcCount(buffer) * 4 + 2)\n}\n\nexport const extHeader = (buffer: Buffer) => {\n  return extHeaderLength(buffer) === 0\n    ? Buffer.from([])\n    : buffer.slice(\n      12 + cSrcCount(buffer) * 4,\n      12 + cSrcCount(buffer) * 4 + 4 + extHeaderLength(buffer) * 4\n    )\n}\n\nexport const payload = (buffer: Buffer) => {\n  return !extension(buffer)\n    ? buffer.slice(12 + cSrcCount(buffer) * 4)\n    : buffer.slice(12 + cSrcCount(buffer) * 4 + 4 + extHeaderLength(buffer) * 4)\n}\n", "import { MediaTrack } from '../utils/protocols/isom'\nimport { Rtcp } from '../utils/protocols/rtcp'\nimport { Sdp } from '../utils/protocols/sdp'\n\nexport interface GenericMessage {\n  readonly type: MessageType\n  readonly data: Buffer\n  ntpTimestamp?: number\n}\n\nexport enum MessageType {\n  UNKNOWN = 0,\n  RAW,\n  RTP,\n  RTCP,\n  RTSP,\n  SDP,\n  ELEMENTARY,\n  H264,\n  ISOM,\n  XML,\n  JPEG,\n}\n\nexport interface RawMessage extends GenericMessage {\n  readonly type: MessageType.RAW\n}\n\nexport interface RtpMessage extends GenericMessage {\n  readonly type: MessageType.RTP\n  readonly channel: number\n}\n\nexport interface RtcpMessage extends GenericMessage {\n  readonly type: MessageType.RTCP\n  readonly channel: number\n  readonly rtcp: Rtcp\n}\n\nexport interface RtspMessage extends GenericMessage {\n  readonly type: MessageType.RTSP\n  readonly method?: string\n  readonly headers?: { [key: string]: string }\n  readonly uri?: string\n  readonly protocol?: string\n}\n\nexport interface SdpMessage extends GenericMessage {\n  readonly type: MessageType.SDP\n  readonly sdp: Sdp\n}\n\nexport interface ElementaryMessage extends GenericMessage {\n  readonly type: MessageType.ELEMENTARY\n  readonly payloadType: number\n  readonly timestamp: number\n}\n\nexport interface H264Message extends GenericMessage {\n  readonly type: MessageType.H264\n  readonly payloadType: number\n  readonly timestamp: number\n  readonly nalType: number\n}\n\nexport interface IsomMessage extends GenericMessage {\n  readonly type: MessageType.ISOM\n  readonly checkpointTime?: number // presentation time of last I-frame (s)\n  readonly tracks?: MediaTrack[]\n  readonly mime?: string\n}\n\nexport interface XmlMessage extends GenericMessage {\n  readonly type: MessageType.XML\n  readonly timestamp: number\n  readonly payloadType: number\n}\n\nexport interface JpegMessage extends GenericMessage {\n  readonly type: MessageType.JPEG\n  readonly timestamp: number\n  readonly payloadType: number\n  readonly framesize: {\n    readonly width: number\n    readonly height: number\n  }\n}\n\nexport type Message =\n  | RawMessage\n  | RtpMessage\n  | RtcpMessage\n  | RtspMessage\n  | SdpMessage\n  | ElementaryMessage\n  | H264Message\n  | IsomMessage\n  | XmlMessage\n  | JpegMessage\n\nexport type MessageHandler = (msg: Message) => void\n", "import { Transform, TransformCallback } from 'stream'\n\nimport { Message } from './message'\n\ntype MessageTransform = (\n  this: Transform,\n  msg: Message,\n  encoding: string,\n  callback: TransformCallback\n) => void\n\nexport const createTransform = (transform: MessageTransform) => {\n  return new Transform({\n    objectMode: true,\n    transform,\n  })\n}\n", "import { payload, payloadType, timestamp } from '../../utils/protocols/rtp'\nimport { ElementaryMessage, MessageType, RtpMessage } from '../message'\n\n/*\nFrom RFC 3640 https://tools.ietf.org/html/rfc3640\n  2.11.  Global Structure of Payload Format\n\n     The RTP payload following the RTP header, contains three octet-\n     aligned data sections, of which the first two MAY be empty, see\n     Figure 1.\n\n           +---------+-----------+-----------+---------------+\n           | RTP     | AU Header | Auxiliary | Access Unit   |\n           | Header  | Section   | Section   | Data Section  |\n           +---------+-----------+-----------+---------------+\n\n                     <----------RTP Packet Payload----------->\n\n              Figure 1: Data sections within an RTP packet\nNote that auxilary section is empty for AAC-hbr\n\n  3.2.1.  The AU Header Section\n\n   When present, the AU Header Section consists of the AU-headers-length\n   field, followed by a number of AU-headers, see Figure 2.\n\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- .. -+-+-+-+-+-+-+-+-+-+\n      |AU-headers-length|AU-header|AU-header|      |AU-header|padding|\n      |                 |   (1)   |   (2)   |      |   (n)   | bits  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- .. -+-+-+-+-+-+-+-+-+-+\n\n                   Figure 2: The AU Header Section\n*/\n\nexport function parse(\n  rtp: RtpMessage,\n  hasHeader: boolean,\n  callback: (msg: ElementaryMessage) => void\n) {\n  const buffer = payload(rtp.data)\n\n  let headerLength = 0\n  if (hasHeader) {\n    const auHeaderLengthInBits = buffer.readUInt16BE(0)\n    headerLength = 2 + (auHeaderLengthInBits + (auHeaderLengthInBits % 8)) / 8 // Add padding\n  }\n  const packet: ElementaryMessage = {\n    type: MessageType.ELEMENTARY,\n    data: buffer.slice(headerLength),\n    payloadType: payloadType(rtp.data),\n    timestamp: timestamp(rtp.data),\n    ntpTimestamp: rtp.ntpTimestamp,\n  }\n\n  callback(packet)\n}\n", "import { payloadType } from '../../utils/protocols/rtp'\nimport { Tube } from '../component'\nimport { Message, MessageType } from '../message'\nimport { createTransform } from '../messageStreams'\n\nimport { parse } from './parser'\n\n/*\nmedia: [{ type: 'video',\n   port: '0',\n   proto: 'RTP/AVP',\n   fmt: '96',\n   rtpmap: '96 H264/90000',\n   fmtp: {\n      format: '96',\n      parameters: {\n        'packetization-mode': '1',\n        'profile-level-id': '4d0029',\n        'sprop-parameter-sets': 'Z00AKeKQDwBE/LgLcBAQGkHiRFQ=,aO48gA==',\n      },\n    },\n   control: 'rtsp://hostname/axis-media/media.amp/stream=0?audio=1&video=1',\n   framerate: '25.000000',\n   transform: [[1, 0, 0], [0, 0.75, 0], [0, 0, 1]] },\n   { type: 'audio',\n     port: '0',\n     proto: 'RTP/AVP',\n     fmt: '97',\n     fmtp: {\n       parameters: {\n         bitrate: '32000',\n         config: '1408',\n         indexdeltalength: '3',\n         indexlength: '3',\n         mode: 'AAC-hbr',\n         'profile-level-id': '2',\n         sizelength: '13',\n         streamtype: '5'\n       },\n       format: '97'\n     },\n     rtpmap: '97 MPEG4-GENERIC/16000/1',\n     control: 'rtsp://hostname/axis-media/media.amp/stream=1?audio=1&video=1' }]\n*/\n\nexport class AACDepay extends Tube {\n  constructor() {\n    let AACPayloadType: number\n    let hasHeader: boolean\n\n    const incoming = createTransform(function(\n      msg: Message,\n      encoding,\n      callback\n    ) {\n      if (msg.type === MessageType.SDP) {\n        // Check if there is an AAC track in the SDP\n        let validMedia\n        for (const media of msg.sdp.media) {\n          if (\n            media.type === 'audio'\n            && media.fmtp\n            && media.fmtp.parameters\n            && media.fmtp.parameters.mode === 'AAC-hbr'\n          ) {\n            validMedia = media\n          }\n        }\n        if (validMedia && validMedia.rtpmap !== undefined) {\n          AACPayloadType = Number(validMedia.rtpmap.payloadType)\n          const parameters = validMedia.fmtp.parameters\n          // Required\n          const sizeLength = Number(parameters.sizelength) || 0\n          const indexLength = Number(parameters.indexlength) || 0\n          const indexDeltaLength = Number(parameters.indexdeltalength) || 0\n          // Optionals\n          const CTSDeltaLength = Number(parameters.ctsdeltalength) || 0\n          const DTSDeltaLength = Number(parameters.dtsdeltalength) || 0\n          const RandomAccessIndication =\n            Number(parameters.randomaccessindication) || 0\n          const StreamStateIndication = Number(parameters.streamstateindication)\n            || 0\n          const AuxiliaryDataSizeLength =\n            Number(parameters.auxiliarydatasizelength) || 0\n\n          hasHeader = sizeLength\n              + Math.max(indexLength, indexDeltaLength)\n              + CTSDeltaLength\n              + DTSDeltaLength\n              + RandomAccessIndication\n              + StreamStateIndication\n              + AuxiliaryDataSizeLength\n            > 0\n        }\n        callback(undefined, msg)\n      } else if (\n        msg.type === MessageType.RTP\n        && payloadType(msg.data) === AACPayloadType\n      ) {\n        parse(msg, hasHeader, this.push.bind(this))\n        callback()\n      } else {\n        // Not a message we should handle\n        callback(undefined, msg)\n      }\n    })\n\n    // outgoing will be defaulted to a PassThrough stream\n    super(incoming)\n  }\n}\n", "import {\n  marker,\n  payload,\n  payloadType,\n  timestamp,\n} from '../../utils/protocols/rtp'\nimport { Tube } from '../component'\nimport { Message, MessageType } from '../message'\nimport { createTransform } from '../messageStreams'\n\nexport class BasicDepay extends Tube {\n  constructor(rtpPayloadType: number) {\n    if (rtpPayloadType === undefined) {\n      throw new Error('you must supply a payload type to BasicDepayComponent')\n    }\n\n    let buffer = Buffer.alloc(0)\n\n    const incoming = createTransform(function(\n      msg: Message,\n      encoding,\n      callback\n    ) {\n      if (\n        msg.type === MessageType.RTP\n        && payloadType(msg.data) === rtpPayloadType\n      ) {\n        const rtpPayload = payload(msg.data)\n        buffer = Buffer.concat([buffer, rtpPayload])\n\n        if (marker(msg.data)) {\n          if (buffer.length > 0) {\n            this.push({\n              data: buffer,\n              timestamp: timestamp(msg.data),\n              ntpTimestamp: msg.ntpTimestamp,\n              payloadType: payloadType(msg.data),\n              type: MessageType.ELEMENTARY,\n            })\n          }\n          buffer = Buffer.alloc(0)\n        }\n        callback()\n      } else {\n        // Not a message we should handle\n        callback(undefined, msg)\n      }\n    })\n\n    // outgoing will be defaulted to a PassThrough stream\n    super(incoming)\n  }\n}\n", "import { Readable, Writable } from 'stream'\n\nimport { Clock } from '../../utils/clock'\nimport { VideoMedia } from '../../utils/protocols/sdp'\nimport { Scheduler } from '../../utils/scheduler'\nimport { Sink } from '../component'\nimport { Message, MessageType } from '../message'\n\ninterface BlobMessage {\n  readonly blob: Blob\n  readonly ntpTimestamp: number\n}\n\ntype BlobMessageHandler = (msg: BlobMessage) => void\n\ninterface RateInfo {\n  bitrate: number\n  framerate: number\n  renderedFrames: number\n}\n\nconst resetInfo = (info: RateInfo) => {\n  info.bitrate = 0\n  info.framerate = 0\n  info.renderedFrames = 0\n}\n\ninterface ByteDuration {\n  byteLength: number\n  duration: number\n}\n\nconst generateUpdateInfo = (clockrate: number) => {\n  let cumulativeByteLength = 0\n  let cumulativeDuration = 0\n  let cumulativeFrames = 0\n\n  return (info: RateInfo, { byteLength, duration }: ByteDuration) => {\n    cumulativeByteLength += byteLength\n    cumulativeDuration += duration\n    cumulativeFrames++\n\n    // Update the cumulative number size (bytes) and duration (ticks), and if\n    // the duration exceeds the clockrate (meaning longer than 1 second of info),\n    // then compute a new bitrate and reset cumulative size and duration.\n    if (cumulativeDuration >= clockrate) {\n      const bits = 8 * cumulativeByteLength\n      const frames = cumulativeFrames\n      const seconds = cumulativeDuration / clockrate\n      info.bitrate = bits / seconds\n      info.framerate = frames / seconds\n      cumulativeByteLength = 0\n      cumulativeDuration = 0\n      cumulativeFrames = 0\n    }\n  }\n}\n\n/**\n * Canvas component\n *\n * Draws an incoming stream of JPEG images onto a <canvas> element.\n * The RTP timestamps are used to schedule the drawing of the images.\n * An instance can be used as a 'clock' itself, e.g. with a scheduler.\n *\n * The following handlers can be set on a component instance:\n *  - onCanplay: will be called when the first frame is ready and\n *               the correct frame size has been set on the canvas.\n *               At this point, the clock can be started by calling\n *               `.play()` method on the component.\n *  - onSync: will be called when the presentation time offset is\n *            known, with the latter as argument (in UNIX milliseconds)\n */\nexport class CanvasSink extends Sink {\n  public onCanplay?: () => void\n  public onSync?: (ntpPresentationTime: number) => void\n  private readonly _clock: Clock\n  private readonly _scheduler: Scheduler<BlobMessage>\n  private readonly _info: RateInfo\n  /**\n   * @param  el - The <canvas> element to draw incoming JPEG messages on.\n   */\n  constructor(el: HTMLCanvasElement) {\n    if (el === undefined) {\n      throw new Error('canvas element argument missing')\n    }\n\n    let firstTimestamp = 0\n    let lastTimestamp = 0\n    let clockrate = 0\n    const info = {\n      bitrate: 0,\n      framerate: 0,\n      renderedFrames: 0,\n    }\n    let updateInfo: (info: RateInfo, update: ByteDuration) => void\n\n    // The createImageBitmap function is supported in Chrome and Firefox\n    // (https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/createImageBitmap)\n    // Note: drawImage can also be used instead of transferFromImageBitmap, but it caused\n    // very large memory use in Chrome (goes up to ~2-3GB, then drops again).\n    // Do do not call el.getContext twice, safari returns null for second call\n    let ctx: ImageBitmapRenderingContext | CanvasRenderingContext2D | null =\n      null\n    if (window.createImageBitmap !== undefined) {\n      ctx = el.getContext('bitmaprenderer')\n    }\n    if (ctx === null) {\n      ctx = el.getContext('2d')\n    }\n\n    // Set up the drawing callback to be used by the scheduler,\n    // it receives a blob of a JPEG image.\n    let drawImageBlob: BlobMessageHandler\n    if (ctx === null) {\n      drawImageBlob = () => {\n        /** NOOP */\n      }\n    } else if ('transferFromImageBitmap' in ctx) {\n      const ctxBitmaprenderer = ctx\n      drawImageBlob = ({ blob }) => {\n        info.renderedFrames++\n        window\n          .createImageBitmap(blob)\n          .then((imageBitmap) => {\n            ctxBitmaprenderer.transferFromImageBitmap(imageBitmap)\n          })\n          .catch(() => {\n            /** ignore */\n          })\n      }\n    } else {\n      const ctx2d = ctx\n      const img = new Image()\n      img.onload = () => {\n        ctx2d.drawImage(img, 0, 0)\n      }\n      drawImageBlob = ({ blob }) => {\n        info.renderedFrames++\n        const url = window.URL.createObjectURL(blob)\n        img.src = url\n      }\n    }\n\n    // Because we don't have an element that plays video for us,\n    // we have to use our own clock. The clock can be started/stopped\n    // with the `play` and `pause` methods, and has a `currentTime`\n    // property that keeps track of the presentation time.\n    // The scheduler will use the clock (instead of e.g. a video element)\n    // to determine when to display the JPEG images.\n    const clock = new Clock()\n    const scheduler = new Scheduler(clock, drawImageBlob)\n\n    let ntpPresentationTime = 0\n    const onCanplay = () => {\n      this.onCanplay && this.onCanplay()\n    }\n    const onSync = (npt: number) => {\n      this.onSync && this.onSync(npt)\n    }\n\n    // Set up an incoming stream and attach it to the image drawing function.\n    const incoming = new Writable({\n      objectMode: true,\n      write: (msg: Message, _encoding, callback) => {\n        if (msg.type === MessageType.SDP) {\n          // start of a new movie, reset timers\n          clock.reset()\n          scheduler.reset()\n\n          // Initialize first timestamp and clockrate\n          firstTimestamp = 0\n          const jpegMedia = msg.sdp.media.find((media): media is VideoMedia => {\n            return (\n              media.type === 'video'\n              && media.rtpmap !== undefined\n              && media.rtpmap.encodingName === 'JPEG'\n            )\n          })\n\n          if (jpegMedia !== undefined && jpegMedia.rtpmap !== undefined) {\n            clockrate = jpegMedia.rtpmap.clockrate\n            // Initialize the framerate/bitrate data\n            resetInfo(info)\n            updateInfo = generateUpdateInfo(clockrate)\n          }\n\n          callback()\n        } else if (msg.type === MessageType.JPEG) {\n          const { timestamp, ntpTimestamp } = msg\n\n          // If first frame, store its timestamp, initialize\n          // the scheduler with 0 and start the clock.\n          // Also set the proper size on the canvas.\n          if (!firstTimestamp) {\n            // Initialize timing\n            firstTimestamp = timestamp\n            lastTimestamp = timestamp\n            // Initialize frame size\n            const { width, height } = msg.framesize\n            el.width = width\n            el.height = height\n            // Notify that we can play at this point\n            scheduler.init(0)\n          }\n          // Compute millisecond presentation time (with offset 0\n          // as we initialized the scheduler with 0).\n          const presentationTime = (1000 * (timestamp - firstTimestamp))\n            / clockrate\n          const blob = new window.Blob([msg.data], { type: 'image/jpeg' })\n\n          // If the actual UTC time of the start of presentation isn't known yet,\n          // and we do have an ntpTimestamp, then compute it here and notify.\n          if (!ntpPresentationTime && ntpTimestamp) {\n            ntpPresentationTime = ntpTimestamp - presentationTime\n            onSync(ntpPresentationTime)\n          }\n\n          scheduler.run({\n            ntpTimestamp: presentationTime,\n            blob,\n          })\n\n          // Notify that we can now start the clock.\n          if (timestamp === firstTimestamp) {\n            onCanplay()\n          }\n\n          // Update bitrate/framerate\n          updateInfo(info, {\n            byteLength: msg.data.length,\n            duration: timestamp - lastTimestamp,\n          })\n          lastTimestamp = timestamp\n\n          callback()\n        } else {\n          callback()\n        }\n      },\n    })\n\n    // Set up an outgoing stream.\n    const outgoing = new Readable({\n      objectMode: true,\n      read() {\n        //\n      },\n    })\n\n    // When an error is sent on the outgoing stream, whine about it.\n    outgoing.on('error', () => {\n      console.warn('outgoing stream broke somewhere')\n    })\n\n    super(incoming, outgoing)\n\n    this._clock = clock\n    this._scheduler = scheduler\n    this._info = info\n\n    this.onCanplay = undefined\n    this.onSync = undefined\n  }\n\n  /**\n   * Retrieve the current presentation time (seconds)\n   */\n  get currentTime() {\n    return this._clock.currentTime\n  }\n\n  /**\n   * Pause the presentation.\n   */\n  pause() {\n    this._scheduler.suspend()\n    this._clock.pause()\n  }\n\n  /**\n   * Start the presentation.\n   */\n  play() {\n    this._clock.play()\n    this._scheduler.resume()\n  }\n\n  get bitrate() {\n    return this._info.bitrate\n  }\n\n  get framerate() {\n    return this._info.framerate\n  }\n}\n", "/**\n * Clock\n *\n * A simple timer to keep track of elapsed time,\n * which can be retrieved with the `now` method.\n * The clock is initially in a stopped state, during\n * which the elapsed time does not increase. When\n * started, the clock will return the total elapsed\n * time since the first start / last reset.\n *\n * As a convenience, start/stop are aliased as\n * play/pause, to mimic a media element (for use\n * as a playback clock). The `currentTime` getter\n * returns the elapsed time in seconds (floating\n * point), also as a convenienve to closely match\n * the behaviour of a video element.\n */\nexport class Clock {\n  private started: number\n  private stopped: boolean\n  private elapsed: number\n\n  constructor() {\n    this.elapsed = 0\n    this.started = 0\n    this.stopped = true\n  }\n\n  public start() {\n    if (this.stopped) {\n      this.started = window.performance.now()\n      this.stopped = false\n    }\n  }\n\n  public stop() {\n    if (!this.stopped) {\n      this.elapsed = this.now()\n      this.stopped = true\n    }\n  }\n\n  public reset() {\n    this.elapsed = 0\n    this.started = 0\n    this.stopped = true\n  }\n\n  // Gives the elapsed time in milliseconds since the\n  // clock was first started (after last reset).\n  public now() {\n    if (this.stopped) {\n      return this.elapsed\n    }\n    return this.elapsed + (window.performance.now() - this.started)\n  }\n\n  public play() {\n    this.start()\n  }\n\n  public pause() {\n    this.stop()\n  }\n\n  // Gives the elapsed time in seconds since last reset.\n  get currentTime() {\n    return this.now() / 1000\n  }\n}\n", "export interface Clock {\n  readonly currentTime: number\n  readonly play: () => void\n  readonly pause: () => void\n}\n\n// The default tolerance for matching the handler\n// invocation to clock presentation time.\nconst DEFAULT_TOLERANCE = 10\n\n/**\n * A scheduler that can decide when to execute a certain\n * timestamped callback so that it happens in sync with a video\n * element.\n *\n * To use it:\n *\n * (1) Initialize a new Scheduler with a clock (to synchronize\n * against) and a callback (to be called when a message is in\n * sync with the video). The clock can be a HTMLVideoElement,\n * or anything that has a `currentTime` property which gives\n * the current presentation time in seconds, and a `pause` and\n * `play` method to control playback.\n *\n * (2) Call the `run` method every time a new message arrives\n * that you want to schedule (it needs to have an ntpTimestamp).\n * As soon at the presentation time is known, call the `init`\n * method and pass in that time, so that the scheduler can\n * start to schedule the callbacks. From then on, whenever\n * a message in the queue has a timestamp that matches the\n * current presentation time of the video, your callback will\n * fire.\n */\n\nexport class Scheduler<T extends { readonly ntpTimestamp?: number }> {\n  private readonly _clock: Clock\n  private readonly _handler: (msg: T) => void\n  private readonly _tolerance: number\n  private _nextRun: number\n  private _nextPlay: number\n  private _fifo: T[]\n  private _ntpPresentationTime: number\n  private _suspended: boolean\n\n  /**\n   * Creates an instance of Scheduler.\n   * @param clock - The clock to use (so we can control playback)\n   * @param handler - The callback to invoke when a message is in sync\n   * @param tolerance - The milliseconds defining \"in sync\" (default = 10)\n   */\n  constructor(\n    clock: Clock,\n    handler: (msg: T) => void,\n    tolerance = DEFAULT_TOLERANCE\n  ) {\n    this._clock = clock\n    this._handler = handler\n    this._tolerance = tolerance\n    this._nextRun = 0\n    this._nextPlay = 0\n    this._fifo = []\n    this._ntpPresentationTime = 0\n    this._suspended = false\n  }\n\n  /**\n   * Bring the scheduler back to it's initial state.\n   */\n  public reset() {\n    clearTimeout(this._nextRun)\n    clearTimeout(this._nextPlay)\n    this._fifo = []\n    this._ntpPresentationTime = 0\n    this._suspended = false\n  }\n\n  /**\n   * Initialize the scheduler.\n   *\n   * @param ntpPresentationTime - The offset representing the start of the presentation\n   */\n  public init(ntpPresentationTime: number) {\n    this._ntpPresentationTime = ntpPresentationTime\n  }\n\n  /**\n   * Suspend the scheduler.\n   *\n   * This releases control of the clock and stops any scheduling activity.\n   * Note that this doesn't mean the clock will be in a particular state\n   * (could be started or stopped), just that the scheduler will no longer\n   * control it.\n   */\n  public suspend() {\n    clearTimeout(this._nextPlay)\n    this._suspended = true\n  }\n\n  /**\n   * Resume the scheduler.\n   *\n   * This gives back control of the clock and the ability\n   * to schedule messages. The scheduler will immediately\n   * try to do that on resume.\n   */\n  public resume() {\n    this._suspended = false\n    this.run(undefined)\n  }\n\n  /**\n   * Run the scheduler.\n   *\n   * @param newMessage - New message to schedule.\n   */\n  public run(newMessage?: T) {\n    clearTimeout(this._nextRun)\n    // If there is no way to schedule anything, just return.\n    // The first schedule will happen for the first .run that\n    // is called after the presentation time has been initialized.\n    if (typeof this._ntpPresentationTime === 'undefined') {\n      return\n    }\n    // If there is a new message, add it to the FIFO queue\n    if (typeof newMessage !== 'undefined') {\n      this._fifo.push(newMessage)\n    }\n    // If the scheduler is suspended, we can only keep the\n    // messages and not do anything with them.\n    if (this._suspended) {\n      return\n    }\n    // If there are no messages, we don't need to bother or\n    // even re-schedule, because the new call to .run() will\n    // have to come from outside with a new message.\n    if (this._fifo.length === 0) {\n      return\n    }\n    // There is at least one message in the FIFO queue, either\n    // display it, or re-schedule the method for later execution\n    let timeToPresent = 0\n    let currentMessage: T\n    do {\n      const msg = this._fifo.shift()\n      if (msg === undefined) {\n        throw new Error('internal error: message should never be undefined')\n      }\n      currentMessage = msg\n      const ntpTimestamp = currentMessage.ntpTimestamp\n      if (ntpTimestamp === undefined) {\n        continue\n      }\n      const presentationTime = ntpTimestamp - this._ntpPresentationTime\n      timeToPresent = presentationTime - this._clock.currentTime * 1000\n      // If the message is within a tolerance of the presentation time\n      // then call the handler.\n      if (Math.abs(timeToPresent) < this._tolerance) {\n        this._handler && this._handler(currentMessage)\n      }\n    } while (timeToPresent < this._tolerance && this._fifo.length > 0)\n\n    if (timeToPresent < -this._tolerance) {\n      // We ran out of messages, delay the video with the same amount\n      // of delay as the last message had on the FIFO queue.\n      // Since we don't have any messages in the queue right now,\n      // the only way for anything to happen is if scheduler.run\n      // is called.\n      clearTimeout(this._nextPlay)\n      this._clock.pause()\n      this._nextPlay = window.setTimeout(\n        () => this._clock.play(),\n        -timeToPresent\n      )\n    } else if (timeToPresent > this._tolerance) {\n      // message is later than video, add it back to the queue and\n      // re-run the scheduling at a later point in time\n      this._fifo.unshift(currentMessage)\n      this._nextRun = window.setTimeout(\n        () => this.run(undefined),\n        timeToPresent\n      )\n    }\n  }\n}\n", "import { Transform } from 'stream'\n\nimport { marker, payloadType } from '../../utils/protocols/rtp'\nimport { VideoMedia } from '../../utils/protocols/sdp'\nimport { Tube } from '../component'\nimport { Message, MessageType } from '../message'\n\nimport { H264DepayParser, NAL_TYPES } from './parser'\n\nexport class H264Depay extends Tube {\n  constructor() {\n    let h264PayloadType: number\n    let idrFound = false\n    let packets: Buffer[] = []\n\n    const h264DepayParser = new H264DepayParser()\n\n    // Incoming\n\n    const incoming = new Transform({\n      objectMode: true,\n      transform(msg: Message, _encoding, callback) {\n        // Get correct payload types from sdp to identify video and audio\n        if (msg.type === MessageType.SDP) {\n          const h264Media = msg.sdp.media.find((media): media is VideoMedia => {\n            return (\n              media.type === 'video'\n              && media.rtpmap !== undefined\n              && media.rtpmap.encodingName === 'H264'\n            )\n          })\n          if (h264Media !== undefined && h264Media.rtpmap !== undefined) {\n            h264PayloadType = h264Media.rtpmap.payloadType\n          }\n          callback(undefined, msg) // Pass on the original SDP message\n        } else if (\n          msg.type === MessageType.RTP\n          && payloadType(msg.data) === h264PayloadType\n        ) {\n          const endOfFrame = marker(msg.data)\n          const h264Message = h264DepayParser.parse(msg)\n\n          // Skip if not a full H264 frame, or when there hasn't been an I-frame yet\n          if (\n            h264Message === null\n            || (!idrFound && h264Message.nalType !== NAL_TYPES.IDR_PICTURE)\n          ) {\n            callback()\n            return\n          }\n\n          idrFound = true\n\n          // H.264 over RTP uses the RTP marker bit to indicate a complete\n          // frame.  At this point, the packets can be used to construct a\n          // complete message.\n\n          packets.push(h264Message.data)\n          if (endOfFrame) {\n            this.push({\n              ...h264Message,\n              data: packets.length === 1 ? packets[0] : Buffer.concat(packets),\n            })\n            packets = []\n          }\n          callback()\n        } else {\n          // Not a message we should handle\n          callback(undefined, msg)\n        }\n      },\n    })\n\n    // outgoing will be defaulted to a PassThrough stream\n    super(incoming)\n  }\n}\n", "import debug from 'debug'\n\nimport { payload, payloadType, timestamp } from '../../utils/protocols/rtp'\nimport { H264Message, MessageType, RtpMessage } from '../message'\n\nexport enum NAL_TYPES {\n  UNSPECIFIED = 0,\n  NON_IDR_PICTURE = 1, // P-frame\n  IDR_PICTURE = 5, // I-frame\n  SPS = 7,\n  PPS = 8,\n}\n\n/*\nFirst byte in payload (rtp payload header):\n      +---------------+\n      |0|1|2|3|4|5|6|7|\n      +-+-+-+-+-+-+-+-+\n      |F|NRI|  Type   |\n      +---------------+\n\n2nd byte in payload: FU header (if type in first byte is 28)\n      +---------------+\n      |0|1|2|3|4|5|6|7|\n      +-+-+-+-+-+-+-+-+\n      |S|E|R|  Type   | S = start, E = end\n      +---------------+\n*/\n\nconst h264Debug = debug('msl:h264depay')\n\nexport class H264DepayParser {\n  private _buffer: Buffer\n\n  constructor() {\n    this._buffer = Buffer.alloc(0)\n  }\n\n  parse(rtp: RtpMessage): H264Message | null {\n    const rtpPayload = payload(rtp.data)\n    const type = rtpPayload[0] & 0x1f\n\n    if (type === 28) {\n      /* FU-A NALU */ const fuIndicator = rtpPayload[0]\n      const fuHeader = rtpPayload[1]\n      const startBit = !!(fuHeader >> 7)\n      const nalType = fuHeader & 0x1f\n      const nal = (fuIndicator & 0xe0) | nalType\n      const stopBit = fuHeader & 64\n      if (startBit) {\n        this._buffer = Buffer.concat([\n          Buffer.from([0, 0, 0, 0, nal]),\n          rtpPayload.slice(2),\n        ])\n        return null\n      } else if (stopBit) {\n        /* receieved end bit */ const h264frame = Buffer.concat([\n          this._buffer,\n          rtpPayload.slice(2),\n        ])\n        h264frame.writeUInt32BE(h264frame.length - 4, 0)\n        const msg: H264Message = {\n          data: h264frame,\n          type: MessageType.H264,\n          timestamp: timestamp(rtp.data),\n          ntpTimestamp: rtp.ntpTimestamp,\n          payloadType: payloadType(rtp.data),\n          nalType,\n        }\n        this._buffer = Buffer.alloc(0)\n        return msg\n      }\n      // Put the received data on the buffer and cut the header bytes\n      this._buffer = Buffer.concat([this._buffer, rtpPayload.slice(2)])\n      return null\n    } else if (\n      (type === NAL_TYPES.NON_IDR_PICTURE || type === NAL_TYPES.IDR_PICTURE)\n      && this._buffer.length === 0\n    ) {\n      /* Single NALU */ const h264frame = Buffer.concat([\n        Buffer.from([0, 0, 0, 0]),\n        rtpPayload,\n      ])\n      h264frame.writeUInt32BE(h264frame.length - 4, 0)\n      const msg: H264Message = {\n        data: h264frame,\n        type: MessageType.H264,\n        timestamp: timestamp(rtp.data),\n        ntpTimestamp: rtp.ntpTimestamp,\n        payloadType: payloadType(rtp.data),\n        nalType: type,\n      }\n      this._buffer = Buffer.alloc(0)\n      return msg\n    }\n    h264Debug(\n      `H264depayComponent can only extract types 1,5 and 28, got ${type}`\n    )\n    this._buffer = Buffer.alloc(0)\n    return null\n  }\n}\n", "import registerDebug from 'debug'\n\nimport { Readable } from 'stream'\n\nimport { Source } from '../component'\nimport { MessageType } from '../message'\n\nconst debug = registerDebug('msl:http-source')\n\nexport interface HttpConfig {\n  uri: string\n  options?: RequestInit\n}\n\nexport class HttpSource extends Source {\n  public uri: string\n  public options?: RequestInit\n  public length?: number\n  public onHeaders?: (headers: Headers) => void\n  public onServerClose?: () => void\n\n  private _reader?: ReadableStreamDefaultReader<Uint8Array>\n  private _abortController?: AbortController\n  private _allDone: boolean\n\n  /**\n   * Create an HTTP component.\n   *\n   * The constructor sets a single readable stream from a fetch.\n   */\n  constructor(config: HttpConfig) {\n    const { uri, options } = config\n    /**\n     * Set up an incoming stream and attach it to the socket.\n     */\n    const incoming = new Readable({\n      objectMode: true,\n      read() {\n        //\n      },\n    })\n\n    // When an error is sent on the incoming stream, close the socket.\n    incoming.on('error', (e) => {\n      console.warn('closing socket due to incoming error', e)\n      this._reader && this._reader.cancel().catch((err) => console.error(err))\n    })\n\n    /**\n     * initialize the component.\n     */\n    super(incoming)\n\n    // When a read is requested, continue to pull data\n    incoming._read = () => {\n      this._pull()\n    }\n\n    this.uri = uri\n    this.options = options\n    this._allDone = false\n  }\n\n  play(): void {\n    if (this.uri === undefined) {\n      throw new Error('cannot start playing when there is no URI')\n    }\n\n    this._abortController = new AbortController()\n\n    this.length = 0\n    fetch(this.uri, {\n      credentials: 'include',\n      signal: this._abortController.signal,\n      ...this.options,\n    })\n      .then((rsp) => {\n        if (rsp.body === null) {\n          throw new Error('empty response body')\n        }\n\n        this.onHeaders && this.onHeaders(rsp.headers)\n\n        this._reader = rsp.body.getReader()\n        this._pull()\n      })\n      .catch((err) => {\n        console.error('http-source: fetch failed: ', err)\n      })\n  }\n\n  abort(): void {\n    this._reader\n      && this._reader.cancel().catch((err) => {\n        console.log('http-source: cancel reader failed: ', err)\n      })\n    this._abortController && this._abortController.abort()\n  }\n\n  _isClosed(): boolean {\n    return this._allDone\n  }\n\n  _close(): void {\n    this._reader = undefined\n    this._allDone = true\n    this.incoming.push(null)\n    this.onServerClose?.()\n  }\n\n  _pull(): void {\n    if (this._reader === undefined) {\n      return\n    }\n\n    this._reader\n      .read()\n      .then(({ done, value }) => {\n        if (done) {\n          if (!this._isClosed()) {\n            debug('fetch completed, total downloaded: ', this.length, ' bytes')\n            this._close()\n          }\n          return\n        }\n        if (value === undefined) {\n          throw new Error('expected value to be defined')\n        }\n        if (this.length === undefined) {\n          throw new Error('expected length to be defined')\n        }\n        this.length += value.length\n        const buffer = Buffer.from(value)\n        if (!this.incoming.push({ data: buffer, type: MessageType.RAW })) {\n          // Something happened down stream that it is no longer processing the\n          // incoming data, and the stream buffer got full.\n          // This could be because we are downloading too much data at once,\n          // or because the downstream is frozen. The latter is most likely\n          // when dealing with a live stream (as in that case we would expect\n          // downstream to be able to handle the data).\n          debug('downstream back pressure: pausing read')\n        } else {\n          // It's ok to read more data\n          this._pull()\n        }\n      })\n      .catch((err) => {\n        debug('http-source: read failed: ', err)\n        if (!this._isClosed()) {\n          this._close()\n        }\n      })\n  }\n}\n", "import { Transform } from 'stream'\n\nimport { Tube } from '../component'\nimport { GenericMessage, MessageType } from '../message'\n\nconst generateLogger = (prefix: string, type?: MessageType) => {\n  let lastTimestamp = Date.now()\n\n  const log = (msg: GenericMessage) => {\n    const timestamp = Date.now()\n    console.log(`${prefix}: +${timestamp - lastTimestamp}ms`, msg)\n    lastTimestamp = timestamp\n  }\n\n  if (type === undefined) {\n    return log\n  }\n  return (msg: GenericMessage) => msg.type === type && log(msg)\n}\n\n/**\n * Component that logs whatever is passing through.\n */\nexport class Inspector extends Tube {\n  /**\n   * Create a new inspector component.\n   * @argument {String} type  The type of message to log (default is to log all).\n   * @return {undefined}\n   */\n  constructor(type?: MessageType) {\n    const incomingLogger = generateLogger('incoming', type)\n\n    const incoming = new Transform({\n      objectMode: true,\n      transform(msg, encoding, callback) {\n        incomingLogger(msg)\n        callback(undefined, msg)\n      },\n    })\n\n    const outgoingLogger = generateLogger('outgoing', type)\n\n    const outgoing = new Transform({\n      objectMode: true,\n      transform(msg, encoding, callback) {\n        outgoingLogger(msg)\n        callback(undefined, msg)\n      },\n    })\n\n    super(incoming, outgoing)\n  }\n}\n", "import { Transform } from 'stream'\n\nimport { marker, payloadType, timestamp } from '../../utils/protocols/rtp'\nimport { VideoMedia } from '../../utils/protocols/sdp'\nimport { Tube } from '../component'\nimport { Message, MessageType } from '../message'\n\nimport { jpegDepayFactory } from './parser'\n\nexport class JPEGDepay extends Tube {\n  constructor() {\n    let jpegPayloadType: number\n    let packets: Buffer[] = []\n    let jpegDepay: (packets: Buffer[]) => {\n      size: { width: number; height: number }\n      data: Buffer\n    }\n\n    const incoming = new Transform({\n      objectMode: true,\n      transform(msg: Message, encoding, callback) {\n        if (msg.type === MessageType.SDP) {\n          const jpegMedia = msg.sdp.media.find((media): media is VideoMedia => {\n            return (\n              media.type === 'video'\n              && media.rtpmap !== undefined\n              && media.rtpmap.encodingName === 'JPEG'\n            )\n          })\n          if (jpegMedia !== undefined && jpegMedia.rtpmap !== undefined) {\n            jpegPayloadType = Number(jpegMedia.rtpmap.payloadType)\n            const framesize = jpegMedia.framesize\n            // `framesize` is an SDP field that is present in e.g. Axis camera's\n            // and is used because the width and height that can be sent inside\n            // the JPEG header are both limited to 2040.\n            // If present, we use this width and height as the default values\n            // to be used by the jpeg depay function, otherwise we ignore this\n            // and let the JPEG header inside the RTP packets determine this.\n            if (framesize !== undefined) {\n              const [width, height] = framesize\n              // msg.framesize = { width, height }\n              jpegDepay = jpegDepayFactory(width, height)\n            } else {\n              jpegDepay = jpegDepayFactory()\n            }\n          }\n\n          callback(undefined, msg)\n        } else if (\n          msg.type === MessageType.RTP\n          && payloadType(msg.data) === jpegPayloadType\n        ) {\n          packets.push(msg.data)\n\n          // JPEG over RTP uses the RTP marker bit to indicate end\n          // of fragmentation. At this point, the packets can be used\n          // to reconstruct a JPEG frame.\n          if (marker(msg.data) && packets.length > 0) {\n            const jpegFrame = jpegDepay(packets)\n            this.push({\n              timestamp: timestamp(msg.data),\n              ntpTimestamp: msg.ntpTimestamp,\n              payloadType: payloadType(msg.data),\n              data: jpegFrame.data,\n              framesize: jpegFrame.size,\n              type: MessageType.JPEG,\n            })\n            packets = []\n          }\n          callback()\n        } else {\n          // Not a message we should handle\n          callback(undefined, msg)\n        }\n      },\n    })\n\n    // outgoing will be defaulted to a PassThrough stream\n    super(incoming)\n  }\n}\n", "/**\n * Generate frame and scan headers that can be prepended to the\n * RTP/JPEG data payload to produce a JPEG compressed image in\n * interchange format.\n *\n * For detailed information, check Appendix A of:\n * https://tools.ietf.org/html/rfc2435\n */\n\nexport function makeImageHeader() {\n  return Buffer.from([0xff, 0xd8])\n}\n\nexport function makeQuantHeader(precision: number, qTable: Buffer) {\n  const lumSize = precision & 1 ? 128 : 64\n  const chmSize = precision & 2 ? 128 : 64\n  if (qTable.length !== lumSize + chmSize) {\n    throw new Error('invalid quantization table')\n  }\n  const lumaPrefix = Buffer.from([0xff, 0xdb, 0, lumSize + 3, 0])\n  const chromaPrefix = Buffer.from([0xff, 0xdb, 0, chmSize + 3, 1])\n  return Buffer.concat([\n    lumaPrefix,\n    qTable.slice(0, lumSize),\n    chromaPrefix,\n    qTable.slice(lumSize),\n  ])\n}\n\nexport function makeFrameHeader(width: number, height: number, type: number) {\n  return Buffer.from([\n    0xff,\n    0xc0, // SOF_0 (Start Of Frame)\n    0,\n    17,\n    8,\n    height >> 8,\n    height,\n    width >> 8,\n    width,\n    3,\n    0,\n    type === 0 ? 0x21 : 0x22,\n    0,\n    1,\n    0x11,\n    1,\n    2,\n    0x11,\n    1,\n  ])\n}\n\n// dprint-ignore\nconst LUM_DC_CODELENS = [\n  0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0\n]\n// dprint-ignore\nconst LUM_DC_SYMBOLS = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\n]\n// dprint-ignore\nconst LUM_AC_CODELENS = [\n  0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 0x7d\n]\n// dprint-ignore\nconst LUM_AC_SYMBOLS = [\n  0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12,\n  0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07,\n  0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08,\n  0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0,\n  0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16,\n  0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28,\n  0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,\n  0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,\n  0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,\n  0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,\n  0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,\n  0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,\n  0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,\n  0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,\n  0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6,\n  0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5,\n  0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4,\n  0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2,\n  0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,\n  0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,\n  0xf9, 0xfa\n]\n// dprint-ignore\nconst CHM_DC_CODELENS = [\n  0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0\n]\n// dprint-ignore\nconst CHM_DC_SYMBOLS = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\n]\n// dprint-ignore\nconst CHM_AC_CODELENS = [\n  0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 0x77\n]\n// dprint-ignore\nconst CHM_AC_SYMBOLS = [\n  0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21,\n  0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71,\n  0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91,\n  0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0,\n  0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34,\n  0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26,\n  0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38,\n  0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,\n  0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,\n  0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,\n  0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,\n  0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,\n  0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96,\n  0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,\n  0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4,\n  0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,\n  0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2,\n  0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,\n  0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,\n  0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,\n  0xf9, 0xfa\n]\n\nexport function makeHuffmanHeader() {\n  const LUM_DC_BUFFER = [\n    [\n      0xff,\n      0xc4,\n      0,\n      3 + LUM_DC_CODELENS.length + LUM_DC_SYMBOLS.length,\n      (0 << 4) | 0,\n    ],\n    LUM_DC_CODELENS,\n    LUM_DC_SYMBOLS,\n  ]\n\n  const LUM_AC_BUFFER = [\n    [\n      0xff,\n      0xc4,\n      0,\n      3 + LUM_AC_CODELENS.length + LUM_AC_SYMBOLS.length,\n      (1 << 4) | 0,\n    ],\n    LUM_AC_CODELENS,\n    LUM_AC_SYMBOLS,\n  ]\n\n  const CHM_DC_BUFFER = [\n    [\n      0xff,\n      0xc4,\n      0,\n      3 + CHM_DC_CODELENS.length + CHM_DC_SYMBOLS.length,\n      (0 << 4) | 1,\n    ],\n    CHM_DC_CODELENS,\n    CHM_DC_SYMBOLS,\n  ]\n\n  const CHM_AC_BUFFER = [\n    [\n      0xff,\n      0xc4,\n      0,\n      3 + CHM_AC_CODELENS.length + CHM_AC_SYMBOLS.length,\n      (1 << 4) | 1,\n    ],\n    CHM_AC_CODELENS,\n    CHM_AC_SYMBOLS,\n  ]\n\n  return Buffer.concat([\n    ...LUM_DC_BUFFER.map(Buffer.from),\n    ...LUM_AC_BUFFER.map(Buffer.from),\n    ...CHM_DC_BUFFER.map(Buffer.from),\n    ...CHM_AC_BUFFER.map(Buffer.from),\n  ])\n}\n\nexport function makeScanHeader() {\n  return Buffer.from([\n    0xff,\n    0xda, // SOS (Start Of Scan)\n    0,\n    12,\n    3,\n    0,\n    0,\n    1,\n    0x11,\n    2,\n    0x11,\n    0,\n    63,\n    0,\n  ])\n}\n\nexport function makeDRIHeader(dri: number) {\n  return Buffer.from([0xff, 0xdd, 0x00, 4, dri >> 8, dri & 0xff])\n}\n", "export function clamp(val: number, min: number, max: number): number {\n  return val > max ? max : val < min ? min : val\n}\n", "import { clamp } from '../../utils/clamp'\n/**\n * @function makeQtable\n * Creating a quantization table from a Q factor\n * Example Code from RFC 2435 Appendix A ported to TypeScript\n *\n * Default luminance/chrominance quantization tables in RFC example are not in zig-zag order.\n * The RFC does not mention that default tables should be in zig-zag ordering,\n * but they say that about the included tables. RFC sample code appears to have a mistake.\n * All the tested cameras and LGPL projects use zig-zag default tables.\n * So we use zig-zaged tables from ISO/IEC 10918-1 Annex K Section K.1\n * @see https://tools.ietf.org/html/rfc2435\n * @see https://www.iso.org/standard/18902.html\n */\n// dprint-ignore\nconst jpegLumaQuantizer = [\n  16,  11,  12,  14,  12,  10,  16,  14,\n  13,  14,  18,  17,  16,  19,  24,  40,\n  26,  24,  22,  22,  24,  49,  35,  37,\n  29,  40,  58,  51,  61,  60,  57,  51,\n  56,  55,  64,  72,  92,  78,  64,  68,\n  87,  69,  55,  56,  80,  109, 81,  87,\n  95,  98,  103, 104, 103, 62,  77,  113,\n  121, 112, 100, 120, 92,  101, 103, 99,\n]\n// dprint-ignore\nconst jpeChromaQuantizer = [\n  17,  18,  18,  24,  21,  24,  47,  26,\n  26,  47,  99,  66,  56,  66,  99,  99,\n  99,  99,  99,  99,  99,  99,  99,  99,\n  99,  99,  99,  99,  99,  99,  99,  99,\n  99,  99,  99,  99,  99,  99,  99,  99,\n  99,  99,  99,  99,  99,  99,  99,  99,\n  99,  99,  99,  99,  99,  99,  99,  99,\n  99,  99,  99,  99,  99,  99,  99,  99\n]\n\nexport function makeQtable(Q: number): Buffer {\n  const factor = clamp(Q, 1, 99)\n  const buffer = Buffer.alloc(128)\n  const S = Q < 50 ? Math.floor(5000 / factor) : 200 - factor * 2\n\n  for (let i = 0; i < 64; i++) {\n    const lq = Math.floor((jpegLumaQuantizer[i] * S + 50) / 100)\n    const cq = Math.floor((jpeChromaQuantizer[i] * S + 50) / 100)\n    buffer.writeUInt8(clamp(lq, 1, 255), i)\n    buffer.writeUInt8(clamp(cq, 1, 255), i + 64)\n  }\n  return buffer\n}\n", "import { payload } from '../../utils/protocols/rtp'\n\nimport {\n  makeDRIHeader,\n  makeFrameHeader,\n  makeHuffmanHeader,\n  makeImageHeader,\n  makeQuantHeader,\n  makeScanHeader,\n} from './headers'\nimport { makeQtable } from './make-qtable'\n\n/**\n * Each packet contains a special JPEG header which immediately follows\n * the RTP header.  The first 8 bytes of this header, called the \"main\n * JPEG header\", are as follows:*\n *  0                   1                   2                   3\n *  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n * | Type-specific |              Fragment Offset                  |\n * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n * |      Type     |       Q       |     Width     |     Height    |\n * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n */\n\n/**\n * Restart Marker header: when using types 64-127\n *  0                   1                   2                   3\n *  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n * |       Restart Interval        |F|L|       Restart Count       |\n * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n */\n\n/**\n * Quantization Table header: when using Q values 128-255\n *  0                   1                   2                   3\n *  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n * |      MBZ      |   Precision   |             Length            |\n * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n * |                    Quantization Table Data                    |\n * |                              ...                              |\n * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n */\n\nexport function jpegDepayFactory(defaultWidth = 0, defaultHeight = 0) {\n  const IMAGE_HEADER = makeImageHeader()\n  const HUFFMAN_HEADER = makeHuffmanHeader()\n  const SCAN_HEADER = makeScanHeader()\n\n  return function jpegDepay(packets: Buffer[]) {\n    let metadata\n    const fragments: Buffer[] = []\n    for (const packet of packets) {\n      let fragment = payload(packet)\n\n      // Parse and extract JPEG header.\n      const typeSpecific = fragment.readUInt8(0)\n      const fragmentOffset = (fragment.readUInt8(1) << 16)\n        | (fragment.readUInt8(2) << 8)\n        | fragment.readUInt8(3)\n      const type = fragment.readUInt8(4)\n      const Q = fragment.readUInt8(5)\n      const width = fragment.readUInt8(6) * 8 || defaultWidth\n      const height = fragment.readUInt8(7) * 8 || defaultHeight\n      fragment = fragment.slice(8)\n\n      // Parse and extract Restart Marker header if present.\n      let DRI = 0\n      if (type >= 64 && type <= 127) {\n        DRI = fragment.readUInt16BE(0)\n        fragment = fragment.slice(4)\n      }\n\n      // Parse and extract Quantization Table header if present.\n      if (Q >= 128 && fragmentOffset === 0) {\n        // const MBZ = fragment.readUInt8()\n        const precision = fragment.readUInt8(1)\n        const length = fragment.readUInt16BE(2)\n        const qTable = fragment.slice(4, 4 + length)\n        metadata = {\n          typeSpecific,\n          type,\n          width,\n          height,\n          DRI,\n          precision,\n          qTable,\n        }\n        fragment = fragment.slice(4 + length)\n      } // Compute Quantization Table\n      else if (Q < 128 && fragmentOffset === 0) {\n        const precision = 0\n        const qTable = makeQtable(Q)\n        metadata = {\n          typeSpecific,\n          type,\n          width,\n          height,\n          DRI,\n          precision,\n          qTable,\n        }\n      }\n\n      fragments.push(fragment)\n    }\n\n    if (metadata === undefined) {\n      throw new Error('no quantization header present')\n    }\n\n    const { precision, qTable, type, width, height } = metadata\n\n    const quantHeader = makeQuantHeader(precision, qTable)\n\n    const driHeader = metadata.DRI === 0\n      ? Buffer.alloc(0)\n      : makeDRIHeader(metadata.DRI)\n\n    const frameHeader = makeFrameHeader(width, height, type)\n\n    return {\n      size: { width, height },\n      data: Buffer.concat([\n        IMAGE_HEADER,\n        quantHeader,\n        driHeader,\n        frameHeader,\n        HUFFMAN_HEADER,\n        SCAN_HEADER,\n        ...fragments,\n      ]),\n    }\n  }\n}\n", "import debug from 'debug'\n\nimport { Transform } from 'stream'\n\nimport { Tube } from '../component'\nimport { Message, MessageType } from '../message'\n\nconst MAX_CAPTURE_BYTES = 225000000 // 5 min at a rate of 6 Mbit/s\n\n/**\n * Component that records MP4 data.\n */\nexport class Mp4Capture extends Tube {\n  private _active: boolean\n  private _capture: boolean\n  private _captureCallback: (buffer: Buffer) => void\n  private _bufferOffset: number\n  private readonly _bufferSize: number\n  private _buffer: Buffer\n\n  constructor(maxSize = MAX_CAPTURE_BYTES) {\n    const incoming = new Transform({\n      objectMode: true,\n      transform: (msg: Message, _encoding, callback) => {\n        // Arrival of ISOM with tracks indicates new movie, start recording if active.\n        if (\n          this._active\n          && msg.type === MessageType.ISOM\n          && msg.tracks !== undefined\n        ) {\n          this._capture = true\n        }\n\n        // If capture enabled, record all ISOM (MP4) boxes\n        if (this._capture && msg.type === MessageType.ISOM) {\n          if (\n            this._bufferOffset\n              < this._buffer.byteLength - msg.data.byteLength\n          ) {\n            msg.data.copy(this._buffer, this._bufferOffset)\n            this._bufferOffset += msg.data.byteLength\n          } else {\n            this.stop()\n          }\n        }\n        // Always pass on all messages\n        callback(undefined, msg)\n      },\n    })\n\n    // Stop any recording when the stream is closed.\n    incoming.on('finish', () => {\n      this.stop()\n    })\n\n    super(incoming)\n\n    this._buffer = Buffer.allocUnsafe(0)\n    this._bufferSize = maxSize\n    this._bufferOffset = 0\n\n    this._active = false\n    this._capture = false\n    this._captureCallback = () => {\n      /** noop */\n    }\n  }\n\n  /**\n   * Activate video capture. The capture will begin when a new movie starts,\n   * and will terminate when the movie ends or when the buffer is full. On\n   * termination, the callback you passed will be called with the captured\n   * data as argument.\n   * @param callback  Will be called when data is captured.\n   */\n  start(callback: (buffer: Buffer) => void) {\n    if (!this._active) {\n      debug('msl:capture:start')(callback)\n\n      this._captureCallback = callback\n\n      this._buffer = Buffer.allocUnsafe(this._bufferSize)\n      this._bufferOffset = 0\n\n      this._active = true\n    }\n  }\n\n  /**\n   * Deactivate video capture. This ends an ongoing capture and prevents\n   * any further capturing.\n   */\n  stop() {\n    if (this._active) {\n      debug('msl:capture:stop')(`captured bytes: ${this._bufferOffset}`)\n\n      try {\n        this._captureCallback(this._buffer.slice(0, this._bufferOffset))\n      } catch (e) {\n        console.error(e)\n      }\n\n      this._buffer = Buffer.allocUnsafe(0)\n      this._bufferOffset = 0\n\n      this._active = false\n      this._capture = false\n    }\n  }\n}\n", "import debug from 'debug'\n\nimport { Transform } from 'stream'\n\nimport { Tube } from '../component'\nimport { NAL_TYPES } from '../h264depay/parser'\nimport { Message, MessageType } from '../message'\n\nimport { BoxBuilder } from './helpers/boxbuilder'\nimport { Box } from './helpers/isom'\n\n/**\n * Component that converts elementary stream data into MP4 boxes honouring\n * the ISO BMFF Byte Stream (Some extra restrictions are involved).\n */\nexport class Mp4Muxer extends Tube {\n  public boxBuilder: BoxBuilder\n  public onSync?: (ntpPresentationTime: number) => void\n  /**\n   * Create a new mp4muxer component.\n   * @return {undefined}\n   */\n  constructor() {\n    const boxBuilder = new BoxBuilder()\n    const onSync = (ntpPresentationTime: number) => {\n      this.onSync && this.onSync(ntpPresentationTime)\n    }\n    const incoming = new Transform({\n      objectMode: true,\n      transform(msg: Message, encoding, callback) {\n        if (msg.type === MessageType.SDP) {\n          /**\n           * Arrival of SDP signals the beginning of a new movie.\n           * Set up the ftyp and moov boxes.\n           */\n\n          // Why is this here? These should be default inside the mvhd box?\n          const now = Math.floor(new Date().getTime() / 1000 + 2082852000)\n          const ftyp = new Box('ftyp')\n          const moov = boxBuilder.moov(msg.sdp, now)\n\n          const data = Buffer.allocUnsafe(ftyp.byteLength + moov.byteLength)\n          ftyp.copy(data, 0)\n          moov.copy(data, ftyp.byteLength)\n\n          debug('msl:mp4:isom')(`ftyp: ${ftyp.format()}`)\n          debug('msl:mp4:isom')(`moov: ${moov.format()}`)\n\n          // Set up a list of tracks that contain info about\n          // the type of media, encoding, and codec are present.\n          const tracks = msg.sdp.media.map((media) => {\n            return {\n              type: media.type,\n              encoding: media.rtpmap && media.rtpmap.encodingName,\n              mime: media.mime,\n              codec: media.codec,\n            }\n          })\n\n          this.push({ type: MessageType.ISOM, data, tracks, ftyp, moov })\n        } else if (\n          msg.type === MessageType.ELEMENTARY\n          || msg.type === MessageType.H264\n        ) {\n          /**\n           * Otherwise we are getting some elementary stream data.\n           * Set up the moof and mdat boxes.\n           */\n\n          const { payloadType, timestamp, ntpTimestamp } = msg\n          const trackId = boxBuilder.trackIdMap[payloadType]\n\n          if (trackId) {\n            if (!boxBuilder.ntpPresentationTime) {\n              boxBuilder.setPresentationTime(trackId, ntpTimestamp)\n              if (boxBuilder.ntpPresentationTime) {\n                onSync(boxBuilder.ntpPresentationTime)\n              }\n            }\n\n            let checkpointTime: number | undefined\n            const idrPicture = msg.type === MessageType.H264\n              ? msg.nalType === NAL_TYPES.IDR_PICTURE\n              : undefined\n            if (\n              boxBuilder.ntpPresentationTime\n              && idrPicture\n              && msg.ntpTimestamp !== undefined\n            ) {\n              checkpointTime =\n                (msg.ntpTimestamp - boxBuilder.ntpPresentationTime) / 1000\n            }\n\n            const byteLength = msg.data.byteLength\n            const moof = boxBuilder.moof({ trackId, timestamp, byteLength })\n            const mdat = boxBuilder.mdat(msg.data)\n\n            const data = Buffer.allocUnsafe(moof.byteLength + mdat.byteLength)\n            moof.copy(data, 0)\n            mdat.copy(data, moof.byteLength)\n\n            this.push({\n              type: MessageType.ISOM,\n              data,\n              moof,\n              mdat,\n              ntpTimestamp,\n              checkpointTime,\n            })\n          }\n        } else {\n          // No message type we recognize, pass it on.\n          this.push(msg)\n        }\n        callback()\n      },\n    })\n\n    super(incoming)\n    this.boxBuilder = boxBuilder\n  }\n\n  get bitrate() {\n    return (\n      this.boxBuilder.trackData\n      && this.boxBuilder.trackData.map((data) => data.bitrate)\n    )\n  }\n\n  get framerate() {\n    return (\n      this.boxBuilder.trackData\n      && this.boxBuilder.trackData.map((data) => data.framerate)\n    )\n  }\n\n  get ntpPresentationTime() {\n    return this.boxBuilder.ntpPresentationTime\n  }\n}\n", "// Elements: parts of a box that hold values.\n// They should have a:\n// - byteLength\n// - value (can be accessed from outside to set/retrieve)\n// - store(buffer, offset) -> write the value to a buffer\n// - load(buffer, offset) -> read data and store in value\n\nimport { MediaTrack } from '../../../utils/protocols/isom'\n\ntype BufferMutation = (buffer: Buffer, offset: number) => void\n\n// Constants\nconst UINT32_RANGE = Math.pow(2, 32)\n\nabstract class BoxElement {\n  public byteLength: number\n  public value: any\n  abstract copy(buffer: Buffer, offset: number): void\n  abstract load(buffer: Buffer, offset: number): void\n\n  constructor(size: number) {\n    this.byteLength = size\n  }\n}\n\nclass Empty extends BoxElement {\n  constructor(size = 0) {\n    super(size)\n  }\n\n  copy: BufferMutation = (buffer, offset) => {\n    buffer.fill(0, offset, offset + this.byteLength)\n  }\n\n  load() {\n    /** noop */\n  }\n}\n\nclass CharArray extends BoxElement {\n  public value: string\n\n  constructor(s: string) {\n    super(s.length)\n    this.value = s\n  }\n\n  copy: BufferMutation = (buffer, offset) => {\n    for (let i = 0; i < this.byteLength; i += 1) {\n      buffer[offset + i] = this.value.charCodeAt(i)\n    }\n  }\n\n  load: BufferMutation = (buffer, offset) => {\n    this.value = buffer\n      .slice(offset, offset + this.byteLength)\n      .toString('ascii')\n  }\n}\n\nclass UInt8 extends BoxElement {\n  public value: number\n\n  constructor(scalar = 0) {\n    super(1)\n    this.value = scalar\n  }\n\n  copy: BufferMutation = (buffer, offset) => {\n    buffer.writeUInt8(this.value, offset)\n  }\n\n  load: BufferMutation = (buffer, offset) => {\n    this.value = buffer.readUInt8(offset)\n  }\n}\n\nclass UInt8Array extends BoxElement {\n  public value: number[]\n\n  constructor(array: number[]) {\n    super(array.length)\n    this.value = array\n  }\n\n  copy: BufferMutation = (buffer, offset) => {\n    for (let i = 0; i < this.value.length; ++i) {\n      buffer.writeUInt8(this.value[i], offset + i)\n    }\n  }\n\n  load: BufferMutation = (buffer, offset) => {\n    for (let i = 0; i < this.value.length; ++i) {\n      this.value[i] = buffer.readUInt8(offset + i)\n    }\n  }\n}\n\nclass UInt16BE extends BoxElement {\n  public value: number\n\n  constructor(scalar = 0) {\n    super(2)\n    this.value = scalar\n  }\n\n  copy: BufferMutation = (buffer, offset) => {\n    buffer.writeUInt16BE(this.value, offset)\n  }\n\n  load: BufferMutation = (buffer, offset) => {\n    this.value = buffer.readUInt16BE(offset)\n  }\n}\n\nclass UInt24BE extends BoxElement {\n  public value: number\n\n  constructor(scalar = 0) {\n    super(3)\n    this.value = scalar\n  }\n\n  copy: BufferMutation = (buffer, offset) => {\n    buffer.writeUInt8((this.value >> 16) & 0xff, offset)\n    buffer.writeUInt8((this.value >> 8) & 0xff, offset + 1)\n    buffer.writeUInt8(this.value & 0xff, offset + 2)\n  }\n\n  load: BufferMutation = (buffer, offset) => {\n    this.value =\n      (buffer.readUInt8(offset) << (16 + buffer.readUInt8(offset + 1)))\n      << (8 + buffer.readUInt8(offset + 2))\n  }\n}\n\nclass UInt16BEArray extends BoxElement {\n  public value: number[]\n\n  constructor(array: number[]) {\n    super(array.length * 2)\n    this.value = array\n  }\n\n  copy: BufferMutation = (buffer, offset) => {\n    for (let i = 0; i < this.value.length; ++i) {\n      buffer.writeUInt16BE(this.value[i], offset + 2 * i)\n    }\n  }\n\n  load: BufferMutation = (buffer, offset) => {\n    for (let i = 0; i < this.value.length; ++i) {\n      this.value[i] = buffer.readUInt16BE(offset + 2 * i)\n    }\n  }\n}\n\nclass UInt32BE extends BoxElement {\n  public value: number\n\n  constructor(scalar = 0) {\n    super(4)\n    this.value = scalar\n  }\n\n  copy: BufferMutation = (buffer, offset) => {\n    buffer.writeUInt32BE(this.value, offset)\n  }\n\n  load: BufferMutation = (buffer, offset) => {\n    this.value = buffer.readUInt32BE(offset)\n  }\n}\n\nclass UInt32BEArray extends BoxElement {\n  public value: number[]\n\n  constructor(array: number[]) {\n    super(array.length * 4)\n    this.value = array\n  }\n\n  copy: BufferMutation = (buffer, offset) => {\n    for (let i = 0; i < this.value.length; ++i) {\n      buffer.writeUInt32BE(this.value[i], offset + 4 * i)\n    }\n  }\n\n  load: BufferMutation = (buffer, offset) => {\n    for (let i = 0; i < this.value.length; ++i) {\n      this.value[i] = buffer.readUInt32BE(offset + 4 * i)\n    }\n  }\n}\n\nclass UInt64BE extends BoxElement {\n  public value: number\n\n  constructor(scalar = 0) {\n    super(8)\n    this.value = scalar\n  }\n\n  copy: BufferMutation = (buffer, offset) => {\n    const high = (this.value / UINT32_RANGE) | 0\n    const low = this.value - high * UINT32_RANGE\n    buffer.writeUInt32BE(high, offset)\n    buffer.writeUInt32BE(low, offset + 4)\n  }\n\n  load: BufferMutation = (buffer, offset) => {\n    const high = buffer.readUInt32BE(offset)\n    const low = buffer.readUInt32BE(offset + 4)\n    this.value = high * UINT32_RANGE + low\n  }\n}\n\n/**\n * Class factory for a parameter set element. A parameter set groups a size,\n * and an array of parameter sets consisting each of a size and a byte array.\n * These elements are used by the avcC box.\n * @param  [sizeMask=0x00]  A bit mask to use for the size.\n * @return An element type that groups parameter sets.\n */\nconst createParameterSetArrayClass = function(sizeMask = 0x00) {\n  return class ParameterSetArray extends BoxElement {\n    public value: any[]\n    /**\n     * Takes an array of byte-arrays\n     * @param  array The array of byte arrays\n     */\n    constructor(array: number[][]) {\n      super(0)\n      // this.setLengths = array.map((byteArray) => byteArray.length);\n      this.value = array.reduce(\n        (flatArray: any, byteArray) => {\n          return flatArray.concat(\n            new UInt16BE(byteArray.length),\n            new UInt8Array(byteArray)\n          )\n        },\n        [new UInt8(sizeMask | array.length)]\n      )\n      this.byteLength = this.value.reduce(\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n        (total, element) => total + element.byteLength,\n        0\n      )\n    }\n\n    copy: BufferMutation = (buffer, offset) => {\n      let i = 0\n      for (const element of this.value) {\n        element.copy(buffer, offset + i)\n        i += element.byteLength\n      }\n    }\n\n    load: BufferMutation = () => {\n      /** noop */\n    }\n  }\n}\n\ninterface BoxSpec {\n  container?: string\n  mandatory?: boolean\n  quantity?: string\n  box: 'Box' | 'FullBox' | 'None'\n  is_container: boolean\n  body?: Array<[string, any, any?]>\n  config?: any\n}\n\n/**\n * Specifications for a selection of ISO BMFF box types.\n *\n * Most of these are defined in ISO/IEC 14496-12,\n * For specific boxes like avc1/avcC/mp4a/esds the exact document is specified\n * with the appropriate box/descriptor.\n *\n * To add a new box, follow the same pattern: you need an object with at least\n * the property 'box' (which is 'Box' or 'FullBox') and for non-container boxes\n * you need also a 'body' property specifying the elements that the box contains.\n * The values assigned to each element in the spec are used as default.\n */\n\nconst BOXSPEC: { [key: string]: BoxSpec } = {\n  // File Type Box\n  ftyp: {\n    container: 'file',\n    mandatory: true,\n    quantity: 'one',\n    box: 'Box',\n    is_container: true,\n    body: [\n      ['major_brand', CharArray, 'isom'],\n      ['minor_version', UInt32BE, 0],\n      ['compatible_brands', CharArray, 'mp41'],\n      // ['compatible_brands1', CharArray, 'iso2'],\n      // ['compatible_brands2', CharArray, 'dash'],\n    ],\n  },\n  // Movie Container\n  moov: {\n    container: 'file',\n    mandatory: true,\n    quantity: 'one',\n    box: 'Box',\n    is_container: true,\n  },\n  // Movie Data Box\n  mdat: {\n    container: 'file',\n    mandatory: false,\n    quantity: 'any',\n    box: 'Box',\n    is_container: false,\n    body: [],\n  },\n  // Movie Header Box\n  mvhd: {\n    container: 'moov',\n    mandatory: true,\n    quantity: 'one',\n    box: 'FullBox',\n    is_container: false,\n    body: [\n      ['creation_time', UInt32BE, 0],\n      ['modification_time', UInt32BE, 0],\n      ['timescale', UInt32BE, 1000], // time-scale for entire presentation, default = milliseconds\n      ['duration', UInt32BE, 0xffffffff], // length of entire presentation, default = undetermined\n      ['rate', UInt32BE, 0x00010000], // fixed point 16.16, preferred playback rate, default = 1.0\n      ['volume', UInt16BE, 0x0100], // fixed point 8.8, preferred playback volume, default = 1.0\n      ['reserved', Empty, 10],\n      // transformation matrix, default = unity\n      [\n        'matrix',\n        UInt32BEArray,\n        [0x00010000, 0, 0, 0, 0x00010000, 0, 0, 0, 0x40000000],\n      ],\n      ['pre_defined', Empty, 24],\n      ['next_track_ID', UInt32BE, 0xffffffff], // next unused track ID, default = unknown\n    ],\n  },\n  // Track Container\n  trak: {\n    container: 'moov',\n    mandatory: true,\n    quantity: 'one+',\n    box: 'Box',\n    is_container: true,\n  },\n  // Track Header Box\n  tkhd: {\n    container: 'trak',\n    mandatory: true,\n    quantity: 'one',\n    box: 'FullBox',\n    is_container: false,\n    // Flag values for the track header:\n    // 0x000001 Track_enabled: track enabled (otherwise ignored)\n    // 0x000002 Track_in_movie: track used in presentation\n    // 0x000004 Track_in_preview: used when previewing presentation\n    config: {\n      flags: 0x000003, // track enabled and used in presentation\n    },\n    body: [\n      ['creation_time', UInt32BE, 0],\n      ['modification_time', UInt32BE, 0],\n      ['track_ID', UInt32BE, 1], // Track identifier, cannot be 0\n      ['reserved', Empty, 4],\n      ['duration', UInt32BE, 0], // Duration of track using timescale of mvhd box\n      ['reserved2', Empty, 8],\n      ['layer', UInt16BE, 0], // Front-to-back ordering, lower is closer to viewer\n      ['alternate_group', UInt16BE, 0], // Possible grouping of tracks\n      ['volume', UInt16BE, 0x0100], // Track's relative audio volume 8.8 fixed point\n      ['reserved3', Empty, 2],\n      [\n        'matrix',\n        UInt32BEArray,\n        [0x00010000, 0, 0, 0, 0x00010000, 0, 0, 0, 0x40000000],\n      ],\n      ['width', UInt32BE, 0], // Visual presentation width, 16.16 fixed point\n      ['height', UInt32BE, 0], // Visual presentation height, 16.16 fixed point\n    ],\n  },\n  // Track Reference Box\n  tref: {\n    container: 'trak',\n    mandatory: false,\n    quantity: 'one-',\n    box: 'Box',\n    is_container: false,\n  },\n  // Media Container\n  mdia: {\n    container: 'trak',\n    mandatory: false,\n    quantity: 'one',\n    box: 'Box',\n    is_container: true,\n  },\n  // Media Header Box\n  mdhd: {\n    container: 'mdia',\n    mandatory: false,\n    quantity: 'one',\n    box: 'FullBox',\n    is_container: false,\n    body: [\n      ['creation_time', UInt32BE, 0],\n      ['modification_time', UInt32BE, 0],\n      ['timescale', UInt32BE, 1000], // time-scale for entire presentation, default = milliseconds\n      ['duration', UInt32BE, 0xffffffff], // length of entire presentation, default = undetermined\n      ['language', UInt16BE, 0], // ISO 639-2 lanugage code, three lower-case letters, stored as\n      ['pre_defined', UInt16BE, 0],\n    ],\n  },\n  // Handler Reference Box\n  hdlr: {\n    container: 'mdia',\n    mandatory: true,\n    quantity: 'one',\n    box: 'FullBox',\n    is_container: false,\n    body: [\n      ['predefined', UInt32BE, 0],\n      ['handler_type', CharArray, 'vide'], // 'vide', 'soun', or 'hint'\n      ['reserved', Empty, 12],\n      ['name', CharArray, 'VideoHandler\\0'],\n    ],\n  },\n  // Media Information Container\n  minf: {\n    container: 'mdia',\n    mandatory: true,\n    quantity: 'one',\n    box: 'Box',\n    is_container: true,\n  },\n  // Video Media Header Box\n  vmhd: {\n    container: 'minf',\n    mandatory: true,\n    quantity: 'one',\n    box: 'FullBox',\n    is_container: false,\n    config: {\n      flags: 0x000001,\n    },\n    body: [\n      ['graphicsmode', UInt16BE, 0], // Composition mode of the video track, 0 = overwrite\n      ['opcolor', UInt16BEArray, [0, 0, 0]], // Red green blue, for use by graphics modes\n    ],\n  },\n  // Sound Media Header Box\n  smhd: {\n    container: 'minf',\n    mandatory: true,\n    quantity: 'one',\n    box: 'FullBox',\n    is_container: false,\n    body: [\n      // Place mono track in stereo space:\n      //  8.8 fixed point, 0 = center, -1.0 = left, 1.0 = right\n      ['balance', UInt16BE, 0x0000],\n      ['reserved', UInt16BE],\n    ],\n  },\n  // Data Information Container\n  dinf: {\n    container: 'minf',\n    mandatory: true,\n    quantity: 'one',\n    box: 'Box',\n    is_container: true,\n  },\n  // Data Reference Box\n  dref: {\n    // When adding elements to this box, update the entry_count value!\n    container: 'dinf',\n    mandatory: true,\n    quantity: 'one',\n    box: 'FullBox',\n    is_container: true,\n    body: [\n      ['entry_count', UInt32BE, 0], // Number of entries.\n    ],\n  },\n  'url ': {\n    container: 'dref',\n    mandatory: true,\n    quantity: 'one+',\n    box: 'FullBox',\n    is_container: false,\n    // Flag values:\n    // 0x000001 Local reference, which means empty URL\n    config: {\n      flags: 0x000001,\n    },\n    body: [\n      // ['location', CharArray, ''],\n    ],\n  },\n  // Sample Table Container\n  stbl: {\n    container: 'minf',\n    mandatory: true,\n    quantity: 'one',\n    box: 'Box',\n    is_container: true,\n  },\n  // Decoding Time to Sample Box\n  stts: {\n    container: 'stbl',\n    mandatory: true,\n    quantity: 'one',\n    box: 'FullBox',\n    is_container: false,\n    body: [\n      ['entry_count', UInt32BE, 0],\n      // For each entry these two elements:\n      // ['sample_count', UInt32BE, 0], // Number of consecutive samples with same delta\n      // ['sample_delta', UInt32BE, 0], // Delta of each sample\n    ],\n  },\n  stsd: {\n    container: 'stbl',\n    mandatory: true,\n    quantity: 'one',\n    box: 'FullBox',\n    is_container: true,\n    body: [\n      ['entry_count', UInt32BE, 1],\n      // For each entry, one of these three boxes depending on the handler:\n      // VisualSampleEntry, AudioSampleEntry, HintSampleEntry\n    ],\n  },\n  /*\n  ISO/IEC 14496-12:2005(E) 8.16.2 (pp. 28)\n  aligned(8) abstract class SampleEntry (unsigned int(32) format)\n    extends Box(format){\n    const unsigned int(8)[6] reserved = 0;\n    unsigned int(16) data_reference_index;\n  }\n  class VisualSampleEntry(codingname) extends SampleEntry (codingname){\n    unsigned int(16) pre_defined = 0;\n    const unsigned int(16) reserved = 0;\n    unsigned int(32)[3] pre_defined = 0;\n    unsigned int(16) width;\n    unsigned int(16) height;\n    template unsigned int(32) horizresolution = 0x00480000; // 72 dpi\n    template unsigned int(32) vertresolution = 0x00480000; // 72 dpi\n    const unsigned int(32) reserved = 0;\n    template unsigned int(16) frame_count = 1;\n    string[32] compressorname;\n    template unsigned int(16) depth = 0x0018;\n    int(16) pre_defined = -1;\n  }\n  ISO/IEC 14496-15:2004(E) 5.3.4.1 (pp. 14)\n  class AVCSampleEntry() extends VisualSampleEntry (\u2018avc1\u2019){\n    AVCConfigurationBox config;\n    MPEG4BitRateBox (); // optional\n    MPEG4ExtensionDescriptorsBox (); // optional\n  }\n  */\n  avc1: {\n    container: 'stsd',\n    mandatory: false,\n    quantity: 'one',\n    box: 'Box',\n    is_container: true,\n    body: [\n      ['reserved', Empty, 6],\n      ['data_reference_index', UInt16BE, 1],\n      ['pre_defined', UInt16BE, 0],\n      ['reserved2', Empty, 2],\n      ['pre_defined2', UInt32BEArray, [0, 0, 0]],\n      ['width', UInt16BE, 1920],\n      ['height', UInt16BE, 1080],\n      ['horizresolution', UInt32BE, 0x00480000],\n      ['vertresolution', UInt32BE, 0x00480000],\n      ['reserved3', UInt32BE, 0],\n      ['frame_count', UInt16BE, 1],\n      ['compressorname', UInt8Array, Buffer.alloc(32)],\n      ['depth', UInt16BE, 0x0018],\n      ['pre_defined3', UInt16BE, 0xffff],\n    ],\n  },\n  /*\n  class AVCConfigurationBox extends Box(\u2018avcC\u2019) {\n    AVCDecoderConfigurationRecord() AVCConfig;\n  }\n  ISO/IEC 14496-15:2004(E) 5.2.4.1.1 (pp. 12)\n  aligned(8) class AVCDecoderConfigurationRecord {\n    unsigned int(8) configurationVersion = 1;\n    unsigned int(8) AVCProfileIndication;\n    unsigned int(8) profile_compatibility;\n    unsigned int(8) AVCLevelIndication;\n    bit(6) reserved = \u2018111111\u2019b;\n    unsigned int(2) lengthSizeMinusOne;\n    bit(3) reserved = \u2018111\u2019b;\n    unsigned int(5) numOfSequenceParameterSets;\n    for (i=0; i< numOfSequenceParameterSets; i++) {\n      unsigned int(16) sequenceParameterSetLength ;\n      bit(8*sequenceParameterSetLength) sequenceParameterSetNALUnit;\n    }\n    unsigned int(8) numOfPictureParameterSets;\n    for (i=0; i< numOfPictureParameterSets; i++) {\n      unsigned int(16) pictureParameterSetLength;\n      bit(8*pictureParameterSetLength) pictureParameterSetNALUnit;\n    }\n  }\n  */\n  avcC: {\n    container: 'avc1',\n    mandatory: false,\n    quantity: 'one',\n    box: 'Box',\n    is_container: false,\n    body: [\n      ['configurationVersion', UInt8, 1],\n      ['AVCProfileIndication', UInt8, 0x4d],\n      ['profile_compatibility', UInt8, 0x00],\n      ['AVCLevelIndication', UInt8, 0x29],\n      // size = reserved 0b111111 + 0b11 NALUnitLength (0b11 = 4-byte)\n      ['lengthSizeMinusOne', UInt8, 0b11111111],\n      // Example SPS (length 20):\n      //   [0x67, 0x4d, 0x00, 0x29, 0xe2, 0x90, 0x0f, 0x00,\n      //    0x44, 0xfc, 0xb8, 0x0b, 0x70, 0x10, 0x10, 0x1a,\n      //    0x41, 0xe2, 0x44, 0x54]\n      // number of sets = reserved 0b111 + number of SPS (0b00001 = 1)\n      // ['numOfSequenceParameterSets', UInt8, 0b11100001],\n      // ['sequenceParameterSetLength', UInt16BE, 0], // Lenght in bytes of the SPS that follows\n      // ['sequenceParameterSetNALUnit', UInt8Array, []],\n      // These are packed in a single custom element:\n      ['sequenceParameterSets', createParameterSetArrayClass(0xe0), []],\n      // Example PPS (length 4):\n      //   [0x68, 0xee, 0x3c, 0x80]\n      // ['numOfPictureParameterSets', UInt8, 1], // number of PPS\n      // ['pictureParameterSetLength', UInt16BE, 0], // Length in bytes of the PPS that follows\n      // ['pictureParameterSetNALUnit', UInt8Array, []]\n      // These are packed in a single custom element:\n      ['pictureParameterSets', createParameterSetArrayClass(), []],\n    ],\n  },\n  /*\n  ISO/IEC 14496-12:2005(E) 8.16.2 (pp. 28)\n  aligned(8) abstract class SampleEntry (unsigned int(32) format)\n    extends Box(format){\n    const unsigned int(8)[6] reserved = 0;\n    unsigned int(16) data_reference_index;\n  }\n  class AudioSampleEntry(codingname) extends SampleEntry (codingname){\n    const unsigned int(32)[2] reserved = 0;\n    template unsigned int(16) channelcount = 2;\n    template unsigned int(16) samplesize = 16;\n    unsigned int(16) pre_defined = 0;\n    const unsigned int(16) reserved = 0 ;\n    template unsigned int(32) samplerate = {timescale of media}<<16;\n  }\n  */\n  mp4a: {\n    container: 'stsd',\n    mandatory: false,\n    quantity: 'one',\n    box: 'Box',\n    is_container: true,\n    body: [\n      ['reserved', Empty, 6],\n      ['data_reference_index', UInt16BE, 1],\n      ['reserved2', UInt32BEArray, [0, 0]],\n      ['channelcount', UInt16BE, 2],\n      ['samplesize', UInt16BE, 16],\n      ['pre_defined', UInt16BE, 0],\n      ['reserved3', UInt16BE, 0],\n      ['samplerate', UInt32BE, 0], // 16.16 bit floating point\n    ],\n  },\n  /* Elementary stream descriptor\n  basic box that holds only an ESDescriptor\n  reference: 'https://developer.apple.com/library/content/documentation/QuickTime/\nQTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-124774'\n  Descriptors have a tag that identifies them, specified in ISO/IEC 14496-1 8.3.12\n  ISO/IEC 14496-1 8.3.3 (pp. 24) ES_Descriptor\n  aligned(8) class ES_Descriptor : bit(8) tag=ES_DescrTag {\n    bit(8) length;\n    bit(16) ES_ID;\n    bit(1) streamDependenceFlag;\n    bit(1) URL_Flag;\n    const bit(1) reserved=1;\n    bit(5) streamPriority;\n    if (streamDependenceFlag)\n      bit(16) dependsOn_ES_ID;\n    if (URL_Flag)\n      bit(8) URLstring[length-3-(streamDependencFlag*2)];\n    ExtensionDescriptor extDescr[0 .. 255];\n    LanguageDescriptor langDescr[0 .. 1];\n    DecoderConfigDescriptor decConfigDescr;\n    SLConfigDescriptor slConfigDescr;\n    IPI_DescPointer ipiPtr[0 .. 1];\n    IP_IdentificationDataSet ipIDS[0 .. 1];\n    QoS_Descriptor qosDescr[0 .. 1];\n  }\n  aligned(8) class DecoderConfigDescriptor\n    : bit(8) tag=DecoderConfigDescrTag {\n    bit(8) length;\n    bit(8) objectProfileIndication;\n    bit(6) streamType;\n    bit(1) upStream;\n    const bit(1) reserved=1;\n    bit(24) bufferSizeDB;\n    bit(32) maxBitrate;\n    bit(32) avgBitrate;\n    DecoderSpecificInfo decSpecificInfo[];\n  }\n  aligned(8) class DecoderSpecificInfoShort extends DecoderSpecificInfo\n  : bit(8) tag=DecSpecificInfoShortTag\n  {\n    bit(8) length;\n    bit(8) specificInfo[length];\n  }\n  aligned(8) class SLConfigDescriptor : bit(8) tag=SLConfigDescrTag {\n    bit(8) length;\n    bit(8) predefined;\n    if (predefined==0) {\n      bit(1) useAccessUnitStartFlag;\n      bit(1) useAccessUnitEndFlag;\n      bit(1) useRandomAccessPointFlag;\n      bit(1) usePaddingFlag;\n      bit(1) useTimeStampsFlag;\n      bit(1) useWallClockTimeStampFlag;\n      bit(1) useIdleFlag;\n      bit(1) durationFlag;\n      bit(32) timeStampResolution;\n      bit(32) OCRResolution;\n      bit(8) timeStampLength; // must be less than 64\n      bit(8) OCRLength;\n      // must be less than 64\n      bit(8) AU_Length;\n      // must be less than 32\n      bit(8) instantBitrateLength;\n      bit(4) degradationPriorityLength;\n      bit(4) seqNumLength;\n      if (durationFlag) {\n        bit(32) timeScale;\n        bit(16) accessUnitDuration;\n        bit(16) compositionUnitDuration;\n      }\n      if (!useTimeStampsFlag) {\n        if (useWallClockTimeStampFlag)\n          double(64) wallClockTimeStamp;\n        bit(timeStampLength) startDecodingTimeStamp;\n        bit(timeStampLength) startCompositionTimeStamp;\n      }\n    }\n    aligned(8) bit(1) OCRstreamFlag;\n    const bit(7) reserved=0b1111.111;\n    if (OCRstreamFlag)\n      bit(16) OCR_ES_Id;\n  }\n  */\n  esds: {\n    container: 'mp4a',\n    mandatory: false,\n    quantity: 'one',\n    box: 'FullBox',\n    is_container: false,\n    body: [\n      ['ES_DescrTag', UInt8, 3],\n      // length of the remainder of this descriptor in byte,\n      // excluding trailing embedded descriptors.\n      ['ES_DescrLength', UInt8, 25],\n      ['ES_ID', UInt16BE, 1],\n      ['flagsAndStreamPriority', UInt8, 0],\n      ['DecoderConfigDescrTag', UInt8, 4],\n      // length of the remainder of this descriptor in bytes,\n      // excluding trailing embedded descriptors.\n      ['DecoderConfigDescrLength', UInt8, 17],\n      ['objectProfileIndication', UInt8, 0x40],\n      ['streamTypeUpstreamReserved', UInt8, 0x15],\n      ['bufferSizeDB', UInt8Array, [0, 0, 0]],\n      ['maxBitRate', UInt32BE, 0],\n      ['avgBitRate', UInt32BE, 0],\n      ['DecSpecificInfoShortTag', UInt8, 5],\n      ['DecSpecificInfoShortLength', UInt8, 2],\n      ['audioConfigBytes', UInt16BE, 0],\n      ['SLConfigDescrTag', UInt8, 6],\n      ['SLConfigDescrLength', UInt8, 1],\n      ['SLConfigDescrPredefined', UInt8, 0x02], // ISO use\n    ],\n  },\n  // Sample Size Box\n  stsz: {\n    container: 'stbl',\n    mandatory: true,\n    quantity: 'one',\n    box: 'FullBox',\n    is_container: false,\n    body: [\n      ['sample_size', UInt32BE, 0],\n      ['sample_count', UInt32BE, 0],\n      // For each sample up to sample_count, append an entry_size:\n      // ['entry_size', UInt32BE, ],\n    ],\n  },\n  // Sample To Chunk Box\n  stsc: {\n    container: 'stbl',\n    mandatory: true,\n    quantity: 'one',\n    box: 'FullBox',\n    is_container: false,\n    body: [\n      ['entry_count', UInt32BE, 0],\n      // For each entry up to entry_count, append these elements:\n      // ['first_chunk', UInt32BE, ],\n      // ['samples_per_chunk', UInt32BE, ],\n      // ['samples_description_index', UInt32BE, ],\n    ],\n  },\n  // Chunk Offset Box\n  stco: {\n    container: 'stbl',\n    mandatory: true,\n    quantity: 'one',\n    box: 'FullBox',\n    is_container: false,\n    body: [\n      ['entry_count', UInt32BE, 0],\n      // For each entry up to entry_count, append an element:\n      // ['chunk_offset', UInt32BE, ],\n    ],\n  },\n  // Sync Sample Box\n  stss: {\n    container: 'stbl',\n    mandatory: false,\n    quantity: 'one-',\n    box: 'FullBox',\n    is_container: false,\n    body: [\n      ['entry_count', UInt32BE, 0],\n      // For each entry up to entry_count, append an element:\n      // ['sample_number', UInt32BE, ],\n    ],\n  },\n  // Edit Box\n  edts: {\n    container: 'trak',\n    mandatory: false,\n    quantity: 'one-',\n    box: 'Box',\n    is_container: true,\n  },\n  // Edit List Box\n  elst: {\n    container: 'edts',\n    mandatory: false,\n    quantity: 'one-',\n    box: 'FullBox',\n    is_container: false,\n    body: [\n      ['entry_count', UInt32BE, 1],\n      ['segment_duration', UInt32BE, 0],\n      ['media_time', UInt32BE, 0xffffffff],\n      ['media_rate_integer', UInt16BE, 1],\n      ['media_rate_fraction', UInt16BE, 0],\n    ],\n  },\n  mvex: {\n    container: 'moov',\n    mandatory: false,\n    quantity: 'one-',\n    box: 'Box',\n    is_container: true,\n  },\n  mehd: {\n    container: 'mvex',\n    mandatory: false,\n    quantity: 'one-',\n    box: 'FullBox',\n    is_container: false,\n    body: [\n      ['fragment_duration', UInt32BE, 0], // Total duration of movie\n    ],\n  },\n  trex: {\n    container: 'mvex',\n    mandatory: true,\n    quantity: 'one+',\n    box: 'FullBox',\n    is_container: false,\n    body: [\n      ['track_ID', UInt32BE, 1], // The track to which this data is applicable\n      ['default_sample_description_index', UInt32BE, 1],\n      ['default_sample_duration', UInt32BE, 0],\n      ['default_sample_size', UInt32BE, 0],\n      ['default_sample_flags', UInt32BE, 0],\n    ],\n  },\n  moof: {\n    container: 'file',\n    mandatory: false,\n    quantity: 'zero+',\n    box: 'Box',\n    is_container: false,\n  },\n  mfhd: {\n    container: 'moof',\n    mandatory: true,\n    quantity: 'one',\n    box: 'FullBox',\n    is_container: false,\n    body: [\n      ['sequence_number', UInt32BE, 0], // A number associated with this fragment\n    ],\n  },\n  traf: {\n    container: 'moof',\n    mandatory: false,\n    quantity: 'zero+',\n    box: 'Box',\n    is_container: true,\n  },\n  tfhd: {\n    container: 'traf',\n    mandatory: true,\n    quantity: 'one',\n    box: 'FullBox',\n    is_container: false,\n    // Flag values for the track fragment header:\n    // 0x000001 base-data-offset-present\n    // 0x000002 sample-description-index-present\n    // 0x000008 default-sample-duration-present\n    // 0x000010 default-sample-size-present\n    // 0x000020 default-sample-flags-present\n    // 0x010000 duration-is-empty\n    // 0x020000 default-base-is-moof\n    config: {\n      flags: 0x000020, // default sample flags present\n    },\n    body: [\n      ['track_ID', UInt32BE, 1], // The track to which this data is applicable\n      // ['base_data_offset', UInt64BE, 0],\n      // ['default_sample_description_index', UInt32BE, 0],\n      // ['default_sample_duration', UInt32BE, 0],\n      // ['default_sample_size', UInt32BE, 0],\n      ['default_sample_flags', UInt32BE, 0],\n    ],\n  },\n  tfdt: {\n    container: 'traf',\n    mandatory: false,\n    quantity: 'one-',\n    box: 'FullBox',\n    is_container: false,\n    config: {\n      version: 1, // Version 1 uses 64-bit value for baseMediaDecodeTime\n    },\n    body: [['baseMediaDecodeTime', UInt64BE, 0]],\n  },\n  trun: {\n    container: 'traf',\n    mandatory: false,\n    quantity: 'zero+',\n    box: 'FullBox',\n    is_container: false,\n    // Flag values for the track fragment header:\n    // 0x000001 data-offset-present\n    // 0x000004 first-sample-flags-present\n    // 0x000100 sample-duration-present\n    // 0x000200 sample-size-present\n    // 0x000400 sample-flags-present\n    // 0x000800 sample-composition-time-offsets-present\n    config: {\n      flags: 0x000305, // default sample flags present\n    },\n    body: [\n      ['sample_count', UInt32BE, 1], // How many samples there are\n      ['data_offset', UInt32BE, 0],\n      ['first_sample_flags', UInt32BE, 0],\n      ['sample_duration', UInt32BE, 0],\n      ['sample_size', UInt32BE, 0],\n      // ['sample_flags', UInt32BE, 0],\n      // ['sample_composition_time_offset', UInt32BE, 0],\n    ],\n  },\n  // Unknown Box, used for parsing\n  '....': {\n    box: 'Box',\n    is_container: false,\n    body: [],\n  },\n  // File Box, special box without any headers\n  file: {\n    box: 'None',\n    is_container: true,\n    mandatory: true,\n    quantity: 'one',\n  },\n}\n\n/**\n * Helper functions to generate some standard elements that are needed by\n * all types of boxes.\n * All boxes have a length and type, where so-called full boxes have an\n * additional 4-bytes (1-byte version and 3-byte flags fields).\n */\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nclass Header {\n  static None() {\n    return []\n  }\n\n  static Box(type: string) {\n    return [\n      ['size', UInt32BE, 0],\n      ['type', CharArray, type],\n    ]\n  }\n\n  static FullBox(type: string) {\n    return ([] as any).concat(this.Box(type), [\n      ['version', UInt8, 0x00],\n      ['flags', UInt24BE, 0x000000],\n    ])\n  }\n}\n\n/**\n * Box class.\n *\n * Defines a box as an entity similar to a C struct, where the struct is\n * represented by a Map of elements.\n * Each element is an object with at least:\n *  - a 'byteLength' property (size of element in bytes)\n *  - a 'copy' method (BufferMutation signature)\n */\nexport class Box extends BoxElement {\n  public type: string\n  public config: { [key: string]: any }\n  public struct: Map<\n    string,\n    {\n      offset: number\n      element: {\n        value?: any\n        byteLength: number\n        copy: BufferMutation\n        load?: BufferMutation\n        format?: (indent?: number) => string\n      }\n    }\n  >\n\n  /**\n   * Create a new Box.\n   * @param  type   4-character ASCII string\n   * @param  config Configuration holding (key: value) fields\n   */\n  constructor(type: string, config?: { [key: string]: any }) {\n    super(0)\n    this.type = type\n    const spec = BOXSPEC[this.type]\n    if (spec === undefined) {\n      throw new Error(`unknown box type: ${type}`)\n    }\n    this.config = Object.assign({}, spec.config, config)\n    const header = Header[spec.box](this.type)\n    const body = spec.body || []\n    // Uglify changes the name of the original class, so this doesn't work.\n    // TODO: find a better way to check for this.\n    // if (spec.body === undefined && this.constructor.name !== 'Container') {\n    //   throw new Error(`Body missing but '${type}' is not a container box`);\n    // }\n\n    // Initialize all elements, an element is something with a byteLength\n    this.struct = new Map()\n    let offset = 0\n    for (const [key, Type, defaultValue] of ([] as any).concat(header, body)) {\n      if (this.has(key)) {\n        throw new Error('Trying to add existing key')\n      }\n      let value = defaultValue\n      if (this.config[key]) {\n        value = this.config[key]\n      }\n      const element = new Type(value)\n      this.struct.set(key, { offset, element })\n      offset += element.byteLength\n    }\n\n    this.byteLength = offset\n  }\n\n  /**\n   * Get access to an element based on it's name.\n   * @param  key The element's name\n   * @return Object with 'byteLength' property and 'copy' method\n   */\n  element(key: string) {\n    const value = this.struct.get(key)\n    if (value === undefined) {\n      throw new Error('invalid key')\n    }\n    return value.element\n  }\n\n  /**\n   * Set an element's value.\n   * @param  key The element's name\n   * @param  value The element's (new) value\n   */\n  set(key: string, value: any) {\n    this.element(key).value = value\n  }\n\n  /**\n   * Get an element's value.\n   * @param  key The element's name\n   * @return The element's value\n   */\n  get(key: string) {\n    return this.element(key).value\n  }\n\n  /**\n   * Get an element's offset.\n   * @param  key The element's name\n   * @return The element's offset\n   */\n  offset(key: string) {\n    const value = this.struct.get(key)\n    if (value === undefined) {\n      throw new Error('invalid key')\n    }\n    return value.offset\n  }\n\n  /**\n   * Check if a certain element exists\n   * @param  key The element's name\n   * @return true if the element is known, false if not\n   */\n  has(key: string) {\n    return this.struct.has(key)\n  }\n\n  /**\n   * Add a new element to the box.\n   * @param key     A _new_ non-existing element name.\n   * @param element Something with a 'byteLength' property and 'copy' method.\n   * @return this box, so that 'add' can be used in a chain\n   */\n  add(key: string, element: BoxElement | Buffer) {\n    if (this.has(key)) {\n      throw new Error('Trying to add existing key')\n    }\n    this.struct.set(key, { offset: this.byteLength, element })\n    this.byteLength += element.byteLength\n    return this\n  }\n\n  /**\n   * Create a buffer and copy all element values to it.\n   * @return Data representing the box.\n   */\n  buffer() {\n    const buffer = Buffer.allocUnsafe(this.byteLength)\n    this.copy(buffer)\n    return buffer\n  }\n\n  /**\n   * Copy all values of the box into an existing buffer.\n   * @param  buffer     The target buffer to accept the box data\n   * @param  [offset=0] The number of bytes into the target to start at.\n   */\n  copy(buffer: Buffer, offset = 0) {\n    // Before writing, make sure the size property is set correctly.\n    this.set('size', this.byteLength)\n    for (const entry of this.struct.values()) {\n      entry.element.copy(buffer, offset + entry.offset)\n    }\n  }\n\n  /**\n   * Read element values from a box's data representation.\n   * @param  buffer     The source buffer with box data\n   * @param  [offset=0] The number of bytes into the source to start at.\n   */\n  load(buffer: Buffer, offset = 0) {\n    for (const entry of this.struct.values()) {\n      if (entry.element.load !== undefined) {\n        entry.element.load(buffer, offset + entry.offset)\n      }\n    }\n  }\n\n  /**\n   * Pretty-format an entire box as an element/box hierarchy.\n   * @param  [indent=0] How large an indentation to use for the hierarchy\n   */\n  format(indent = 0) {\n    const lines = [`${' '.repeat(indent)}[${this.type}] (${this.byteLength})`]\n    for (const [key, entry] of this.struct) {\n      const element = entry.element\n      if (element.format !== undefined) {\n        lines.push(element.format(indent + 2))\n      } else {\n        lines.push(\n          `${\n            ' '.repeat(indent + 2)\n          }${key} = ${element.value} (${element.byteLength})`\n        )\n      }\n    }\n    return lines.join('\\n')\n  }\n\n  /**\n   * Pretty-print an entire box as an element/box hierarchy.\n   * @param  [indent=0] How large an indentation to use for the hierarchy\n   */\n  print(indent: number) {\n    console.warn(this.format(indent))\n  }\n}\n\n/**\n * Container class\n *\n * special box with an 'add' method which allows appending of other boxes,\n * and a 'parse' method to extract contained boxes.\n */\nexport class Container extends Box {\n  public boxSize: number\n  /**\n   * Create a new container box\n   * @param  type   4-character ASCII string\n   * @param  config Configuration holding (key: value) fields\n   * @param  boxes  One or more boxes to append.\n   */\n  constructor(type: string, config?: { [key: string]: any }, ...boxes: Box[]) {\n    super(type, config)\n    this.boxSize = 0\n    this.append(...boxes)\n  }\n\n  /**\n   * Add one or more boxes to the container.\n   * @param boxes The box(es) to append\n   * @return this container, so that add can be used in a chain\n   */\n  append(...boxes: Box[]) {\n    for (const box of boxes) {\n      this.add(`box_${this.boxSize++}`, box)\n    }\n    return this\n  }\n\n  /**\n   * Parse a container box by looking for boxes that it contains, and\n   * recursively proceed when it is another container.\n   *\n   * FIXME: this cannot properly handle different versions of the FullBox,\n   * currenlty the loader is hardcoded to the version used in this file.\n   * Also, appearance of an esds box is assumed to be AAC audio information,\n   * while the avcC box signals H.264 video information.\n   *\n   * @param  data The data to parse.\n   */\n  parse(data: Buffer) {\n    const tracks: MediaTrack[] = []\n    while (data.byteLength > 0) {\n      const type = new CharArray('....')\n      type.load(data, 4)\n      const boxType = type.value\n      const spec = BOXSPEC[boxType]\n      let box\n      if (spec !== undefined) {\n        if (spec.is_container) {\n          box = new Container(boxType)\n          box.load(data)\n          const boxTracks = box.parse(\n            data.slice(box.byteLength, box.get('size'))\n          )\n          tracks.push(...boxTracks)\n        } else {\n          box = new Box(boxType)\n          box.load(data)\n          // Handle 2 kinds of tracks with streaming MP4: video or audio\n          if (boxType === 'avcC') {\n            const profile = box\n              .element('AVCProfileIndication')\n              .value.toString(16)\n              .padStart(2, 0)\n            const compat = box\n              .element('profile_compatibility')\n              .value.toString(16)\n              .padStart(2, 0)\n            const level = box\n              .element('AVCLevelIndication')\n              .value.toString(16)\n              .padStart(2, 0)\n            tracks.push({\n              type: 'video',\n              mime: `avc1.${profile}${compat}${level}`,\n            })\n          } else if (boxType === 'esds') {\n            const audioConfigBytes = box.element('audioConfigBytes').value\n            const objectTypeIndication = (audioConfigBytes >>> 11) & 0x001f\n            tracks.push({\n              type: 'audio',\n              mime: `mp4a.40.${objectTypeIndication}`,\n            })\n          }\n        }\n      } else {\n        box = new Box('....')\n        box.load(data)\n        box.type = box.get('type')\n      }\n      this.append(box)\n      data = data.slice(box.get('size'))\n    }\n    return tracks\n  }\n}\n", "import { AACMedia } from '../../../utils/protocols/sdp'\n\nimport { Box, Container } from './isom'\n\n// All audio object types defined in ISO/IEC 14496-3 pp. 40\nconst AUDIO_OBJECT_TYPE_NAMES: { [key: number]: string } = {\n  1: 'AAC Main',\n  2: 'AAC LC',\n}\n\n// All frequencies defined in ISO/IEC 14496-3 pp. 42\nconst FREQUENCY_VALUES: { [key: number]: string } = {\n  0: '96 kHz',\n  1: '88.2 kHz',\n  2: '64 kHz',\n  3: '48 kHz',\n  4: '44.1 kHz',\n  5: '32 kHz',\n  6: '24 kHz',\n  7: '22.05 kHz',\n  8: '16 kHz',\n  9: '12 kHz',\n  10: '11.025 kHz',\n  11: '8 kHz',\n  12: '7.35 kHz',\n}\n\n// All channels defined in ISO/IEC 14496-3 pp. 42\nconst CHANNEL_CONFIG_NAMES: { [key: number]: string } = {\n  1: 'Mono',\n  2: 'Stereo',\n}\n\nexport interface AACEncoding {\n  coding: string\n  samplingRate: string\n  channels: string\n}\n\nconst aacEncodingName = (audioConfigBytes: number): AACEncoding => {\n  const audioObjectType = (audioConfigBytes >>> 11) & 0x001f\n  const frequencyIndex = (audioConfigBytes >>> 7) & 0x000f\n  const channelConfig = (audioConfigBytes >>> 3) & 0x000f\n\n  const audioType = AUDIO_OBJECT_TYPE_NAMES[audioObjectType]\n    || `AAC (${audioObjectType})`\n  const samplingRate = FREQUENCY_VALUES[frequencyIndex] || 'unknown'\n  const channels = CHANNEL_CONFIG_NAMES[channelConfig]\n    || channelConfig.toString()\n\n  return {\n    coding: audioType,\n    samplingRate,\n    channels,\n  }\n}\n\nexport const aacSettings = (media: AACMedia, date: number, trackId: number) => {\n  /*\n   * Example SDP media segment for MPEG4-GENERIC audio:\n   *\n\n  {\n     \"type\": \"audio\",\n     \"port\": \"0\",\n     \"proto\": \"RTP/AVP\",\n     \"fmt\": \"97\",\n     \"connectionData\": {\n       \"netType\": \"IN\",\n       \"addrType\": \"IP4\",\n       \"connectionAddress\": \"0.0.0.0\"\n     },\n     \"bwtype\": \"AS\",\n     \"bandwidth\": \"32\",\n     \"rtpmap\": {\n       \"payloadType\": \"97\",\n       \"encodingName\": \"MPEG4-GENERIC\",\n       \"clockrate\": \"16000\",\n       \"encodingParameters\": \"1\"\n     },\n     \"fmtp\": {\n       \"format\": \"97\",\n       \"parameters\": {\n         \"streamtype\": \"5\",\n         \"profile-level-id\": \"2\",\n         \"mode\": \"AAC-hbr\",\n         \"config\": \"1408\",\n         \"sizelength\": \"13\",\n         \"indexlength\": \"3\",\n         \"indexdeltalength\": \"3\",\n         \"bitrate\": \"32000\"\n       }\n     },\n     \"control\": \"rtsp://hostname/axis-media/media.amp/stream=1?audio=1\"\n   }\n\n   */\n\n  const bitrate = Number(media.fmtp.parameters.bitrate) || 320000\n  const audioConfigBytes = parseInt(media.fmtp.parameters.config, 16)\n  const audioObjectType = (audioConfigBytes >>> 11) & 0x001f\n\n  return {\n    tkhd: {\n      track_ID: trackId,\n      creation_time: date,\n      modification_time: date,\n      width: 0,\n      height: 0,\n      volume: 1,\n    },\n    mdhd: {\n      timescale: Number(media.rtpmap.clockrate),\n      creation_time: date,\n      modification_time: date,\n      duration: 0,\n    },\n\n    hdlr: {\n      handler_type: 'soun',\n      name: 'SoundHandler\\0', // 00 soundhandler, add 00 if things screws up\n    },\n\n    mediaHeaderBox: new Box('smhd'),\n    sampleEntryBox: new Container(\n      'mp4a',\n      {\n        samplerate: (media.rtpmap.clockrate << 16) >>> 0, // FIXME: Is this  correct?\n      },\n      new Box('esds', {\n        audioConfigBytes, // Converting from hex string to int\n        maxBitRate: bitrate,\n        avgBitRate: bitrate,\n      })\n    ),\n\n    /*\n    https://wiki.multimedia.cx/index.php/Understanding_AAC\n    AAC is a variable bitrate (VBR) block-based codec where each block decodes\n    to 1024 time-domain samples, which means that a single block (or frame?) is\n    1024 ticks long, which we take as default here.\n    */\n    defaultFrameDuration: 1024,\n\n    // MIME type\n    mime: `mp4a.40.${audioObjectType}`,\n    codec: aacEncodingName(audioConfigBytes),\n  }\n}\n", "/**\n * Defines functions for reading from a binary buffer. Works similair to the\n * DataView object, but uses bitshifts instead for performance.\n * @class BufferReader\n * @constructor\n * @param buffer - An ArrayBuffer to be read from.\n */\nexport class BufferReader {\n  private readonly _buffer: ArrayBuffer\n  private readonly _dataView: DataView\n  private _offset: number\n  private _bitpos: number\n  private _byte: number\n\n  constructor(buffer: Buffer) {\n    this._buffer = buffer\n    this._dataView = new DataView(this._buffer)\n    this._offset = 0\n    this._bitpos = 0\n    this._byte = 0\n  }\n\n  /**\n   * Reads 8-bit of data from the buffer.\n   * @method readUint8\n   * @param  offset - Index in the buffer.\n   * @return An unsigned 8-bit integer.\n   */\n  readUint8(offset: number) {\n    return this._dataView.getUint8(offset)\n  }\n\n  /**\n   * Reads 16-bit of data from the buffer.\n   * @method readUint16\n   * @param  offset - Index in the buffer.\n   * @return An unsigned 16-bit integer.\n   */\n  readUint16(offset: number) {\n    return this._dataView.getUint16(offset)\n  }\n\n  /**\n   * Reads 32-bit of data from the buffer.\n   * @method readUint32\n   * @param  offset - Index in the buffer.\n   * @return An unsigned 32-bit integer.\n   */\n  readUint32(offset: number) {\n    return this._dataView.getUint32(offset)\n  }\n\n  /**\n   * Reads the next byte of data from the buffer and increaments the offset.\n   * @method readNext\n   * @return {Number} An unsigned 8-bit integer.\n   */\n  readNext() {\n    const value = this.readUint8(this._offset)\n    this._offset += 1\n    return value\n  }\n\n  readBits(length: number) {\n    if (length > 32 || length === 0) {\n      throw new Error('length has to be between 0 - 31 bits')\n    }\n\n    let result = 0\n    for (let i = 1; i <= length; ++i) {\n      if (this._bitpos === 0) {\n        /* Previous byte all read out. Get a new one. */\n        this._byte = this.readNext()\n      }\n      /* Shift result one left to make room for another bit,\n      then add the next bit on the stream. */\n      result = (result << 1) | ((this._byte >> (8 - ++this._bitpos)) & 0x01)\n      this._bitpos %= 8\n    }\n\n    return result\n  }\n\n  readUnsignedExpGolomb() {\n    let bitsToRead = 0\n    while (this.readBits(1) !== 1) {\n      bitsToRead++\n    }\n\n    if (bitsToRead === 0) {\n      return 0 /* Easy peasy, just a single 1. This is 0 in exp golomb */\n    }\n\n    if (bitsToRead >= 31) {\n      throw new Error('read unsigned exponential Golomb: internal error')\n    }\n\n    /* Read all bits part of this number */\n    let n = this.readBits(bitsToRead)\n    /* Move in the 1 read by while-statement above */\n    n |= 0x1 << bitsToRead\n\n    return n - 1 /* Because result in exp golomb is one larger */\n  }\n\n  readSignedExpGolomb() {\n    let r = this.readUnsignedExpGolomb()\n    if (r & 0x01) {\n      r = (r + 1) >> 1\n    } else {\n      r = -(r >> 1)\n    }\n    return r\n  }\n\n  /**\n   * Returns the size of the buffer\n   * @method readSize\n   * @return {Number} The buffer size.\n   */\n  size() {\n    return this._buffer.byteLength\n  }\n\n  /**\n   * Returns an instance of the buffer as an unsigned 8-bit integer array.\n   * @method getUint8Array\n   * @return {Uint8Array} Unsigned 8-bit integer representation of the buffer\n   */\n  getUint8Array() {\n    return new Uint8Array(this._buffer)\n  }\n\n  /**\n   * Returns the buffer object\n   * @method getArrayBuffer\n   * @return {ArrayBuffer} The buffer used the BufferReader\n   */\n  getArrayBuffer() {\n    return this._buffer\n  }\n}\n", "import { BufferReader } from './bufferreader'\n\nexport class SPSParser {\n  public reader: BufferReader\n\n  constructor(buffer: Buffer) {\n    this.reader = new BufferReader(buffer)\n  }\n\n  parse() {\n    // nalhdr\n    this.reader.readNext()\n    const profile = this.reader.readNext()\n    // constraints\n    this.reader.readNext()\n    const level = this.reader.readNext()\n\n    // seqParameterSetId\n    this.reader.readUnsignedExpGolomb()\n\n    if ([100, 110, 122, 244, 44, 83, 86, 118].includes(profile)) {\n      const chromaFormat = this.reader.readUnsignedExpGolomb()\n      if (chromaFormat === 3) {\n        // Separate color plane flag\n        this.reader.readBits(1)\n      }\n\n      // bitDepthLumaMinus8\n      this.reader.readUnsignedExpGolomb()\n\n      // bitDepthChromaMinus8\n      this.reader.readUnsignedExpGolomb()\n\n      // qpPrimeYZeroTransformBypassFlag\n      this.reader.readBits(1)\n      const seqScalingMatrix = this.reader.readBits(1)\n      if (seqScalingMatrix) {\n        for (let k = 0; k < (chromaFormat !== 3 ? 8 : 12); k++) {\n          // seqScalingListPresentFlag\n          this.reader.readBits(1)\n          // TODO: More logic goes here..\n        }\n      }\n    }\n\n    // log2MaxFrameNumMinus4\n    this.reader.readUnsignedExpGolomb()\n    const picOrderCntType = this.reader.readUnsignedExpGolomb()\n    if (picOrderCntType === 0) {\n      // log2MaxPicOrderCntLsbMinus4\n      this.reader.readUnsignedExpGolomb()\n    } else if (picOrderCntType === 1) {\n      let numRefFramesInPic = 0\n      this.reader.readBits(1)\n      this.reader.readSignedExpGolomb()\n      this.reader.readSignedExpGolomb()\n      numRefFramesInPic = this.reader.readUnsignedExpGolomb()\n      for (let i = 0; i < numRefFramesInPic; i++) {\n        this.reader.readSignedExpGolomb()\n      }\n    }\n\n    // maxNumRefFrames\n    this.reader.readUnsignedExpGolomb()\n    // gapsInFrameNumValueAllowedFlag\n    this.reader.readBits(1)\n    const picWidthInMbsMinus1 = this.reader.readUnsignedExpGolomb()\n    const picHeightInMapUnitsMinus1 = this.reader.readUnsignedExpGolomb()\n    const picFrameMbsOnlyFlag = this.reader.readBits(1)\n    // direct8x8InferenceFlag\n    this.reader.readBits(1)\n    const frameCroppingFlag = this.reader.readBits(1)\n\n    const frameCropLeftOffset = frameCroppingFlag\n      ? this.reader.readUnsignedExpGolomb()\n      : 0\n    const frameCropRightOffset = frameCroppingFlag\n      ? this.reader.readUnsignedExpGolomb()\n      : 0\n    const frameCropTopOffset = frameCroppingFlag\n      ? this.reader.readUnsignedExpGolomb()\n      : 0\n    const frameCropBottomOffset = frameCroppingFlag\n      ? this.reader.readUnsignedExpGolomb()\n      : 0\n\n    const w = (picWidthInMbsMinus1 + 1) * 16\n      - frameCropLeftOffset * 2\n      - frameCropRightOffset * 2\n    const h = (2 - picFrameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16\n      - frameCropTopOffset * 2\n      - frameCropBottomOffset * 2\n\n    return {\n      profile,\n      level: level / 10.0,\n      width: w,\n      height: h,\n    }\n  }\n}\n", "export function b64ToUint6(nChr: number) {\n  return nChr > 64 && nChr < 91\n    ? nChr - 65\n    : nChr > 96 && nChr < 123\n    ? nChr - 71\n    : nChr > 47 && nChr < 58\n    ? nChr + 4\n    : nChr === 43\n    ? 62\n    : nChr === 47\n    ? 63\n    : 0\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Base64_encoding_and_decoding\nexport function base64DecToArr(sBase64: string, nBlocksSize: number) {\n  const sB64Enc = sBase64.replace(/[^A-Za-z0-9+/]/g, '')\n  const nInLen = sB64Enc.length\n  const nOutLen = nBlocksSize\n    ? Math.ceil(((nInLen * 3 + 1) >> 2) / nBlocksSize) * nBlocksSize\n    : (nInLen * 3 + 1) >> 2\n  const taBytes = new Uint8Array(nOutLen)\n\n  let nMod3\n  let nMod4\n  let nUint24 = 0\n  let nOutIdx = 0\n  for (let nInIdx = 0; nInIdx < nInLen; nInIdx++) {\n    nMod4 = nInIdx & 3\n    nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << (18 - 6 * nMod4)\n    if (nMod4 === 3 || nInLen - nInIdx === 1) {\n      for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {\n        taBytes[nOutIdx] = (nUint24 >>> ((16 >>> nMod3) & 24)) & 255\n      }\n      nUint24 = 0\n    }\n  }\n\n  return taBytes\n}\n", "import { H264Media } from '../../../utils/protocols/sdp'\n\nimport { Box, Container } from './isom'\nimport { SPSParser } from './spsparser'\nimport { base64DecToArr } from './utils'\n\nconst PROFILE_NAMES: { [key: number]: string } = {\n  66: 'Baseline',\n  77: 'Main',\n  100: 'High',\n}\n\nconst h264EncodingName = (profileLevelId: string) => {\n  const profileCode = parseInt(profileLevelId.substr(0, 2), 16)\n  const levelCode = parseInt(profileLevelId.substr(4, 2), 16)\n\n  const profile = PROFILE_NAMES[profileCode] || profileCode.toString()\n  const level = (levelCode / 10).toFixed(1)\n\n  return {\n    coding: 'H.264',\n    profile,\n    level,\n  }\n}\n\nexport const h264Settings = (\n  media: H264Media,\n  date: number,\n  trackId: number\n) => {\n  /*\n   * Example SDP media segment for H264 audio:\n   *\n\n   {\n     \"type\": \"video\",\n     \"port\": \"0\",\n     \"proto\": \"RTP/AVP\",\n     \"fmt\": \"96\",\n     \"connectionData\": {\n       \"netType\": \"IN\",\n       \"addrType\": \"IP4\",\n       \"connectionAddress\": \"0.0.0.0\"\n     },\n     \"bwtype\": \"AS\",\n     \"bandwidth\": \"50000\",\n     \"rtpmap\": {\n       \"payloadType\": \"96\",\n       \"encodingName\": \"H264\",\n       \"clockrate\": \"90000\"\n     },\n     \"fmtp\": {\n       \"format\": \"96\",\n       \"parameters\": {\n         \"packetization-mode\": \"1\",\n         \"profile-level-id\": \"4d0029\",\n         \"sprop-parameter-sets\": \"Z00AKeKQDwBE/LgLcBAQGkHiRFQ=,aO48gA==\"\n       }\n     },\n     \"control\": \"rtsp://hostname/axis-media/media.amp/stream=0?audio=1\",\n     \"framerate\": \"25.000000\",\n     \"transform\": [[1,0,0],[0,1,0],[0,0,1]]\n   },\n\n   */\n\n  const profileLevelId = media.fmtp.parameters['profile-level-id']\n  const parameterSets = media.fmtp.parameters['sprop-parameter-sets']\n    .split(',')\n    .map(base64DecToArr)\n\n  // We assume the first set is _the_ SPS (no support for multiple).\n  const sps = parameterSets.slice(0, 1)\n  // The remaining sets are all PPS to support more than one.\n  const pps = parameterSets.slice(1)\n\n  const parsedSps = new SPSParser(sps[0].buffer).parse()\n  // If media framerate is missing in SDP, it is not possible to calculate\n  // the frame duration. Use a fallback value (90000 Hz / 25 fps)\n  const FALLBACK_FRAME_DURATION = 3600\n  return {\n    mediaHeaderBox: new Box('vmhd'),\n    sampleEntryBox: new Container(\n      'avc1',\n      {\n        width: parsedSps.width,\n        height: parsedSps.height,\n      },\n      new Box('avcC', {\n        AVCProfileIndication: sps[0][1],\n        profile_compatibility: sps[0][2],\n        AVCLevelIndication: sps[0][3],\n        sequenceParameterSets: sps,\n        pictureParameterSets: pps,\n      })\n    ),\n    tkhd: {\n      track_ID: trackId,\n      creation_time: date,\n      modification_time: date,\n      width: parsedSps.width << 16,\n      height: parsedSps.height << 16,\n      volume: 0,\n    },\n    hdlr: {},\n    mdhd: {\n      timescale: media.rtpmap.clockrate,\n      creation_time: date,\n      modification_time: date,\n      duration: 0,\n    },\n\n    // (ticks / s) / (frames / s) = ticks / frame, e.g. frame duration in ticks\n    defaultFrameDuration: media.framerate !== undefined && media.framerate > 0\n      ? Number(media.rtpmap.clockrate) / Number(media.framerate)\n        || FALLBACK_FRAME_DURATION\n      : FALLBACK_FRAME_DURATION,\n    // MIME type\n    mime: `avc1.${profileLevelId}`,\n    codec: h264EncodingName(profileLevelId),\n  }\n}\n", "import { Sdp } from '../../../utils/protocols/sdp'\n\nimport { aacSettings } from './aacSettings'\nimport { h264Settings } from './h264Settings'\nimport { Box, Container } from './isom'\n\ninterface MoofMetadata {\n  trackId: number\n  timestamp: number\n  byteLength: number\n}\n\nconst formatDefaults: {\n  [key: string]: (\n    media: any,\n    date: number,\n    trackId: number\n  ) => { mime: string; codec: any; defaultFrameDuration: number }\n} = {\n  'MPEG4-GENERIC': aacSettings,\n  H264: h264Settings,\n}\n\ninterface TrackData {\n  lastTimestamp: number\n  baseMediaDecodeTime: number\n  defaultFrameDuration: number\n  clockrate: number\n  bitrate: number\n  framerate: number\n  cumulativeByteLength: number\n  cumulativeDuration: number\n  cumulativeFrames: number\n}\n\nconst createTrackData = (): TrackData => {\n  return {\n    lastTimestamp: 0,\n    baseMediaDecodeTime: 0,\n    defaultFrameDuration: 0,\n    clockrate: 0,\n    bitrate: 0,\n    framerate: 0,\n    cumulativeByteLength: 0,\n    cumulativeDuration: 0,\n    cumulativeFrames: 0,\n  }\n}\n\ninterface RateInfo {\n  byteLength: number\n  duration: number\n}\n\nconst updateRateInfo = (\n  trackData: TrackData,\n  { byteLength, duration }: RateInfo\n) => {\n  trackData.cumulativeByteLength += byteLength\n  trackData.cumulativeDuration += duration\n  trackData.cumulativeFrames++\n\n  // Update the cumulative number size (bytes) and duration (ticks), and if\n  // the duration exceeds the clockrate (meaning longer than 1 second of data),\n  // then compute a new bitrate and reset cumulative size and duration.\n  if (trackData.cumulativeDuration >= trackData.clockrate) {\n    const bits = 8 * trackData.cumulativeByteLength\n    const frames = trackData.cumulativeFrames\n    const seconds = trackData.cumulativeDuration / trackData.clockrate\n    trackData.bitrate = bits / seconds\n    trackData.framerate = frames / seconds\n    trackData.cumulativeByteLength = 0\n    trackData.cumulativeDuration = 0\n    trackData.cumulativeFrames = 0\n  }\n}\n\n/**\n * Create boxes for a stream initiated by an sdp object\n *\n * @class BoxBuilder\n */\nexport class BoxBuilder {\n  public trackIdMap: { [key: number]: number }\n  public sequenceNumber: number\n  public ntpPresentationTime: number\n  public trackData: TrackData[]\n  public videoTrackId?: number\n\n  constructor() {\n    this.trackIdMap = {}\n    this.sequenceNumber = 0\n    this.ntpPresentationTime = 0\n    this.trackData = []\n  }\n\n  trak(settings: any) {\n    const trak = new Container('trak')\n    const mdia = new Container('mdia')\n    const minf = new Container('minf')\n    const dinf = new Container('dinf')\n    const dref = new Container('dref')\n    const stbl = new Container('stbl')\n\n    dref.set('entry_count', 1)\n\n    trak.append(\n      new Box('tkhd', settings.tkhd),\n      mdia.append(\n        new Box('mdhd', settings.mdhd),\n        new Box('hdlr', settings.hdlr),\n        minf.append(\n          settings.mediaHeaderBox, // vmhd or smhd box (video or sound)\n          dinf.append(dref.append(new Box('url '))),\n          stbl.append(\n            new Container('stsd', undefined, settings.sampleEntryBox),\n            new Box('stts'),\n            new Box('stsc'),\n            new Box('stco'),\n            new Box('stsz'),\n            new Box('stss')\n          )\n        )\n      )\n    )\n\n    return trak\n  }\n\n  /**\n   * Creates a Moov box from the provided options.\n   * @method moov\n   * @param  sdp - The session description protocol\n   * @param  date - The creation/modification time of the movie\n   * @return Moov object\n   */\n  moov(sdp: Sdp, date: any) {\n    const moov = new Container('moov')\n    moov.append(\n      new Box('mvhd', {\n        creation_time: date,\n        modification_time: date,\n        duration: 0,\n      })\n    )\n\n    const mvex = new Container('mvex')\n\n    // For each of the media segments in the SDP structure, we will set up\n    // a track in the MP4 file. For each track, a 'trak' box is added to the\n    // 'moov' box and a 'trex' box is added to the 'mvex' box.\n\n    this.trackIdMap = {}\n    this.sequenceNumber = 0\n    this.ntpPresentationTime = 0\n\n    let trackId = 0\n    this.trackData = []\n\n    sdp.media.forEach((media) => {\n      if (media.rtpmap === undefined) {\n        return\n      }\n\n      const payloadType = media.rtpmap.payloadType\n      const encoding = media.rtpmap.encodingName\n\n      if (formatDefaults[encoding] !== undefined) {\n        // We know how to handle this encoding, add a new track for it, and\n        // register the track for this payloadType.\n        this.trackIdMap[payloadType] = ++trackId\n\n        // Mark the video track\n        if (media.type.toLowerCase() === 'video') {\n          this.videoTrackId = trackId\n        }\n\n        // Extract the settings from the SDP media information based on\n        // the encoding name (H264, MPEG4-GENERIC, ...).\n        const settings = formatDefaults[encoding](media, date, trackId)\n        media.mime = settings.mime // add MIME type to the SDP media\n        media.codec = settings.codec // add human readable codec string to the SDP media\n\n        const trackData = createTrackData()\n        trackData.clockrate = media.rtpmap.clockrate\n        // Set default frame duration (in ticks) for later use\n        trackData.defaultFrameDuration = settings.defaultFrameDuration\n\n        this.trackData.push(trackData)\n\n        const trak = this.trak(settings)\n        moov.append(trak)\n        mvex.append(new Box('trex', { track_ID: trackId }))\n      }\n    })\n\n    moov.append(mvex)\n\n    return moov\n  }\n\n  /**\n   * Boxes that carry actual elementary stream fragment metadata + data.\n   */\n\n  /**\n   * Creates a moof box from the provided fragment metadata.\n   * @method moof\n   * @param  metadata - Track ID, timestamp, bytelength\n   * @return moof Container\n   */\n  moof(metadata: MoofMetadata) {\n    const { trackId, timestamp, byteLength } = metadata\n    const trackOffset = trackId - 1\n\n    const trackData = this.trackData[trackOffset]\n\n    // The RTP timestamps are unsigned 32 bit and will overflow\n    // at some point. We can guard against the overflow by ORing with 0,\n    // which will bring any difference back into signed 32-bit domain.\n    const duration = trackData.lastTimestamp !== 0\n      ? (timestamp - trackData.lastTimestamp) | 0\n      : trackData.defaultFrameDuration\n\n    trackData.lastTimestamp = timestamp\n\n    const moof = new Container('moof')\n    const traf = new Container('traf')\n\n    const trun = new Box('trun', {\n      sample_duration: duration,\n      sample_size: byteLength,\n      first_sample_flags: 0x40,\n    })\n\n    moof.append(\n      new Box('mfhd', { sequence_number: this.sequenceNumber++ }),\n      traf.append(\n        new Box('tfhd', { track_ID: trackId }),\n        new Box('tfdt', { baseMediaDecodeTime: trackData.baseMediaDecodeTime }),\n        trun\n      )\n    )\n\n    trackData.baseMediaDecodeTime += duration\n\n    // Correct the trun data offset\n    trun.set('data_offset', moof.byteLength + 8)\n\n    updateRateInfo(trackData, { byteLength, duration })\n\n    return moof\n  }\n\n  /**\n   * Creates an mdat box containing the elementary stream data.\n   * @param  data - Elementary stream data\n   * @return mdat Box\n   */\n  mdat(data: Buffer) {\n    const box = new Box('mdat')\n    box.add('data', data)\n    return box\n  }\n\n  setPresentationTime(trackId: number, ntpTimestamp?: number) {\n    // Before updating the baseMediaDecodeTime, we check if\n    // there is already a base NTP time to use as a reference\n    // for computing presentation times.\n    if (\n      !this.ntpPresentationTime\n      && ntpTimestamp\n      && trackId === this.videoTrackId\n    ) {\n      const trackOffset = trackId - 1\n      const trackData = this.trackData[trackOffset]\n      this.ntpPresentationTime = ntpTimestamp\n        - 1000 * (trackData.baseMediaDecodeTime / trackData.clockrate)\n    }\n  }\n}\n", "import registerDebug from 'debug'\n\nimport { Readable, Writable } from 'stream'\n\nimport { MediaTrack } from '../../utils/protocols/isom'\nimport { isRtcpBye } from '../../utils/protocols/rtcp'\nimport { Sink } from '../component'\nimport { Message, MessageType } from '../message'\n\nconst TRIGGER_THRESHOLD = 100\n\nconst debug = registerDebug('msl:mse')\n\nexport class MseSink extends Sink {\n  private readonly _videoEl: HTMLVideoElement\n  private _done?: () => void\n  private _lastCheckpointTime: number\n\n  public onSourceOpen?: (mse: MediaSource, tracks: MediaTrack[]) => void\n\n  /**\n   * Create a Media component.\n   *\n   * The constructor sets up two streams and connects them to the MediaSource.\n   *\n   * @param el - A video element to connect the media source to\n   */\n  constructor(el: HTMLVideoElement) {\n    if (el === undefined) {\n      throw new Error('video element argument missing')\n    }\n\n    let mse: MediaSource | undefined\n    let sourceBuffer: SourceBuffer | undefined\n\n    /**\n     * Set up an incoming stream and attach it to the sourceBuffer.\n     */\n    const incoming = new Writable({\n      objectMode: true,\n      write: (msg: Message, _, callback) => {\n        if (msg.type === MessageType.ISOM) {\n          // ISO BMFF Byte Stream data to be added to the source buffer\n          this._done = callback\n\n          if (msg.tracks !== undefined || msg.mime !== undefined) {\n            const tracks = msg.tracks ?? []\n            // MIME codecs: https://tools.ietf.org/html/rfc6381\n            const mimeCodecs = tracks\n              .map((track) => track.mime)\n              .filter((mime) => mime)\n            const codecs = mimeCodecs.length !== 0\n              ? mimeCodecs.join(', ')\n              : 'avc1.640029, mp4a.40.2'\n\n            // Take MIME type directly from the message, or constructed\n            // from the tracks (with a default fallback to basic H.264).\n            const mimeType = msg.mime ?? `video/mp4; codecs=\"${codecs}\"`\n\n            if (!MediaSource.isTypeSupported(mimeType)) {\n              incoming.emit('error', `unsupported media type: ${mimeType}`)\n              return\n            }\n\n            // Start a new movie (new SDP info available)\n            this._lastCheckpointTime = 0\n\n            // Start a new mediaSource and prepare it with a sourceBuffer.\n            // When ready, this component's .onSourceOpen callback will be called\n            // with the mediaSource, and a list of valid/ignored media.\n            mse = new MediaSource()\n            el.src = window.URL.createObjectURL(mse)\n            const handler = () => {\n              if (mse === undefined) {\n                incoming.emit('error', 'no MediaSource instance')\n                return\n              }\n              // revoke the object URL to avoid a memory leak\n              window.URL.revokeObjectURL(el.src)\n\n              mse.removeEventListener('sourceopen', handler)\n              this.onSourceOpen && this.onSourceOpen(mse, tracks)\n\n              sourceBuffer = this.addSourceBuffer(el, mse, mimeType)\n              sourceBuffer.onerror = (e) => {\n                console.error('error on SourceBuffer: ', e)\n                incoming.emit('error')\n              }\n              try {\n                sourceBuffer.appendBuffer(msg.data)\n              } catch (err) {\n                debug('failed to append to SourceBuffer: ', err, msg)\n              }\n            }\n            mse.addEventListener('sourceopen', handler)\n          } else {\n            // Continue current movie\n            this._lastCheckpointTime = msg.checkpointTime !== undefined\n              ? msg.checkpointTime\n              : this._lastCheckpointTime\n\n            try {\n              sourceBuffer?.appendBuffer(msg.data)\n            } catch (e) {\n              debug('failed to append to SourceBuffer: ', e, msg)\n            }\n          }\n        } else if (msg.type === MessageType.RTCP) {\n          if (isRtcpBye(msg.rtcp)) {\n            mse?.readyState === 'open' && mse.endOfStream()\n          }\n          callback()\n        } else {\n          callback()\n        }\n      },\n    })\n\n    incoming.on('finish', () => {\n      console.warn('incoming stream finished: end stream')\n      mse && mse.readyState === 'open' && mse.endOfStream()\n    })\n\n    // When an error is sent on the incoming stream, close it.\n    incoming.on('error', (msg: string) => {\n      console.error('error on incoming stream: ', msg)\n      if (sourceBuffer && sourceBuffer.updating) {\n        sourceBuffer.addEventListener('updateend', () => {\n          mse?.readyState === 'open' && mse.endOfStream()\n        })\n      } else {\n        mse?.readyState === 'open' && mse.endOfStream()\n      }\n    })\n\n    /**\n     * Set up outgoing stream.\n     */\n    const outgoing = new Readable({\n      objectMode: true,\n      read() {\n        //\n      },\n    })\n\n    // When an error is sent on the outgoing stream, whine about it.\n    outgoing.on('error', () => {\n      console.warn('outgoing stream broke somewhere')\n    })\n\n    /**\n     * initialize the component.\n     */\n    super(incoming, outgoing)\n\n    this._videoEl = el\n    this._lastCheckpointTime = 0\n  }\n\n  /**\n   * Add a new sourceBuffer to the mediaSource and remove old ones.\n   * @param el - The media element holding the media source.\n   * @param mse - The media source the buffer should be attached to.\n   * @param mimeType - MIME type and codecs, e.g.: 'video/mp4; codecs=\"avc1.4D0029, mp4a.40.2\"'\n   */\n  addSourceBuffer(\n    el: HTMLVideoElement,\n    mse: MediaSource,\n    mimeType: string\n  ): SourceBuffer {\n    const sourceBuffer = mse.addSourceBuffer(mimeType)\n\n    let trigger = 0\n    const onUpdateEndHandler = () => {\n      ;++trigger\n\n      if (trigger > TRIGGER_THRESHOLD && sourceBuffer.buffered.length) {\n        trigger = 0\n\n        const index = sourceBuffer.buffered.length - 1\n        const start = sourceBuffer.buffered.start(index)\n        const end = Math.min(el.currentTime, this._lastCheckpointTime) - 10\n        try {\n          // remove all material up to 10 seconds before current time\n          if (end > start) {\n            sourceBuffer.remove(start, end)\n\n            return // this._done() will be called on the next updateend event!\n          }\n        } catch (e) {\n          console.warn(e)\n        }\n      }\n      this._done && this._done()\n    }\n    sourceBuffer.addEventListener('updateend', onUpdateEndHandler)\n\n    return sourceBuffer\n  }\n\n  get currentTime(): number {\n    return this._videoEl.currentTime\n  }\n\n  async play(): Promise<void> {\n    return await this._videoEl.play()\n  }\n\n  pause(): void {\n    return this._videoEl.pause()\n  }\n}\n", "import { MessageType, RtcpMessage } from '../../components/message'\nimport { POS } from '../bits'\n\n// Real Time Control Protocol (RTCP)\n// https://tools.ietf.org/html/rfc3550#section-6\n\n/*\nCommon RTCP packed header:\n\n        0                   1                   2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nheader |V=2|P|    RC   |   PT=SR=200   |             length            |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n*/\nexport enum RTCPPacketType {\n  SR = 200,\n  RR = 201,\n  SDES = 202,\n  BYE = 203,\n  APP = 204,\n}\n\nexport interface Rtcp {\n  readonly version: number\n  readonly padding: boolean\n  readonly count: number\n  readonly packetType: RTCPPacketType | number\n  readonly length: number\n}\n\nconst parseBase = (buffer: Buffer): Rtcp => ({\n  version: buffer[0] >>> 6,\n  padding: !!(buffer[0] & POS[2]),\n  count: buffer[0] & 0x1f,\n  packetType: buffer.readUInt8(1),\n  length: buffer.readUInt16BE(2),\n})\n\nexport const parseRtcp = (\n  buffer: Buffer\n): Rtcp | RtcpSR | RtcpRR | RtcpSDES | RtcpBye | RtcpApp => {\n  const base = parseBase(buffer)\n\n  switch (base.packetType) {\n    case RTCPPacketType.SR:\n      return parseSR(buffer, base)\n    case RTCPPacketType.RR:\n      return parseRR(buffer, base)\n    case RTCPPacketType.SDES:\n      return parseSDES(buffer, base)\n    case RTCPPacketType.BYE:\n      return parseBYE(buffer, base)\n    case RTCPPacketType.APP:\n      return parseAPP(buffer, base)\n    default:\n      return base\n  }\n}\n\nexport const rtcpMessageFromBuffer = (\n  channel: number,\n  buffer: Buffer\n): RtcpMessage => {\n  return {\n    type: MessageType.RTCP,\n    data: buffer,\n    channel,\n    rtcp: parseRtcp(buffer),\n  }\n}\n\n/*\nSR: Sender Report RTCP Packet\n\n        0                   1                   2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nheader |V=2|P|    RC   |   PT=SR=200   |             length            |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |                         SSRC of sender                        |\n       +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\nsender |              NTP timestamp, most significant word             |\ninfo   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |             NTP timestamp, least significant word             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |                         RTP timestamp                         |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |                     sender's packet count                     |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |                      sender's octet count                     |\n       +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\nreport |                 SSRC_1 (SSRC of first source)                 |\nblock  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  1    | fraction lost |       cumulative number of packets lost       |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |           extended highest sequence number received           |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |                      interarrival jitter                      |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |                         last SR (LSR)                         |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |                   delay since last SR (DLSR)                  |\n       +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\nreport |                 SSRC_2 (SSRC of second source)                |\nblock  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  2    :                               ...                             :\n       +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n       |                  profile-specific extensions                  |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n*/\n\nexport const SR = {\n  packetType: 200,\n}\n\nexport interface RtcpReportBlock {\n  readonly syncSource: number\n  readonly fractionLost: number\n  readonly cumulativeNumberOfPacketsLost: number\n  readonly extendedHighestSequenceNumberReceived: number\n  readonly interarrivalJitter: number\n  readonly lastSRTimestamp: number\n  readonly delaySinceLastSR: number\n}\n\nconst parseReportBlocks = (\n  count: number,\n  buffer: Buffer,\n  offset: number\n): RtcpReportBlock[] => {\n  const reports: RtcpReportBlock[] = []\n  for (let reportNumber = 0; reportNumber < count; reportNumber++) {\n    const o = offset + reportNumber * 24\n    reports.push({\n      syncSource: buffer.readUInt32BE(o + 0),\n      fractionLost: buffer.readUInt8(o + 4),\n      cumulativeNumberOfPacketsLost: buffer.readUIntBE(o + 5, 3),\n      extendedHighestSequenceNumberReceived: buffer.readUInt32BE(o + 8),\n      interarrivalJitter: buffer.readUInt32BE(o + 12),\n      lastSRTimestamp: buffer.readUInt32BE(o + 16),\n      delaySinceLastSR: buffer.readUInt32BE(o + 20),\n    })\n  }\n  return reports\n}\n\nexport interface RtcpSR extends Rtcp {\n  readonly version: RTCPPacketType.SR\n\n  readonly syncSource: number\n  readonly ntpMost: number\n  readonly ntpLeast: number\n  readonly rtpTimestamp: number\n  readonly sendersPacketCount: number\n  readonly sendersOctetCount: number\n  readonly reports: readonly RtcpReportBlock[]\n}\n\nconst parseSR = (buffer: Buffer, base: Rtcp): RtcpSR => ({\n  ...base,\n  syncSource: buffer.readUInt32BE(4),\n  ntpMost: buffer.readUInt32BE(8),\n  ntpLeast: buffer.readUInt32BE(12),\n  rtpTimestamp: buffer.readUInt32BE(16),\n  sendersPacketCount: buffer.readUInt32BE(20),\n  sendersOctetCount: buffer.readUInt32BE(24),\n  reports: parseReportBlocks(base.count, buffer, 28),\n})\n\nexport const isRtcpSR = (rtcp: Rtcp): rtcp is RtcpSR =>\n  rtcp.packetType === RTCPPacketType.SR\n\n/*\nRR: Receiver Report RTCP Packet\n\n        0                   1                   2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nheader |V=2|P|    RC   |   PT=RR=201   |             length            |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |                     SSRC of packet sender                     |\n       +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\nreport |                 SSRC_1 (SSRC of first source)                 |\nblock  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  1    | fraction lost |       cumulative number of packets lost       |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |           extended highest sequence number received           |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |                      interarrival jitter                      |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |                         last SR (LSR)                         |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |                   delay since last SR (DLSR)                  |\n       +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\nreport |                 SSRC_2 (SSRC of second source)                |\nblock  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  2    :                               ...                             :\n       +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n       |                  profile-specific extensions                  |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n*/\n\nexport interface RtcpRR extends Rtcp {\n  readonly version: RTCPPacketType.RR\n\n  readonly syncSource: number\n  readonly reports: readonly RtcpReportBlock[]\n}\n\nconst parseRR = (buffer: Buffer, base: Rtcp): RtcpRR => ({\n  ...base,\n  syncSource: buffer.readUInt32BE(4),\n  reports: parseReportBlocks(base.count, buffer, 8),\n})\n\nexport const isRtcpRR = (rtcp: Rtcp): rtcp is RtcpRR =>\n  rtcp.packetType === RTCPPacketType.RR\n\n/*\nSDES: Source Description RTCP Packet\n\n        0                   1                   2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nheader |V=2|P|    SC   |  PT=SDES=202  |             length            |\n       +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\nchunk  |                          SSRC/CSRC_1                          |\n  1    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |                           SDES items                          |\n       |                              ...                              |\n       +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\nchunk  |                          SSRC/CSRC_2                          |\n  2    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |                           SDES items                          |\n       |                              ...                              |\n       +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n*/\n\nexport enum SDESItem {\n  CNAME = 1,\n  NAME = 2,\n  EMAIL = 3,\n  PHONE = 4,\n  LOC = 5,\n  TOOL = 6,\n  NOTE = 7,\n  PRIV = 8,\n}\n\nexport interface RtcpSDESBlock {\n  readonly source: number\n  readonly items: Array<[number, string] | [SDESItem.PRIV, string, string]>\n}\n\nexport interface RtcpSDES extends Rtcp {\n  readonly version: RTCPPacketType.SDES\n\n  readonly syncSource: number\n  readonly sourceDescriptions: readonly RtcpSDESBlock[]\n}\n\nconst parseSDES = (buffer: Buffer, base: Rtcp): RtcpSDES => {\n  const sourceDescriptions: RtcpSDESBlock[] = []\n  let offset = 4\n  for (let block = 0; block < base.count; block++) {\n    const chunk: RtcpSDESBlock = {\n      source: buffer.readUInt32BE(offset),\n      items: [],\n    }\n    offset += 4\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const itemType = buffer.readUInt8(offset++)\n\n      if (itemType === 0) {\n        // start next block at word boundary\n        if (offset % 4 !== 0) {\n          offset += 4 - (offset % 4)\n        }\n        break\n      }\n\n      const length = buffer.readUInt8(offset++)\n\n      if (itemType === SDESItem.PRIV) {\n        const prefixLength = buffer.readUInt8(offset)\n        const prefix = buffer.toString(\n          'utf8',\n          offset + 1,\n          offset + 1 + prefixLength\n        )\n        const value = buffer.toString(\n          'utf8',\n          offset + 1 + prefixLength,\n          offset + length\n        )\n        chunk.items.push([SDESItem.PRIV, prefix, value])\n      } else {\n        const value = buffer.toString('utf8', offset, offset + length)\n        chunk.items.push([itemType, value])\n      }\n\n      offset += length\n    }\n    sourceDescriptions.push(chunk)\n  }\n\n  return {\n    ...base,\n    syncSource: buffer.readUInt32BE(4),\n    sourceDescriptions,\n  }\n}\n\nexport const isRtcpSDES = (rtcp: Rtcp): rtcp is RtcpSDES =>\n  rtcp.packetType === RTCPPacketType.SDES\n\n/*\nBYE: Goodbye RTCP Packet\n\n       0                   1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |V=2|P|    SC   |   PT=BYE=203  |             length            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |                           SSRC/CSRC                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      :                              ...                              :\n      +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n(opt) |     length    |               reason for leaving            ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n*/\n\nexport interface RtcpBye extends Rtcp {\n  readonly version: RTCPPacketType.BYE\n\n  readonly sources: number[]\n  readonly reason?: string\n}\n\nconst parseBYE = (buffer: Buffer, base: Rtcp): RtcpBye => {\n  const sources: number[] = []\n  for (let block = 0; block < base.count; block++) {\n    sources.push(buffer.readUInt32BE(4 + 4 * block))\n  }\n\n  let reason\n  if (base.length > base.count) {\n    const start = 4 + 4 * base.count\n    const length = buffer.readUInt8(start)\n    reason = buffer.toString('utf-8', start + 1, start + 1 + length)\n  }\n\n  return {\n    ...base,\n    sources,\n    reason,\n  }\n}\n\nexport const isRtcpBye = (rtcp: Rtcp): rtcp is RtcpBye =>\n  rtcp.packetType === RTCPPacketType.BYE\n\n/*\nAPP: Application-Defined RTCP Packet\n\n    0                   1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |V=2|P| subtype |   PT=APP=204  |             length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                           SSRC/CSRC                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                          name (ASCII)                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                   application-dependent data                ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n*/\n\nexport interface RtcpApp extends Rtcp {\n  readonly version: RTCPPacketType.APP\n\n  readonly subtype: number\n  readonly source: number\n  readonly name: string\n  readonly data: Buffer\n}\n\nconst parseAPP = (buffer: Buffer, base: Rtcp): RtcpApp => {\n  return {\n    ...base,\n    subtype: base.count,\n    source: buffer.readUInt32BE(4),\n    name: buffer.toString('ascii', 8, 12),\n    data: buffer.slice(12),\n  }\n}\n\nexport const isRtcpApp = (rtcp: Rtcp): rtcp is RtcpApp =>\n  rtcp.packetType === RTCPPacketType.APP\n", "import { Transform } from 'stream'\n\nimport {\n  marker,\n  payload,\n  payloadType,\n  timestamp,\n} from '../../utils/protocols/rtp'\nimport { Tube } from '../component'\nimport { Message, MessageType, XmlMessage } from '../message'\n\nexport class ONVIFDepay extends Tube {\n  constructor() {\n    let XMLPayloadType: number\n    let packets: Buffer[] = []\n\n    const incoming = new Transform({\n      objectMode: true,\n      transform(msg: Message, encoding, callback) {\n        if (msg.type === MessageType.SDP) {\n          let validMedia\n          for (const media of msg.sdp.media) {\n            if (\n              media.type === 'application'\n              && media.rtpmap\n              && media.rtpmap.encodingName === 'VND.ONVIF.METADATA'\n            ) {\n              validMedia = media\n            }\n          }\n          if (validMedia && validMedia.rtpmap) {\n            XMLPayloadType = Number(validMedia.rtpmap.payloadType)\n          }\n          callback(undefined, msg)\n        } else if (\n          msg.type === MessageType.RTP\n          && payloadType(msg.data) === XMLPayloadType\n        ) {\n          // Add payload to packet stack\n          packets.push(payload(msg.data))\n\n          // XML over RTP uses the RTP marker bit to indicate end\n          // of fragmentation. At this point, the packets can be used\n          // to reconstruct an XML packet.\n          if (marker(msg.data) && packets.length > 0) {\n            const xmlMsg: XmlMessage = {\n              timestamp: timestamp(msg.data),\n              ntpTimestamp: msg.ntpTimestamp,\n              payloadType: payloadType(msg.data),\n              data: Buffer.concat(packets),\n              type: MessageType.XML,\n            }\n            callback(undefined, xmlMsg)\n            packets = []\n            return\n          }\n          callback()\n        } else {\n          // Not a message we should handle\n          callback(undefined, msg)\n        }\n      },\n    })\n\n    // outgoing will be defaulted to a PassThrough stream\n    super(incoming)\n  }\n}\n", "import { Transform } from 'stream'\n\nimport { Tube } from '../component'\nimport { Message, MessageType } from '../message'\n\nimport { builder } from './builder'\nimport { Parser } from './parser'\n\n/**\n * A component that converts raw binary data into RTP/RTSP/RTCP packets on the\n * incoming stream, and converts RTSP commands to raw binary data on the outgoing\n * stream. The component is agnostic of any RTSP session details (you need an\n * RTSP session component in the pipeline).\n * @extends {Component}\n */\nexport class RtspParser extends Tube {\n  constructor() {\n    const parser = new Parser()\n\n    // Incoming stream\n    const incoming = new Transform({\n      objectMode: true,\n      transform(msg: Message, encoding, callback) {\n        if (msg.type === MessageType.RAW) {\n          try {\n            parser.parse(msg.data).forEach((message) => incoming.push(message))\n            callback()\n          } catch (e) {\n            const err = e as Error\n            callback(err)\n          }\n        } else {\n          // Not a message we should handle\n          callback(undefined, msg)\n        }\n      },\n    })\n\n    // Outgoing stream\n    const outgoing = new Transform({\n      objectMode: true,\n      transform(msg: Message, encoding, callback) {\n        if (msg.type === MessageType.RTSP) {\n          const data = builder(msg)\n          callback(undefined, { type: MessageType.RAW, data })\n        } else {\n          // don't touch other types\n          callback(undefined, msg)\n        }\n      },\n    })\n\n    super(incoming, outgoing)\n  }\n}\n", "import debug from 'debug'\n\nimport { RtspMessage } from '../message'\n\nconst DEFAULT_PROTOCOL = 'RTSP/1.0'\n\nexport const builder = (msg: RtspMessage): Buffer => {\n  if (!msg.method || !msg.uri) {\n    throw new Error('message needs to contain a method and a uri')\n  }\n  const protocol = msg.protocol || DEFAULT_PROTOCOL\n  const headers = msg.headers || {}\n\n  const messageString = [\n    `${msg.method} ${msg.uri} ${protocol}`,\n    Object.entries(headers)\n      .map(([key, value]) => `${key}: ${value}`)\n      .join('\\r\\n'),\n    '\\r\\n',\n  ].join('\\r\\n')\n  debug('msl:rtsp:outgoing')(messageString)\n\n  return Buffer.from(messageString)\n}\n", "/*\n * The RTSP response format is defined in RFC 7826,\n * using ABNF notation specified in RFC 5234.\n * Strings in ABNF rules (\"...\") are always case insensitive!\n *\n * Basic rules to help with the headers below:\n * ====\n * CR              =  %x0D ; US-ASCII CR, carriage return (13)\n * LF              =  %x0A  ; US-ASCII LF, linefeed (10)\n * SP              =  %x20  ; US-ASCII SP, space (32)\n * HT              =  %x09  ; US-ASCII HT, horizontal-tab (9)\n * CRLF            =  CR LF\n * LWS             =  [CRLF] 1*( SP / HT ) ; Line-breaking whitespace\n * SWS             =  [LWS] ; Separating whitespace\n * HCOLON          =  *( SP / HT ) \":\" SWS\n *\n * RTSP response rules (a `*` means zero or more):\n * ====\n * Status-Line  = RTSP-Version SP Status-Code SP Reason-Phrase CRLF\n * Response     = Status-Line\n *                *((general-header\n *                /  response-header\n *                /  message-body-header) CRLF)\n *                CRLF\n *                [ message-body-data ]\n *\n * Example response:\n * ====\n * RTSP/1.0 200 OK\n * CSeq: 3\n * Content-Type: application/sdp\n * Content-Base: rtsp://192.168.0.3/axis-media/media.amp/\n * Server: GStreamer RTSP server\n * Date: Wed, 03 Jun 2015 14:23:42 GMT\n * Content-Length: 623\n *\n * v=0\n * ....\n */\n\n/**\n * Extract the value of a header.\n *\n * @param buffer The response bytes\n * @param header The header to search for\n */\nexport const extractHeaderValue = (buffer: Buffer, header: string) => {\n  const anchor = `\\n${header.toLowerCase()}: `\n  const start = buffer.toString().toLowerCase().indexOf(anchor)\n  if (start >= 0) {\n    const end = buffer.indexOf('\\n', start + anchor.length)\n    const headerValue = buffer\n      .toString('ascii', start + anchor.length, end)\n      .trim()\n    return headerValue\n  }\n  return null\n}\n\nexport const sequence = (buffer: Buffer) => {\n  /**\n   * CSeq           =  \"CSeq\" HCOLON cseq-nr\n   * cseq-nr        =  1*9DIGIT\n   */\n  const val = extractHeaderValue(buffer, 'CSeq')\n  if (val !== null) {\n    return Number(val)\n  }\n  return null\n}\n\nexport const sessionId = (buffer: Buffer) => {\n  /**\n   * Session          =  \"Session\" HCOLON session-id\n   *                     [ SEMI \"timeout\" EQUAL delta-seconds ]\n   * session-id        =  1*256( ALPHA / DIGIT / safe )\n   * delta-seconds     =  1*19DIGIT\n   */\n  const val = extractHeaderValue(buffer, 'Session')\n  return val ? val.split(';')[0] : null\n}\n\nexport const sessionTimeout = (buffer: Buffer) => {\n  /**\n   * Session          =  \"Session\" HCOLON session-id\n   *                     [ SEMI \"timeout\" EQUAL delta-seconds ]\n   * session-id        =  1*256( ALPHA / DIGIT / safe )\n   * delta-seconds     =  1*19DIGIT\n   */\n  const val = extractHeaderValue(buffer, 'Session')\n  if (val === null) {\n    return null\n  }\n  const defaultTimeout = 60\n  const timeoutToken = 'timeout='\n  const timeoutPosition = val.toLowerCase().indexOf(timeoutToken)\n  if (timeoutPosition !== -1) {\n    let timeoutVal = val.substring(timeoutPosition + timeoutToken.length)\n    timeoutVal = timeoutVal.split(';')[0]\n    const parsedTimeout = parseInt(timeoutVal)\n    return isNaN(parsedTimeout) ? defaultTimeout : parsedTimeout\n  }\n  return defaultTimeout\n}\n\nexport const statusCode = (buffer: Buffer) => {\n  return Number(buffer.toString('ascii', 9, 12))\n}\n\nexport const contentBase = (buffer: Buffer) => {\n  /**\n   * Content-Base       =  \"Content-Base\" HCOLON RTSP-URI\n   */\n  return extractHeaderValue(buffer, 'Content-Base')\n}\n\nexport const contentLocation = (buffer: Buffer) => {\n  /**\n   * Content-Location   =  \"Content-Location\" HCOLON RTSP-REQ-Ref\n   */\n  return extractHeaderValue(buffer, 'Content-Location')\n}\n\nexport const connectionEnded = (buffer: Buffer) => {\n  /**\n   * Connection         =  \"Connection\" HCOLON connection-token\n   *                       *(COMMA connection-token)\n   * connection-token   =  \"close\" / token\n   */\n  const connectionToken = extractHeaderValue(buffer, 'Connection')\n  return connectionToken !== null && connectionToken.toLowerCase() === 'close'\n}\n\nexport const range = (buffer: Buffer) => {\n  /**\n   * Range              =  \"Range\" HCOLON ranges-spec\n   * ranges-spec        =  npt-range / utc-range / smpte-range\n   *                       /  range-ext\n   * npt-range        =  \"npt\" [EQUAL npt-range-spec]\n   * npt-range-spec   =  ( npt-time \"-\" [ npt-time ] ) / ( \"-\" npt-time )\n   * npt-time         =  \"now\" / npt-sec / npt-hhmmss / npt-hhmmss-comp\n   * npt-sec          =  1*19DIGIT [ \".\" 1*9DIGIT ]\n   * npt-hhmmss       =  npt-hh \":\" npt-mm \":\" npt-ss [ \".\" 1*9DIGIT ]\n   * npt-hh           =  2*19DIGIT   ; any positive number\n   * npt-mm           =  2*2DIGIT  ; 0-59\n   * npt-ss           =  2*2DIGIT  ; 0-59\n   * npt-hhmmss-comp  =  npt-hh-comp \":\" npt-mm-comp \":\" npt-ss-comp\n   *                     [ \".\" 1*9DIGIT ] ; Compatibility format\n   * npt-hh-comp      =  1*19DIGIT   ; any positive number\n   * npt-mm-comp      =  1*2DIGIT  ; 0-59\n   * npt-ss-comp      =  1*2DIGIT  ; 0-59\n   */\n\n  // Example range headers:\n  // Range: npt=now-\n  // Range: npt=1154.598701-3610.259146\n  const npt = extractHeaderValue(buffer, 'Range')\n  if (npt !== null) {\n    return npt.split('=')[1].split('-')\n  }\n  return undefined\n}\n\n/**\n * Determine the offset of the RTSP body, where the header ends.\n * If there is no header ending, -1 is returned\n * @param  chunk - A piece of data\n * @return The body offset, or -1 if no header end found\n */\nexport const bodyOffset = (chunk: Buffer) => {\n  /**\n   * Strictly speaking, it seems RTSP MUST have CRLF and doesn't allow CR or LF on its own.\n   * That means that the end of the header part should be a pair of CRLF, but we're being\n   * flexible here and also allow LF LF or CR CR instead of CRLF CRLF.\n   */\n  const bodyOffsets = ['\\n\\n', '\\r\\r', '\\r\\n\\r\\n']\n    .map((s) => {\n      const offset = chunk.indexOf(s)\n      if (offset !== -1) {\n        return offset + s.length\n      }\n      return offset\n    })\n    .filter((offset) => offset !== -1)\n  if (bodyOffsets.length > 0) {\n    return bodyOffsets.reduce((acc, offset) => {\n      return Math.min(acc, offset)\n    })\n  }\n  return -1\n}\n", "import { MessageType, SdpMessage } from '../../components/message'\n\nimport { NtpSeconds, seconds } from './ntp'\n\ninterface ConnectionField {\n  // c=<nettype> <addrtype> <connection-address>\n  networkType: 'IN'\n  addressType: 'IP4' | 'IP6'\n  connectionAddress: string\n}\n\ninterface BandwidthField {\n  readonly type: string\n  readonly value: number\n}\n\n// RTSP extensions: https://tools.ietf.org/html/rfc7826 (22.15)\n// exists on both session and media level\ninterface RtspExtensions {\n  readonly range?: string\n  readonly control?: string\n  readonly mtag?: string\n}\n\n/**\n * The session description protocol (SDP).\n *\n * Contains parser to convert SDP data into an SDP structure.\n * https://tools.ietf.org/html/rfc4566\n *\n * NOTE: not all SDP attributes have been implemented,\n * and in some cases the handling of attributes has been\n * simplified to not cover multiple identical attributes.\n */\n\n/**\n * Session description\n *\n * Optional items are marked with a '*'.\n *\n * v=  (protocol version)\n * o=  (owner/creator and session identifier).\n * s=  (session name)\n * i=* (session information)\n * u=* (URI of description)\n * e=* (email address)\n * p=* (phone number)\n * c=* (connection information - not required if included in all media)\n * b=* (bandwidth information)\n * One or more time descriptions (see below)\n * z=* (time zone adjustments)\n * k=* (encryption key)\n * a=* (zero or more session attribute lines)\n * Zero or more media descriptions (see below)\n *\n * Names of the fields below are annotated above with\n * the names used in Appendix A: SDP Grammar of RFC 2327.\n */\nexport interface SessionDescription extends RtspExtensions {\n  // v=0\n  readonly version: 0\n  // o=<username> <sess-id> <sess-version> <nettype> <addrtype> <unicast-address>\n  readonly originField: OriginField\n  // s=<session name>\n  readonly name: string\n  // i=<session description>\n  readonly description?: string\n  // u=<uri>\n  readonly uri?: string\n  // e=<email-address>\n  readonly email?: string | string[]\n  // p=<phone-number>\n  readonly phone?: string | string[]\n  // c=<nettype> <addrtype> <connection-address>\n  readonly connection?: ConnectionField\n  // b=<bwtype>:<bandwidth>\n  readonly bandwidth?: BandwidthField\n  // One or more time descriptions\n  readonly time: TimeDescription\n  readonly repeatTimes?: RepeatTimeDescription\n  // Zero or more media descriptions\n  readonly media: MediaDescription[]\n}\n\ninterface OriginField {\n  // o=<username> <sess-id> <sess-version> <nettype> <addrtype> <unicast-address>\n  username: string\n  sessionId: number\n  sessionVersion: number\n  networkType: 'IN'\n  addressType: 'IP4' | 'IP6'\n  address: string\n}\n\n/**\n * Time description\n *\n * t=  (time the session is active)\n * r=* (zero or more repeat times)\n */\nexport interface TimeDescription {\n  // t=<start-time> <stop-time>\n  readonly startTime: NtpSeconds\n  readonly stopTime: NtpSeconds\n}\n\nexport interface RepeatTimeDescription {\n  // r=<repeat interval> <active duration> <offsets from start-time>\n  readonly repeatInterval: seconds\n  readonly activeDuration: seconds\n  readonly offsets: seconds[]\n}\n\n/**\n * Media description\n *\n * m=  (media name and transport address)\n * i=* (media title)\n * c=* (connection information -- optional if included at session level)\n * b=* (zero or more bandwidth information lines)\n * k=* (encryption key)\n * a=* (zero or more media attribute lines)\n *\n * The parser only handles a single fmt value\n * and only one rtpmap attribute (in theory there\n * can be multiple fmt values with corresponding rtpmap\n * attributes)\n */\nexport interface MediaDescription extends RtspExtensions {\n  // m=<media> <port> <proto> <fmt> ...\n  // m=<media> <port>/<number of ports> <proto> <fmt> ...\n  readonly type: 'audio' | 'video' | 'application' | 'data' | 'control'\n  readonly port: number\n  readonly protocol: 'udp' | 'RTP/AVP' | 'RTP/SAVP'\n  readonly fmt: number // Payload type(s)\n  readonly connection?: ConnectionField\n  readonly bandwidth?: BandwidthField\n  /**\n   * Any remaining attributes\n   * a=...\n   */\n  // a=rtpmap:<payload type> <encoding name>/<clock rate> [/<encoding parameters>]\n  readonly rtpmap?: {\n    readonly clockrate: number\n    readonly encodingName: string\n    readonly payloadType: number\n  }\n  // a=fmtp:<format> <format specific parameters>\n  readonly fmtp: {\n    readonly format: string\n    readonly parameters: { [key: string]: any }\n  }\n  // Extra non-SDP properties\n  // TODO: refactor this away\n  mime?: string\n  codec?: any\n}\n\nexport type TransformationMatrix = readonly [\n  readonly [number, number, number],\n  readonly [number, number, number],\n  readonly [number, number, number],\n]\n\nexport interface VideoMedia extends MediaDescription {\n  readonly type: 'video'\n  readonly framerate?: number\n  // Transformation matrix\n  readonly transform?: TransformationMatrix\n  readonly 'x-sensor-transform'?: TransformationMatrix\n  // JPEG\n  readonly framesize?: [number, number]\n}\n\nexport interface H264Media extends VideoMedia {\n  readonly rtpmap: {\n    readonly clockrate: number\n    readonly encodingName: string\n    readonly payloadType: number\n  }\n}\n\nexport interface AudioMedia extends MediaDescription {\n  readonly type: 'audio'\n}\n\nexport interface AACParameters {\n  readonly bitrate: string\n  readonly config: string\n  readonly indexdeltalength: string\n  readonly indexlength: string\n  readonly mode: 'AAC-hbr'\n  readonly 'profile-level-id': string\n  readonly sizelength: string\n  readonly streamtype: string\n  readonly ctsdeltalength: string\n  readonly dtsdeltalength: string\n  readonly randomaccessindication: string\n  readonly streamstateindication: string\n  readonly auxiliarydatasizelength: string\n}\n\nexport interface AACMedia extends AudioMedia {\n  readonly fmtp: {\n    readonly format: string\n    readonly parameters: AACParameters\n  }\n  readonly rtpmap: {\n    readonly clockrate: number\n    readonly encodingName: string\n    readonly payloadType: number\n  }\n}\n\nexport interface Sdp {\n  readonly session: SessionDescription\n  readonly media: MediaDescription[]\n}\n\nconst extractLineVals = (buffer: Buffer, lineStart: string, start = 0) => {\n  const anchor = `\\n${lineStart}`\n  start = buffer.indexOf(anchor, start)\n  let end = 0\n  const ret: string[] = []\n  while (start >= 0) {\n    end = buffer.indexOf('\\n', start + anchor.length)\n    ret.push(buffer.toString('ascii', start + anchor.length, end).trim())\n    start = buffer.indexOf(anchor, end)\n  }\n  return ret\n}\n\n// SDP parsing\n\n/**\n * Identify the start of a session-level or media-level section.\n * @param  line - The line to parse\n */\nconst newMediaLevel = (line: string) => {\n  return line.match(/^m=/)\n}\n\nconst splitOnFirst = (c: string, text: string) => {\n  const p = text.indexOf(c)\n  if (p < 0) {\n    return [text.slice(0)]\n  }\n  return [text.slice(0, p), text.slice(p + 1)]\n}\n\nconst attributeParsers: any = {\n  fmtp: (value: string) => {\n    const [format, stringParameters] = splitOnFirst(' ', value)\n    switch (format) {\n      default: {\n        const pairs = stringParameters.trim().split(';')\n        const parameters: { [key: string]: any } = {}\n        pairs.forEach((pair) => {\n          const [key, val] = splitOnFirst('=', pair)\n          const normalizedKey = key.trim().toLowerCase()\n          if (normalizedKey !== '') {\n            parameters[normalizedKey] = val.trim()\n          }\n        })\n        return { format, parameters }\n      }\n    }\n  },\n  framerate: Number,\n  rtpmap: (value: string) => {\n    const [payloadType, encoding] = splitOnFirst(' ', value)\n    const [encodingName, clockrate, encodingParameters] = encoding\n      .toUpperCase()\n      .split('/')\n    if (encodingParameters === undefined) {\n      return {\n        payloadType: Number(payloadType),\n        encodingName,\n        clockrate: Number(clockrate),\n      }\n    }\n    return {\n      payloadType: Number(payloadType),\n      encodingName,\n      clockrate: Number(clockrate),\n      encodingParameters,\n    }\n  },\n  transform: (value: string) => {\n    return value.split(';').map((row) => row.split(',').map(Number))\n  },\n  'x-sensor-transform': (value: string) => {\n    return value.split(';').map((row) => row.split(',').map(Number))\n  },\n  framesize: (value: string) => {\n    return value.split(' ')[1].split('-').map(Number)\n  },\n}\n\nconst parseAttribute = (body: string) => {\n  const [attribute, value] = splitOnFirst(':', body)\n  if (value === undefined) {\n    return { [attribute]: true }\n  }\n  if (attributeParsers[attribute] !== undefined) {\n    return { [attribute]: attributeParsers[attribute](value) }\n  }\n  return { [attribute]: value }\n}\n\nconst extractField = (line: string) => {\n  const prefix = line.slice(0, 1)\n  const body = line.slice(2)\n  switch (prefix) {\n    case 'v':\n      return { version: body }\n    case 'o': {\n      const [\n        username,\n        sessionId,\n        sessionVersion,\n        netType,\n        addrType,\n        unicastAddress,\n      ] = body.split(' ')\n      return {\n        origin: {\n          addrType,\n          netType,\n          sessionId,\n          sessionVersion,\n          unicastAddress,\n          username,\n        },\n      }\n    }\n    case 's':\n      return { sessionName: body }\n    case 'i':\n      return { sessionInformation: body }\n    case 'u':\n      return { uri: body }\n    case 'e':\n      return { email: body }\n    case 'p':\n      return { phone: body }\n    // c=<nettype> <addrtype> <connection-address>\n    case 'c': {\n      const [connectionNetType, connectionAddrType, connectionAddress] = body\n        .split(' ')\n      return {\n        connectionData: {\n          addrType: connectionAddrType,\n          connectionAddress,\n          netType: connectionNetType,\n        },\n      }\n    }\n    // b=<bwtype>:<bandwidth>\n    case 'b': {\n      const [bwtype, bandwidth] = body.split(':')\n      return { bwtype, bandwidth }\n    }\n    // t=<start-time> <stop-time>\n    case 't': {\n      const [startTime, stopTime] = body.split(' ').map(Number)\n      return { time: { startTime, stopTime } }\n    }\n    // r=<repeat interval> <active duration> <offsets from start-time>\n    case 'r': {\n      const [repeatInterval, activeDuration, ...offsets] = body\n        .split(' ')\n        .map(Number)\n      return {\n        repeatTimes: { repeatInterval, activeDuration, offsets },\n      }\n    }\n    // z=<adjustment time> <offset> <adjustment time> <offset> ....\n    case 'z':\n      return\n    // k=<method>\n    // k=<method>:<encryption key>\n    case 'k':\n      return\n    // a=<attribute>\n    // a=<attribute>:<value>\n    case 'a':\n      return parseAttribute(body)\n    case 'm': {\n      // Only the first fmt field is parsed!\n      const [type, port, protocol, fmt] = body.split(' ')\n      return { type, port: Number(port), protocol, fmt: Number(fmt) }\n    }\n    default:\n      // console.log('unknown SDP prefix ', prefix);\n  }\n}\n\nexport const extractURIs = (buffer: Buffer) => {\n  // There is a control URI above the m= line, which should not be used\n  const seekFrom = buffer.indexOf('\\nm=')\n  return extractLineVals(buffer, 'a=control:', seekFrom)\n}\n\n/**\n * Parse an SDP text into a data structure with session and media objects.\n *\n * @param  buffer - The buffer containing the SDP plain text\n * @return Structured SDP data\n */\nexport const parse = (buffer: Buffer): Sdp => {\n  const sdp = buffer\n    .toString('ascii')\n    .split('\\n')\n    .map((s) => s.trim())\n  const struct: { [key: string]: any } = { session: {}, media: [] }\n  let mediaCounter = 0\n  let current = struct.session\n  for (const line of sdp) {\n    if (newMediaLevel(line)) {\n      struct.media[mediaCounter] = {}\n      current = struct.media[mediaCounter]\n      ;++mediaCounter\n    }\n    current = Object.assign(current, extractField(line))\n  }\n  return struct as Sdp\n}\n\nexport const messageFromBuffer = (buffer: Buffer): SdpMessage => {\n  return {\n    type: MessageType.SDP,\n    data: buffer,\n    sdp: parse(buffer),\n  }\n}\n", "import { rtcpMessageFromBuffer } from '../../utils/protocols/rtcp'\nimport { bodyOffset, extractHeaderValue } from '../../utils/protocols/rtsp'\nimport { messageFromBuffer } from '../../utils/protocols/sdp'\nimport {\n  MessageType,\n  RtcpMessage,\n  RtpMessage,\n  RtspMessage,\n  SdpMessage,\n} from '../message'\n\n/**\n * The different possible internal parser states.\n */\nenum STATE {\n  IDLE = 0,\n  INTERLEAVED = 1,\n  RTSP = 2,\n}\n\nconst INTERLEAVED_HEADER_BYTES = 4\nconst ASCII_DOLLAR = 0x24\n\ninterface RtpPacketInfo {\n  channel: number\n  begin: number\n  end: number\n}\n\n/**\n * Extract packet information from the interleaved header\n * (4-byte section before the RTP packet).\n * @param  chunks - Buffers constituting the data.\n * @return Packet information (channel, begin, end).\n */\nconst rtpPacketInfo = (chunks: Buffer[]): RtpPacketInfo => {\n  const header = Buffer.alloc(INTERLEAVED_HEADER_BYTES)\n  let i = 0\n  let bytesRead = 0\n\n  while (bytesRead < header.length) {\n    const chunk = chunks[i++]\n    const bytesToRead = Math.min(chunk.length, header.length - bytesRead)\n    chunk.copy(header, bytesRead, 0, bytesToRead)\n    bytesRead += bytesToRead\n  }\n  const channel = header[1]\n  const begin = header.length\n  const length = header.readUInt16BE(2)\n  const end = begin + length\n\n  return { channel, begin, end }\n}\n\n/**\n * Parser class with a public method that takes a data chunk and\n * returns an array of RTP/RTSP/RTCP message objects. The parser\n * keeps track of the added chunks internally in an array and only\n * concatenates chunks when data is needed to construct a message.\n * @type {[type]}\n */\nexport class Parser {\n  private _chunks: Buffer[] = []\n  private _length = 0\n  private _state: STATE = STATE.IDLE\n  private _packet?: RtpPacketInfo\n\n  /**\n   * Create a new Parser object.\n   * @return {undefined}\n   */\n  constructor() {\n    this._init()\n  }\n\n  /**\n   * Initialize the internal properties to their default starting\n   * values.\n   * @return {undefined}\n   */\n  _init() {\n    this._chunks = []\n    this._length = 0\n    this._state = STATE.IDLE\n  }\n\n  _push(chunk: Buffer) {\n    this._chunks.push(chunk)\n    this._length += chunk.length\n  }\n\n  /**\n   * Extract RTSP messages.\n   * @return {Array} An array of messages, possibly empty.\n   */\n  _parseRtsp(): Array<RtspMessage | SdpMessage> {\n    const messages: Array<RtspMessage | SdpMessage> = []\n\n    const buffer = Buffer.concat(this._chunks)\n    const chunkBodyOffset = bodyOffset(buffer)\n    // If last added chunk does not have the end of the header, return.\n    if (chunkBodyOffset === -1) {\n      return messages\n    }\n\n    const rtspHeaderLength = chunkBodyOffset\n    const contentLength = extractHeaderValue(buffer, 'Content-Length')\n    if (\n      contentLength\n      && parseInt(contentLength) > buffer.length - rtspHeaderLength\n    ) {\n      // we do not have the whole body\n      return messages\n    }\n\n    this._init() // resets this._chunks and this._length\n\n    if (\n      rtspHeaderLength === buffer.length\n      || buffer[rtspHeaderLength] === ASCII_DOLLAR\n    ) {\n      // No body in this chunk, assume there is no body?\n      const packet = buffer.slice(0, rtspHeaderLength)\n      messages.push({ type: MessageType.RTSP, data: packet })\n\n      // Add the remaining data to the chunk stack.\n      const trailing = buffer.slice(rtspHeaderLength)\n      this._push(trailing)\n    } else {\n      // Body is assumed to be the remaining data of the last chunk.\n      const packet = buffer\n      const body = buffer.slice(rtspHeaderLength)\n\n      messages.push({ type: MessageType.RTSP, data: packet })\n      messages.push(messageFromBuffer(body))\n    }\n\n    return messages\n  }\n\n  /**\n   * Extract RTP/RTCP messages.\n   * @return {Array} An array of messages, possibly empty.\n   */\n  _parseInterleaved(): Array<RtpMessage | RtcpMessage> {\n    const messages: Array<RtpMessage | RtcpMessage> = []\n\n    // Skip as long as we don't have the first 4 bytes\n    if (this._length < INTERLEAVED_HEADER_BYTES) {\n      return messages\n    }\n\n    // Enough bytes to construct the header and extract packet info.\n    if (!this._packet) {\n      this._packet = rtpPacketInfo(this._chunks)\n    }\n\n    // As long as we don't have enough chunks, skip.\n    if (this._length < this._packet.end) {\n      return messages\n    }\n\n    // We have enough data to extract the packet.\n    const buffer = Buffer.concat(this._chunks)\n    const packet = buffer.slice(this._packet.begin, this._packet.end)\n    const trailing = buffer.slice(this._packet.end)\n    const channel = this._packet.channel\n\n    delete this._packet\n\n    // Prepare next bit.\n    this._init()\n    this._push(trailing)\n\n    // Extract messages\n    if (channel % 2 === 0) {\n      // Even channels 0, 2, ...\n      messages.push({ type: MessageType.RTP, data: packet, channel })\n    } else {\n      // Odd channels 1, 3, ...\n      let rtcpPackets = packet\n      do {\n        // RTCP packets can be packed together, unbundle them:\n        const rtcpByteSize = rtcpPackets.readUInt16BE(2) * 4 + 4\n        messages.push(\n          rtcpMessageFromBuffer(channel, rtcpPackets.slice(0, rtcpByteSize))\n        )\n        rtcpPackets = rtcpPackets.slice(rtcpByteSize)\n      } while (rtcpPackets.length > 0)\n    }\n\n    return messages\n  }\n\n  /**\n   * Set the internal state based on the type of the first chunk\n   */\n  _setState() {\n    // Remove leading 0-sized chunks.\n    while (this._chunks.length > 0 && this._chunks[0].length === 0) {\n      this._chunks.shift()\n    }\n\n    const firstChunk = this._chunks[0]\n\n    if (this._chunks.length === 0) {\n      this._state = STATE.IDLE\n    } else if (firstChunk[0] === ASCII_DOLLAR) {\n      this._state = STATE.INTERLEAVED\n    } else if (firstChunk.toString('ascii', 0, 4) === 'RTSP') {\n      this._state = STATE.RTSP\n    } else {\n      throw new Error(`Unknown chunk of length ${firstChunk.length}`)\n    }\n  }\n\n  /**\n   * Add the next chunk of data to the parser and extract messages.\n   * If no message can be extracted, an empty array is returned, otherwise\n   * an array of messages is returned.\n   * @param  chunk - The next piece of data.\n   * @return An array of messages, possibly empty.\n   */\n  parse(\n    chunk: Buffer\n  ): Array<SdpMessage | RtspMessage | RtpMessage | RtcpMessage> {\n    this._push(chunk)\n\n    if (this._state === STATE.IDLE) {\n      this._setState()\n    }\n\n    let messages: Array<SdpMessage | RtspMessage | RtpMessage | RtcpMessage> =\n      []\n    let done = false\n\n    while (!done) {\n      let extracted: Array<\n        SdpMessage | RtspMessage | RtpMessage | RtcpMessage\n      > = []\n      switch (this._state) {\n        case STATE.IDLE:\n          break\n        case STATE.INTERLEAVED:\n          extracted = this._parseInterleaved()\n          break\n        case STATE.RTSP:\n          extracted = this._parseRtsp()\n          break\n        default:\n          throw new Error('internal error: unknown state')\n      }\n\n      if (extracted.length > 0) {\n        messages = messages.concat(extracted)\n      } else {\n        done = true\n      }\n\n      this._setState()\n    }\n\n    return messages\n  }\n}\n", "import debug from 'debug'\n\nimport { Transform } from 'stream'\n\nimport { merge } from '../../utils/config'\nimport { getTime } from '../../utils/protocols/ntp'\nimport { isRtcpSR, Rtcp } from '../../utils/protocols/rtcp'\nimport { timestamp } from '../../utils/protocols/rtp'\nimport {\n  connectionEnded,\n  contentBase,\n  contentLocation,\n  range,\n  sequence,\n  sessionId,\n  sessionTimeout,\n  statusCode,\n} from '../../utils/protocols/rtsp'\nimport { Sdp } from '../../utils/protocols/sdp'\nimport { Tube } from '../component'\nimport {\n  Message,\n  MessageType,\n  RtcpMessage,\n  RtpMessage,\n  RtspMessage,\n  SdpMessage,\n} from '../message'\n\nfunction isAbsolute(url: string) {\n  return /^[^:]+:\\/\\//.test(url)\n}\n\nenum STATE {\n  IDLE = 'idle',\n  PLAYING = 'playing',\n  PAUSED = 'paused',\n}\n\nexport enum RTSP_METHOD {\n  OPTIONS = 'OPTIONS',\n  DESCRIBE = 'DESCRIBE',\n  SETUP = 'SETUP',\n  PLAY = 'PLAY',\n  PAUSE = 'PAUSE',\n  TEARDOWN = 'TEARDOWN',\n}\n\nconst MIN_SESSION_TIMEOUT = 5 // minimum timeout for a rtsp session in seconds\n\ninterface Headers {\n  [key: string]: string\n}\n\ninterface Command {\n  method: RTSP_METHOD\n  headers?: Headers\n  uri?: string\n}\n\ninterface MethodHeaders {\n  [key: string]: Headers\n}\n\nexport interface RtspConfig {\n  hostname?: string\n  parameters?: string[]\n  uri?: string\n  headers?: MethodHeaders\n  defaultHeaders?: Headers\n}\n\n// Default RTSP configuration\nconst defaultConfig = (\n  hostname: string = typeof window === 'undefined'\n    ? ''\n    : window.location.hostname,\n  parameters: string[] = []\n): RtspConfig => {\n  const uri = parameters.length > 0\n    ? `rtsp://${hostname}/axis-media/media.amp?${parameters.join('&')}`\n    : `rtsp://${hostname}/axis-media/media.amp`\n\n  return { uri }\n}\n\nexport class RTSPResponseError extends Error {\n  public code: number\n\n  constructor(message: string, code: number) {\n    super(message)\n    this.name = 'RTSPResponseError'\n    this.code = code\n  }\n}\n\n/**\n * A component that sets up a command queue in order to interact with the RTSP\n * server. Allows control over the RTSP session by listening to incoming messages\n * and sending request on the outgoing stream.\n *\n * The following handlers can be set on the component:\n *  - onSdp: will be called when an SDP object is sent with the object as argument\n *  - onPlay: will be called when an RTSP PLAY response is sent with the media range\n *            as argument. The latter is an array [start, stop], where start is \"now\"\n *            (for live) or a time in seconds, and stop is undefined (for live or\n *            ongoing streams) or a time in seconds.\n * @extends {Component}\n */\nexport class RtspSession extends Tube {\n  public uri?: string\n  public headers?: MethodHeaders\n  public defaultHeaders?: Headers\n  public t0?: { [key: number]: number }\n  public n0?: { [key: number]: number }\n  public clockrates?: { [key: number]: number }\n  public startTime?: number\n\n  public onRtcp?: (rtcp: Rtcp) => void\n  public onSdp?: (sdp: Sdp) => void\n  public onError?: (err: RTSPResponseError) => void\n  public onPlay?: (range?: string[]) => void\n\n  public retry?: () => void\n\n  private _outgoingClosed: boolean\n  private _sequence?: number\n  private _callStack?: Command[]\n  private _callHistory?: any[]\n  private _state?: STATE\n  private _waiting?: boolean\n  private _contentBase?: string | null\n  private _contentLocation?: string | null\n  private _sessionId?: string | null\n  private _sessionControlURL: string\n  private _renewSessionInterval?: number | null\n\n  /**\n   * Create a new RTSP session controller component.\n   * @param  [config] Details about the session.\n   * @param  [config.hostname] The RTSP server hostname\n   * @param  [config.parameters] The RTSP URI parameters\n   * @param  [config.uri] The full RTSP URI (overrides any hostname/parameters)\n   * @param  [config.defaultHeaders] Default headers to use (for all methods).\n   * @param  [config.headers] Headers to use (mapped to each method).\n   */\n  constructor(config: RtspConfig = {}) {\n    const { uri, headers, defaultHeaders } = merge(\n      defaultConfig(config.hostname, config.parameters),\n      config\n    )\n\n    const incoming = new Transform({\n      objectMode: true,\n      transform: (msg: Message, _, callback) => {\n        if (msg.type === MessageType.RTSP) {\n          this._onRtsp(msg)\n          callback() // Consumes the RTSP packages\n        } else if (msg.type === MessageType.RTCP) {\n          this._onRtcp(msg)\n          // Execute externally registered SDP handler\n          this.onRtcp && this.onRtcp(msg.rtcp)\n          // Pass SDP forward\n          callback(undefined, msg)\n        } else if (msg.type === MessageType.RTP) {\n          this._onRtp(msg)\n          callback(undefined, msg)\n        } else if (msg.type === MessageType.SDP) {\n          this._onSdp(msg)\n          // Execute externally registered SDP handler\n          this.onSdp && this.onSdp(msg.sdp)\n          // Pass SDP forward\n          callback(undefined, msg)\n        } else {\n          // Not a message we should handle\n          callback(undefined, msg)\n        }\n      },\n    })\n\n    incoming.on('end', () => {\n      // Incoming was ended, assume that outgoing is closed as well\n      this._outgoingClosed = true\n    })\n\n    super(incoming)\n\n    this._outgoingClosed = false\n\n    this._reset()\n    this.update(uri, headers, defaultHeaders)\n\n    this._sessionControlURL = this._controlURL()\n  }\n\n  /**\n   * Update the cached RTSP uri and headers.\n   * @param  uri - The RTSP URI.\n   * @param  headers - Maps commands to headers.\n   * @param  defaultHeaders - Default headers.\n   */\n  update(\n    uri: string | undefined,\n    headers: MethodHeaders = {},\n    defaultHeaders: Headers = {}\n  ) {\n    if (uri === undefined) {\n      throw new Error(\n        'You must supply an uri when creating a RtspSessionComponent'\n      )\n    }\n    this.uri = uri\n    this.defaultHeaders = defaultHeaders\n    this.headers = Object.assign(\n      {\n        [RTSP_METHOD.OPTIONS]: {},\n        [RTSP_METHOD.PLAY]: {},\n        [RTSP_METHOD.SETUP]: { Blocksize: '64000' },\n        [RTSP_METHOD.DESCRIBE]: { Accept: 'application/sdp' },\n        [RTSP_METHOD.PAUSE]: {},\n      },\n      headers\n    )\n  }\n\n  /**\n   * Restore the initial values to the state they were in before any RTSP\n   * connection was made.\n   */\n  _reset() {\n    this._sequence = 1\n    this.retry = () => console.error(\"No request sent, can't retry\")\n    this._callStack = []\n    this._callHistory = []\n    this._state = STATE.IDLE\n    this._waiting = false\n\n    this._contentBase = null\n    this._sessionId = null\n    if (this._renewSessionInterval !== null) {\n      clearInterval(this._renewSessionInterval)\n    }\n    this._renewSessionInterval = null\n\n    this.t0 = undefined\n    this.n0 = undefined\n    this.clockrates = undefined\n  }\n\n  _controlURL(attribute?: string) {\n    if (attribute !== undefined && isAbsolute(attribute)) {\n      return attribute\n    }\n\n    // Not defined or not absolute, we need a base URI\n    const baseURL = this._contentBase ?? this._contentLocation ?? this.uri\n    if (baseURL === null || baseURL === undefined) {\n      throw new Error(\n        'relative or missing control attribute but no base URL available'\n      )\n    }\n    if (attribute === undefined || attribute === '*') {\n      return baseURL\n    }\n    return new URL(attribute, baseURL).href\n  }\n\n  /**\n   * Handles incoming RTSP messages and send the next command in the queue.\n   * @param  msg - An incoming RTSP message.\n   */\n  _onRtsp(msg: RtspMessage) {\n    this._waiting = false\n\n    const status = statusCode(msg.data)\n    const ended = connectionEnded(msg.data)\n    const seq = sequence(msg.data)\n    if (seq === null) {\n      throw new Error('rtsp: expected sequence number')\n    }\n    if (this._callHistory === undefined) {\n      throw new Error('rtsp: internal error')\n    }\n    const method = this._callHistory[seq - 1]\n\n    debug('msl:rtsp:incoming')(`${msg.data}`)\n    if (!this._sessionId && !ended) {\n      // Response on first SETUP\n      this._sessionId = sessionId(msg.data)\n      const _sessionTimeout = sessionTimeout(msg.data)\n      if (_sessionTimeout !== null) {\n        // The server specified that sessions will timeout if not renewed.\n        // In order to keep it alive we need periodically send a RTSP_OPTIONS message\n        if (this._renewSessionInterval !== null) {\n          clearInterval(this._renewSessionInterval)\n        }\n        this._renewSessionInterval = setInterval(\n          () => {\n            this._enqueue({ method: RTSP_METHOD.OPTIONS })\n            this._dequeue()\n          },\n          Math.max(MIN_SESSION_TIMEOUT, _sessionTimeout - 5) * 1000\n        ) as unknown as number\n      }\n    }\n\n    if (!this._contentBase) {\n      this._contentBase = contentBase(msg.data)\n    }\n    if (!this._contentLocation) {\n      this._contentLocation = contentLocation(msg.data)\n    }\n    if (status >= 400) {\n      // TODO: Retry in certain cases?\n      this.onError\n        && this.onError(\n          new RTSPResponseError(msg.data.toString('ascii'), status)\n        )\n    }\n\n    if (method === RTSP_METHOD.PLAY) {\n      // When starting to play, send the actual range to an external handler.\n      this.onPlay && this.onPlay(range(msg.data))\n    }\n\n    if (ended) {\n      debug('msl:rtsp:incoming')(\n        `RTSP Session ${this._sessionId} ended with statusCode: ${status}`\n      )\n      this._sessionId = null\n    }\n\n    this._dequeue()\n  }\n\n  _onRtcp(msg: RtcpMessage) {\n    if (this.t0 === undefined || this.n0 === undefined) {\n      throw new Error('rtsp: internal error')\n    }\n    if (isRtcpSR(msg.rtcp)) {\n      const rtpChannel = msg.channel - 1\n      this.t0[rtpChannel] = msg.rtcp.rtpTimestamp\n      this.n0[rtpChannel] = getTime(msg.rtcp.ntpMost, msg.rtcp.ntpLeast)\n    }\n  }\n\n  _onRtp(msg: RtpMessage) {\n    if (\n      this.t0 === undefined\n      || this.n0 === undefined\n      || this.clockrates === undefined\n    ) {\n      throw new Error('rtsp: internal error')\n    }\n    const rtpChannel = msg.channel\n    const t0 = this.t0[rtpChannel]\n    const n0 = this.n0[rtpChannel]\n    if (typeof t0 !== 'undefined' && typeof n0 !== 'undefined') {\n      const clockrate = this.clockrates[rtpChannel]\n      const t = timestamp(msg.data)\n      // The RTP timestamps are unsigned 32 bit and will overflow\n      // at some point. We can guard against the overflow by ORing with 0,\n      // which will bring any difference back into signed 32-bit domain.\n      const dt = (t - t0) | 0\n      msg.ntpTimestamp = (dt / clockrate) * 1000 + n0\n    }\n  }\n\n  /**\n   * Handles incoming SDP messages, reply with SETUP and optionally PLAY.\n   * @param  msg - An incoming SDP message.\n   */\n  _onSdp(msg: SdpMessage) {\n    this.n0 = {}\n    this.t0 = {}\n    this.clockrates = {}\n\n    this._sessionControlURL = this._controlURL(msg.sdp.session.control)\n\n    msg.sdp.media.forEach((media, index) => {\n      // We should actually be able to handle\n      // non-dynamic payload types, but ignored for now.\n      if (media.rtpmap === undefined) {\n        return\n      }\n      const { clockrate } = media.rtpmap\n\n      const rtp = index * 2\n      const rtcp = rtp + 1\n\n      const uri = media.control === undefined\n        ? this._sessionControlURL\n        : this._controlURL(media.control)\n\n      this._enqueue({\n        method: RTSP_METHOD.SETUP,\n        headers: {\n          Transport: `RTP/AVP/TCP;unicast;interleaved=${rtp}-${rtcp}`,\n        },\n        uri,\n      })\n\n      // TODO: see if we can get rid of this check somehow\n      if (this.clockrates === undefined) {\n        return\n      }\n      this.clockrates[rtp] = clockrate\n    })\n    if (this._state === STATE.PLAYING) {\n      this._enqueue({\n        method: RTSP_METHOD.PLAY,\n        headers: {\n          Range: `npt=${this.startTime || 0}-`,\n        },\n        uri: this._sessionControlURL,\n      })\n    }\n    this._dequeue()\n  }\n\n  /**\n   * Set up command queue in order to start playing, i.e. PLAY optionally\n   * preceeded by OPTIONS/DESCRIBE commands. If not waiting, immediately\n   * start sending.\n   * @param  startTime - Time (seconds) at which to start playing\n   */\n  play(startTime = 0) {\n    if (this._state === STATE.IDLE) {\n      this.startTime = Number(startTime) || 0\n      this._enqueue({ method: RTSP_METHOD.OPTIONS })\n      this._enqueue({ method: RTSP_METHOD.DESCRIBE })\n    } else if (this._state === STATE.PAUSED) {\n      if (this._sessionId === null || this._sessionId === undefined) {\n        throw new Error('rtsp: internal error')\n      }\n      this._enqueue({\n        method: RTSP_METHOD.PLAY,\n        headers: {\n          Session: this._sessionId,\n        },\n        uri: this._sessionControlURL,\n      })\n    }\n    this._state = STATE.PLAYING\n    this._dequeue()\n  }\n\n  /**\n   * Queue a pause command, and send if not waiting.\n   * @return {undefined}\n   */\n  pause() {\n    this._enqueue({ method: RTSP_METHOD.PAUSE })\n    this._state = STATE.PAUSED\n    this._dequeue()\n  }\n\n  /**\n   * End the session if there is one, otherwise just cancel\n   * any outstanding calls on the stack.\n   * @return {undefined}\n   */\n  stop() {\n    if (this._sessionId) {\n      this._enqueue({ method: RTSP_METHOD.TEARDOWN })\n    } else {\n      this._callStack = []\n    }\n    this._state = STATE.IDLE\n    if (this._renewSessionInterval !== null) {\n      clearInterval(this._renewSessionInterval)\n      this._renewSessionInterval = null\n    }\n    this._dequeue()\n  }\n\n  /**\n   * Pushes an RTSP request onto the outgoing stream.\n   * @param  cmd - The details about the command to send.\n   */\n  send(cmd: Command) {\n    const { method, headers, uri } = cmd\n    if (method === undefined) {\n      throw new Error('missing method when send request')\n    }\n    this._waiting = true\n    this.retry = this.send.bind(this, cmd)\n\n    if (\n      this._sequence === undefined\n      || this.headers === undefined\n      || this._callHistory === undefined\n    ) {\n      throw new Error('rtsp: internal error')\n    }\n    const message = Object.assign(\n      {\n        type: MessageType.RTSP,\n        uri: uri || this._sessionControlURL,\n        data: Buffer.alloc(0), // data is a mandatory field. Not used by session -> parser messages.\n      },\n      { method, headers },\n      {\n        headers: Object.assign(\n          { CSeq: this._sequence++ },\n          this.defaultHeaders, // default headers (for all methods)\n          this.headers[method], // preset headers for this method\n          headers // headers that came with the invokation\n        ),\n      }\n    )\n    this._sessionId && (message.headers.Session = this._sessionId)\n    this._callHistory.push(method)\n    if (!this._outgoingClosed) {\n      this.outgoing.push(message)\n    } else {\n      // If the socket is closed, dont attempt to send any data\n      debug('msl:rtsp:outgoing')(`Unable to send ${method}, connection closed`)\n    }\n  }\n\n  /**\n   * Push a command onto the call stack.\n   * @param  cmd - The command to queue\n   */\n  _enqueue(cmd: Command) {\n    if (this._callStack === undefined) {\n      throw new Error('rtsp: internal error')\n    }\n    this._callStack.push(cmd)\n  }\n\n  /**\n   * If possible, send the next command on the call stack.\n   */\n  _dequeue() {\n    if (this._callStack === undefined) {\n      throw new Error('rtsp: internal error')\n    }\n    if (!this._waiting && this._callStack.length > 0) {\n      const cmd = this._callStack.shift()\n      if (cmd !== undefined) {\n        this.send(cmd)\n      }\n    }\n  }\n}\n", "export interface ConfigOptions {\n  [key: string]: any\n}\n\n/**\n * Flat merge of objects, ignoring undefined override values.\n * @param  template - The object with default values\n * @param  override - The object with override values.\n * @return The template object with override merged in.\n */\nexport const merge = <T extends ConfigOptions>(template: T, override: T): T => {\n  let cleanOverride\n  if (override !== undefined) {\n    if (typeof override !== 'object') {\n      throw new Error('merge expects override to be an object!')\n    } else {\n      cleanOverride = Object.keys(override).reduce(\n        (acc: ConfigOptions, key) => {\n          if (override[key] !== undefined) {\n            acc[key] = override[key]\n          }\n          return acc\n        },\n        {}\n      )\n    }\n  }\n  return Object.assign({}, template, cleanOverride)\n}\n", "// NTP is offset from 01.01.1900\nconst NTP_UNIX_EPOCH_OFFSET = Date.UTC(1900, 0, 1)\n\n// Convenience types\nexport type seconds = number\nexport type milliSeconds = number\nexport type NtpSeconds = number\nexport type NtpMilliSeconds = number\n\n/**\n * Convert NTP time to milliseconds since January 1, 1970, 00:00:00 UTC (Unix Epoch)\n * @param ntpMost - Seconds since 01.01.1900\n * @param ntpLeast - Fractions since 01.01.1900\n */\nexport function getTime(ntpMost: number, ntpLeast: number): NtpMilliSeconds {\n  const ntpMilliSeconds = (ntpMost + ntpLeast / 0x100000000) * 1000\n  return NTP_UNIX_EPOCH_OFFSET + ntpMilliSeconds\n}\n", "import debug from 'debug'\n\nimport { Readable, Writable } from 'stream'\n\nimport { Source } from '../component'\nimport { MessageType } from '../message'\n\nimport { openWebSocket, WSConfig } from './openwebsocket'\n\n// Named status codes for CloseEvent, see:\n// https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\nconst CLOSE_GOING_AWAY = 1001\n\nexport class WSSource extends Source {\n  public onServerClose?: () => void\n\n  /**\n   * Create a WebSocket component.\n   *\n   * The constructor sets up two streams and connects them to the socket as\n   * soon as the socket is available (and open).\n   *\n   * @param socket - an open WebSocket.\n   */\n  constructor(socket: WebSocket) {\n    if (socket === undefined) {\n      throw new Error('socket argument missing')\n    }\n\n    /**\n     * Set up an incoming stream and attach it to the socket.\n     * @type {Readable}\n     */\n    const incoming = new Readable({\n      objectMode: true,\n      read() {\n        //\n      },\n    })\n\n    socket.onmessage = (msg) => {\n      const buffer = Buffer.from(msg.data)\n      if (!incoming.push({ data: buffer, type: MessageType.RAW })) {\n        // Something happened down stream that it is no longer processing the\n        // incoming data, and the stream buffer got full. In this case it is\n        // best to just close the socket instead of throwing away data in the\n        // hope that the situation will get resolved.\n        if (socket.readyState === WebSocket.OPEN) {\n          debug('msl:websocket:incoming')('downstream frozen')\n          socket.close()\n        }\n      }\n    }\n\n    // When an error is sent on the incoming stream, close the socket.\n    incoming.on('error', (e) => {\n      console.warn('closing socket due to incoming error', e)\n      socket.close()\n    })\n\n    /**\n     * Set up outgoing stream and attach it to the socket.\n     * @type {Writable}\n     */\n    const outgoing = new Writable({\n      objectMode: true,\n      write(msg, encoding, callback) {\n        try {\n          socket.send(msg.data)\n        } catch (e) {\n          console.warn('message lost during send:', msg)\n        }\n        callback()\n      },\n    })\n\n    // When an error happens on the outgoing stream, just warn.\n    outgoing.on('error', (e) => {\n      console.warn('error during websocket send, ignoring:', e)\n    })\n\n    // When there is no more data going to be written, close!\n    outgoing.on('finish', () => {\n      debug('msl:websocket:outgoing')('finish')\n      if (socket.readyState !== WebSocket.CLOSED) {\n        socket.close()\n      }\n    })\n\n    /**\n     * Handler for when WebSocket is CLOSED\n     * @param  e - The event associated with a close\n     * @param  e.code The status code sent by the server\n     *   Possible codes are documented here:\n     *   https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n     */\n    socket.onclose = (e) => {\n      debug('msl:websocket:close')(`${e.code}`)\n      if (e.code === CLOSE_GOING_AWAY) {\n        this.onServerClose && this.onServerClose()\n      }\n      // Terminate the streams.\n      incoming.push(null)\n      outgoing.end()\n    }\n\n    /**\n     * initialize the component.\n     */\n    super(incoming, outgoing)\n  }\n\n  /**\n   * Expose websocket opener as a class method that returns a promise which\n   * resolves with a new WebSocketComponent.\n   */\n  static async open(config?: WSConfig) {\n    return await openWebSocket(config).then((socket) => new WSSource(socket))\n  }\n}\n", "import { merge } from '../../utils/config'\n\n// Time in milliseconds we want to wait for a websocket to open\nconst WEBSOCKET_TIMEOUT = 10007\n\nexport interface WSConfig {\n  host?: string\n  scheme?: string\n  uri?: string\n  tokenUri?: string\n  protocol?: string\n  timeout?: number\n}\n\n// Default configuration\nconst defaultConfig = (\n  host: string = window.location.host,\n  scheme: string = window.location.protocol\n): WSConfig => {\n  const wsScheme = scheme === 'https:' ? 'wss:' : 'ws:'\n\n  return {\n    uri: `${wsScheme}//${host}/rtsp-over-websocket`,\n    tokenUri: `${scheme}//${host}/axis-cgi/rtspwssession.cgi`,\n    protocol: 'binary',\n    timeout: WEBSOCKET_TIMEOUT,\n  }\n}\n\n/**\n * Open a new WebSocket, fallback to token-auth on failure and retry.\n * @param  [config]  WebSocket configuration.\n * @param  [config.host]  Specify different host\n * @param  [config.sheme]  Specify different scheme.\n * @param  [config.uri]  Full uri for websocket connection\n * @param  [config.tokenUri]  Full uri for token API\n * @param  [config.protocol] Websocket protocol\n * @param  [config.timeout] Websocket connection timeout\n */\nexport const openWebSocket = async (\n  config: WSConfig = {}\n): Promise<WebSocket> => {\n  const { uri, tokenUri, protocol, timeout } = merge(\n    defaultConfig(config.host, config.scheme),\n    config\n  )\n\n  if (uri === undefined) {\n    throw new Error('ws: internal error')\n  }\n\n  return await new Promise((resolve, reject) => {\n    try {\n      const ws = new WebSocket(uri, protocol)\n      const countdown = setTimeout(() => {\n        clearTimeout(countdown)\n        if (ws.readyState === WebSocket.CONNECTING) {\n          ws.onerror = null\n          reject(new Error('websocket connection timed out'))\n        }\n      }, timeout)\n      ws.binaryType = 'arraybuffer'\n      ws.onerror = (originalError: Event) => {\n        clearTimeout(countdown)\n        // try fetching an authentication token\n        function onLoadToken(this: XMLHttpRequest) {\n          if (this.status >= 400) {\n            console.warn('failed to load token', this.status, this.responseText)\n            reject(originalError)\n            return\n          }\n          const token = this.responseText.trim()\n          // We have a token! attempt to open a WebSocket again.\n          const newUri = `${uri}?rtspwssession=${token}`\n          const ws2 = new WebSocket(newUri, protocol)\n          ws2.binaryType = 'arraybuffer'\n          ws2.onerror = (err) => {\n            reject(err)\n          }\n          ws2.onopen = () => resolve(ws2)\n        }\n        const request = new XMLHttpRequest()\n        request.addEventListener('load', onLoadToken)\n        request.addEventListener('error', (err) => {\n          console.warn('failed to get token')\n          reject(err)\n        })\n        request.addEventListener('abort', () => reject(originalError))\n        request.open('GET', `${tokenUri}?${Date.now()}`)\n        try {\n          request.send()\n        } catch (error) {\n          reject(originalError)\n        }\n      }\n      ws.onopen = () => {\n        clearTimeout(countdown)\n        resolve(ws)\n      }\n    } catch (e) {\n      reject(e)\n    }\n  })\n}\n", "export * from './pipeline'\n\nexport * from './rtsp-mjpeg-pipeline'\nexport * from './rtsp-mp4-pipeline'\nexport * from './rtsp-pipeline'\n\nexport * from './html5-canvas-pipeline'\nexport * from './html5-video-metadata-pipeline'\nexport * from './html5-video-pipeline'\nexport * from './metadata-pipeline'\nexport * from './ws-sdp-pipeline'\n\nexport * from './http-mse-pipeline'\n", "import { Component, Sink, Source, Tube } from '../components/component'\n\n/**\n * Pipeline\n *\n * A pipeline is a linked list of components with some convenience methods to\n * handle inserting or removing components from the linked list.\n *\n * A internal set keeps track of which components the pipeline contains, while\n * any order is completely determined by the component's connectedness.\n */\nexport class Pipeline {\n  public firstComponent: Component\n  public lastComponent: Component\n\n  private _set: Set<Component>\n  /**\n   * @param components - The components of the pipeline in order.\n   */\n  constructor(...components: Component[]) {\n    const [car, ...cdr] = components\n\n    this._set = new Set(components)\n\n    this.firstComponent = car\n    this.lastComponent = cdr.reduce((last, component) => {\n      return last.connect(component as Tube | Sink)\n    }, car)\n  }\n\n  /**\n   * @param components - The components of the pipeline in order.\n   */\n  init(...components: Component[]) {\n    const [car, ...cdr] = components\n\n    this._set = new Set(components)\n\n    this.firstComponent = car\n    this.lastComponent = cdr.reduce((last, component) => {\n      return last.connect(component as Tube | Sink)\n    }, car)\n  }\n\n  /**\n   * Inserts a component into the pipeline.\n   *\n   * @param component - Tube or Source behind which to insert a new component.\n   * @param component - Tube or Sink to insert.\n   */\n  insertAfter(component: Source | Tube, newComponent: Tube | Sink) {\n    if (!this._set.has(component)) {\n      throw new Error('insertion point not part of pipeline')\n    }\n    if (this._set.has(newComponent)) {\n      throw new Error('new component already in the pipeline')\n    }\n\n    const cdr = component.next\n    if (cdr === null) {\n      component.connect(newComponent)\n      this.lastComponent = newComponent\n    } else {\n      component.disconnect()\n      component.connect(newComponent).connect(cdr)\n    }\n    this._set.add(newComponent)\n\n    return this\n  }\n\n  /**\n   * Inserts a component into the pipeline.\n   *\n   * @param component - Tube or Sink in front of which to insert a new component.\n   * @param component - Tube or Source to insert.\n   */\n  insertBefore(component: Tube | Sink, newComponent: Source | Tube) {\n    if (!this._set.has(component)) {\n      throw new Error('insertion point not part of pipeline')\n    }\n    if (this._set.has(newComponent)) {\n      throw new Error('new component already in the pipeline')\n    }\n\n    const car = component.prev\n    if (car === null) {\n      newComponent.connect(component)\n      this.firstComponent = newComponent\n    } else {\n      car.disconnect()\n      car.connect(newComponent as Tube).connect(component)\n    }\n    this._set.add(newComponent)\n\n    return this\n  }\n\n  /**\n   * Removes a component from the pipeline.\n   *\n   * @param component - Component to remove.\n   */\n  remove(component: Component) {\n    if (!this._set.has(component)) {\n      throw new Error('component not part of pipeline')\n    }\n\n    const car = component.prev\n    const cdr = component.next\n    if (car === null && cdr === null) {\n      throw new Error('cannot remove last component')\n    } else if (car === null && cdr !== null) {\n      component.disconnect()\n      this.firstComponent = cdr\n    } else if (car !== null && cdr === null) {\n      car.disconnect()\n      this.lastComponent = car\n    } else if (car !== null && cdr !== null) {\n      car.disconnect()\n      // FIXME: upgrade to Typescript 4.5.5\n      // infers component as \"never\" in this case.\n      // Try to revert this with newer TS versions.\n      const cmp = component as unknown as Component\n      cmp.disconnect()\n      car.connect(cdr)\n    }\n    this._set.delete(component)\n\n    return this\n  }\n\n  /**\n   * Inserts a component at the end of the pipeline.\n   *\n   * @param component - Tube or Sink to insert.\n   */\n  append(...components: Array<Tube | Sink>) {\n    components.forEach((component) => {\n      this.insertAfter(this.lastComponent as Source | Tube, component)\n    })\n\n    return this\n  }\n\n  /**\n   * Inserts a component at the beginning of the pipeline.\n   *\n   * @param component - Tube or Source to insert.\n   */\n  prepend(...components: Array<Source | Tube>) {\n    components.forEach((component) => {\n      this.insertBefore(this.firstComponent as Tube | Sink, component)\n    })\n\n    return this\n  }\n}\n", "import { RtspParser } from '../components/rtsp-parser'\nimport { RtspConfig, RtspSession } from '../components/rtsp-session'\nimport { Sdp } from '../utils/protocols/sdp'\n\nimport { Pipeline } from './pipeline'\n\n/**\n * RtspPipeline\n *\n * A pipeline that converts interleaved RTSP/RTP into a series of RTP, RTCP, and\n * RTSP packets.  The pipeline exposes the RTSP session component as\n * `this.session`, and wraps its play, pause and stop methods.\n *\n * The following handlers can be defined:\n * - onSdp: called when the session descript protocol is available, with the SDP\n *   object as argument\n * - onPlay: called when a response from the PLAY command arrives, with the play\n *   range as argument\n */\nexport class RtspPipeline extends Pipeline {\n  public onSdp?: (sdp: Sdp) => void\n  public onPlay?: (range: string[] | undefined) => void\n  public rtsp: RtspSession\n\n  constructor(rtspConfig?: RtspConfig) {\n    const rtspParser = new RtspParser()\n    const rtspSession = new RtspSession(rtspConfig)\n\n    rtspSession.onSdp = (sdp) => {\n      this.onSdp && this.onSdp(sdp)\n    }\n\n    rtspSession.onPlay = (range) => {\n      this.onPlay && this.onPlay(range)\n    }\n\n    super(rtspParser, rtspSession)\n\n    // Expose session for external use\n    this.rtsp = rtspSession\n  }\n}\n", "import { JPEGDepay } from '../components/jpegdepay'\nimport { RtspConfig } from '../components/rtsp-session'\n\nimport { RtspPipeline } from './rtsp-pipeline'\n\n/**\n * RtspMjpegPipeline\n *\n * A pipeline that can process JPEG RTP data, and converts it to streaming\n * motion JPEG format (sequence of JPEG images).\n *\n * The following handlers can be defined:\n * - all handlers from the RtspPipeline\n */\nexport class RtspMjpegPipeline extends RtspPipeline {\n  constructor(rtspConfig?: RtspConfig) {\n    super(rtspConfig)\n\n    const jpegDepay = new JPEGDepay()\n\n    this.append(jpegDepay)\n  }\n}\n", "import { AACDepay } from '../components/aacdepay'\nimport { H264Depay } from '../components/h264depay'\nimport { Mp4Muxer } from '../components/mp4muxer'\nimport { RtspConfig } from '../components/rtsp-session'\n\nimport { RtspPipeline } from './rtsp-pipeline'\n\n/**\n * RtspMp4Pipeline\n *\n * A pipeline that can process H264/AAC RTP data, and converts it to streaming\n * MP4 format (ISO BMFF bytestream).\n *\n * The following handlers can be defined:\n * - all handlers from the RtspPipeline\n * - `onSync`: called when the NTP time of the first frame is known, with the\n *   timestamp as argument (the timestamp is UNIX milliseconds)\n */\nexport class RtspMp4Pipeline extends RtspPipeline {\n  public onSync?: (ntpPresentationTime: number) => void\n\n  private readonly _mp4Muxer: Mp4Muxer\n\n  constructor(rtspConfig?: RtspConfig) {\n    super(rtspConfig)\n\n    const h264Depay = new H264Depay()\n    const aacDepay = new AACDepay()\n    const mp4Muxer = new Mp4Muxer()\n\n    mp4Muxer.onSync = (ntpPresentationTime) => {\n      this.onSync && this.onSync(ntpPresentationTime)\n    }\n\n    this.append(h264Depay, aacDepay, mp4Muxer)\n\n    this._mp4Muxer = mp4Muxer\n  }\n\n  get bitrate() {\n    return this._mp4Muxer.bitrate\n  }\n\n  get framerate() {\n    return this._mp4Muxer.framerate\n  }\n}\n", "// https://tools.ietf.org/html/rfc2617#section-3.2.1\nimport { Md5 as MD5 } from 'ts-md5'\n\nimport { ChallengeParams } from './www-authenticate'\n\nfunction md5Hash(s: string): string {\n  const hash = new MD5().appendStr(s).end()\n  if (hash === undefined) {\n    throw new Error('empty MD5 hash')\n  }\n  return hash.toString()\n}\n\nexport class DigestAuth {\n  private readonly realm: string\n  private readonly nonce: string\n  private readonly opaque?: string\n  private readonly algorithm?: 'md5' | 'md5-sess'\n  private readonly qop?: 'auth' | 'auth-int'\n  private readonly username: string\n\n  private readonly ha1Base: string\n  private count: number\n\n  constructor(params: ChallengeParams, username: string, password: string) {\n    const realm = params.get('realm')\n    if (realm === undefined) {\n      throw new Error('no realm in digest challenge')\n    }\n    this.realm = realm\n\n    this.ha1Base = md5Hash(`${username}:${realm}:${password}`)\n\n    const nonce = params.get('nonce')\n    if (nonce === undefined) {\n      throw new Error('no nonce in digest challenge')\n    }\n    this.nonce = nonce\n\n    this.opaque = params.get('opaque')\n\n    const algorithm = params.get('algorithm')\n    if (algorithm !== undefined) {\n      if (algorithm === 'md5') {\n        this.algorithm = 'md5'\n      } else if (algorithm === 'md5-sess') {\n        this.algorithm = 'md5-sess'\n      }\n    } else {\n      this.algorithm = 'md5'\n    }\n\n    const qop = params.get('qop')\n    if (qop !== undefined) {\n      const possibleQops = qop.split(',').map((qopType) => qopType.trim())\n      if (possibleQops.some((qopValue) => qopValue === 'auth')) {\n        this.qop = 'auth'\n      } else if (possibleQops.some((qopValue) => qopValue === 'auth-int')) {\n        this.qop = 'auth-int'\n      }\n    }\n\n    this.count = 0\n    this.username = username\n  }\n\n  nc = () => {\n    ;++this.count\n    return this.count.toString(16).padStart(8, '0')\n  }\n\n  cnonce = () => {\n    return new Array(4)\n      .fill(0)\n      .map(() => Math.floor(Math.random() * 256))\n      .map((n) => n.toString(16))\n      .join('')\n  }\n\n  ha1 = (cnonce: string): string => {\n    let ha1 = this.ha1Base\n    if (this.algorithm === 'md5-sess') {\n      ha1 = md5Hash(`${ha1}:${this.nonce}:${cnonce}`)\n    }\n    return ha1\n  }\n\n  ha2 = (method: string, uri: string, body = ''): string => {\n    let ha2 = md5Hash(`${method}:${uri}`)\n    if (this.algorithm === 'md5-sess') {\n      const hbody = md5Hash(body)\n      ha2 = md5Hash(`${method}:${uri}:${hbody}`)\n    }\n    return ha2\n  }\n\n  authorization = (method = 'GET', uri = '', body?: string): string => {\n    // Increase count\n    const nc = this.nc()\n    const cnonce = this.cnonce()\n\n    const ha1 = this.ha1(cnonce)\n    const ha2 = this.ha2(method, uri, body)\n\n    const response = this.qop === undefined\n      ? md5Hash(`${ha1}:${this.nonce}:${ha2}`)\n      : md5Hash(`${ha1}:${this.nonce}:${nc}:${cnonce}:${this.qop}:${ha2}`)\n\n    const authorizationParams: string[] = []\n    authorizationParams.push(`username=\"${this.username}\"`)\n    authorizationParams.push(`realm=\"${this.realm}\"`)\n    authorizationParams.push(`nonce=\"${this.nonce}\"`)\n    authorizationParams.push(`uri=\"${uri}\"`)\n    if (this.qop !== undefined) {\n      authorizationParams.push(`qop=${this.qop}`)\n      authorizationParams.push(`nc=${nc}`)\n      authorizationParams.push(`cnonce=\"${cnonce}\"`)\n    }\n    authorizationParams.push(`response=\"${response}\"`)\n    if (this.opaque !== undefined) {\n      authorizationParams.push(`opaque=\"${this.opaque}\"`)\n    }\n    return `Digest ${authorizationParams.join(', ')}`\n  }\n}\n", "export type ChallengeParams = Map<string, string>\n\nexport interface Challenge {\n  type: string\n  params: ChallengeParams\n}\n\nexport const parseWWWAuthenticate = (header: string): Challenge => {\n  const [, type, ...challenge] = header.split(' ')\n\n  const pairs: Array<[string, string]> = []\n  const re = /\\s*([^=]+)=\"([^\"]*)\",?/gm\n  let match\n  do {\n    match = re.exec(challenge.join(' '))\n    if (match !== null) {\n      const [, key, value] = match\n      pairs.push([key, value])\n    }\n  } while (match !== null)\n\n  const params = new Map(pairs)\n\n  return { type: type.toLowerCase(), params }\n}\n", "import { merge } from '../../utils/config'\nimport { statusCode } from '../../utils/protocols/rtsp'\nimport { Tube } from '../component'\nimport { Message, MessageType, RtspMessage } from '../message'\nimport { createTransform } from '../messageStreams'\n\nimport { DigestAuth } from './digest'\nimport { parseWWWAuthenticate } from './www-authenticate'\n\nconst UNAUTHORIZED = 401\n\nexport interface AuthConfig {\n  username?: string\n  password?: string\n}\n\nconst DEFAULT_CONFIG = {\n  username: 'root',\n  password: 'pass',\n}\n\n/*\n * This component currently only supports Basic authentication\n * It should be placed between the RTSP parser and the RTSP Session.\n */\n\nexport class Auth extends Tube {\n  constructor(config: AuthConfig = {}) {\n    const { username, password } = merge(DEFAULT_CONFIG, config)\n    if (username === undefined || password === undefined) {\n      throw new Error('need username and password')\n    }\n\n    let lastSentMessage: RtspMessage\n    let authHeader: string\n\n    const outgoing = createTransform(function(\n      msg: Message,\n      encoding,\n      callback\n    ) {\n      if (msg.type === MessageType.RTSP) {\n        lastSentMessage = msg\n        if (authHeader && msg.headers) {\n          msg.headers.Authorization = authHeader\n        }\n      }\n\n      callback(undefined, msg)\n    })\n\n    const incoming = createTransform(function(\n      msg: Message,\n      encoding,\n      callback\n    ) {\n      if (\n        msg.type === MessageType.RTSP\n        && statusCode(msg.data) === UNAUTHORIZED\n      ) {\n        const headers = msg.data.toString().split('\\n')\n        const wwwAuth = headers.find((header) => /WWW-Auth/i.test(header))\n        if (wwwAuth === undefined) {\n          throw new Error('cannot find WWW-Authenticate header')\n        }\n        const challenge = parseWWWAuthenticate(wwwAuth)\n        if (challenge.type === 'basic') {\n          authHeader = `Basic ${\n            Buffer.from(`${username}:${password}`).toString(\n              'base64'\n            )\n          }`\n        } else if (challenge.type === 'digest') {\n          const digest = new DigestAuth(challenge.params, username, password)\n          authHeader = digest.authorization(\n            lastSentMessage.method,\n            lastSentMessage.uri\n          )\n        } else {\n          // unkown authentication type, give up\n          return\n        }\n\n        // Retry last RTSP message\n        // Write will fire our outgoing transform function.\n        outgoing.write(lastSentMessage, () => callback())\n      } else {\n        // Not a message we should handle\n        callback(undefined, msg)\n      }\n    })\n\n    super(incoming, outgoing)\n  }\n}\n", "import { Auth, AuthConfig } from '../components/auth'\nimport { CanvasSink } from '../components/canvas'\nimport { RtspConfig } from '../components/rtsp-session'\nimport { WSSource } from '../components/ws-source'\nimport { WSConfig } from '../components/ws-source/openwebsocket'\n\nimport { RtspMjpegPipeline } from './rtsp-mjpeg-pipeline'\n\nexport interface Html5CanvasConfig {\n  ws?: WSConfig\n  rtsp?: RtspConfig\n  mediaElement: HTMLCanvasElement\n  auth?: AuthConfig\n}\n\n/**\n * Html5CanvasPipeline\n *\n * A pipeline that connects to an RTSP server over a WebSocket connection and\n * can process JPEG RTP data to produce an motion JPEG data stream that is sent\n * to a HTML canvas element.\n *\n * Handlers that can be set on the pipeline:\n * - all handlers inherited from the RtspMjpegPipeline\n * - `onSync`: called when the NTP time of the first frame is known, with the\n *   timestamp as argument (the timestamp is UNIX milliseconds)\n * - `onServerClose`: called when the WebSocket server closes the connection\n *   (only then, not when the connection is closed in a different way)\n */\nexport class Html5CanvasPipeline extends RtspMjpegPipeline {\n  public onCanplay?: () => void\n  public onSync?: (ntpPresentationTime: number) => void\n  public onServerClose?: () => void\n  public ready: Promise<void>\n\n  private _src?: WSSource\n  private readonly _sink: CanvasSink\n\n  constructor(config: Html5CanvasConfig) {\n    const {\n      ws: wsConfig,\n      rtsp: rtspConfig,\n      mediaElement,\n      auth: authConfig,\n    } = config\n\n    super(rtspConfig)\n\n    if (authConfig) {\n      const auth = new Auth(authConfig)\n      this.insertBefore(this.rtsp, auth)\n    }\n\n    const canvasSink = new CanvasSink(mediaElement)\n    canvasSink.onCanplay = () => {\n      canvasSink.play()\n      this.onCanplay && this.onCanplay()\n    }\n    canvasSink.onSync = (ntpPresentationTime) => {\n      this.onSync && this.onSync(ntpPresentationTime)\n    }\n    this.append(canvasSink)\n    this._sink = canvasSink\n\n    const waitForWs = WSSource.open(wsConfig)\n    this.ready = waitForWs.then((wsSource) => {\n      wsSource.onServerClose = () => {\n        this.onServerClose && this.onServerClose()\n      }\n      this.prepend(wsSource)\n      this._src = wsSource\n    })\n  }\n\n  close() {\n    this.rtsp.stop()\n    this._src && this._src.outgoing.end()\n  }\n\n  get currentTime() {\n    return this._sink.currentTime\n  }\n\n  play() {\n    return this._sink.play()\n  }\n\n  pause() {\n    return this._sink.pause()\n  }\n\n  get bitrate() {\n    return this._sink.bitrate\n  }\n\n  get framerate() {\n    return this._sink.framerate\n  }\n}\n", "import { Auth, AuthConfig } from '../components/auth'\nimport { MseSink } from '../components/mse'\nimport { RtspConfig } from '../components/rtsp-session'\nimport { WSSource } from '../components/ws-source'\nimport { WSConfig } from '../components/ws-source/openwebsocket'\nimport { MediaTrack } from '../utils/protocols/isom'\n\nimport { RtspMp4Pipeline } from './rtsp-mp4-pipeline'\n\nexport interface Html5VideoConfig {\n  ws?: WSConfig\n  rtsp?: RtspConfig\n  mediaElement: HTMLVideoElement\n  auth?: AuthConfig\n}\n\n/*\n * Html5VideoPipeline\n *\n * A pipeline that connects to an RTSP server over a WebSocket connection and\n * can process H.264/AAC RTP data to produce an MP4 data stream that is sent to\n * a HTML video element.\n *\n * Handlers that can be set on the pipeline:\n * - all handlers inherited from the RtspMp4Pipeline\n * - `onServerClose`: called when the WebSocket server closes the connection\n *   (only then, not when the connection is closed in a different way)\n */\nexport class Html5VideoPipeline extends RtspMp4Pipeline {\n  public onSourceOpen?: (mse: MediaSource, tracks: MediaTrack[]) => void\n  public onServerClose?: () => void\n  public ready: Promise<void>\n  public tracks?: MediaTrack[]\n\n  private _src?: WSSource\n  private readonly _sink: MseSink\n\n  constructor(config: Html5VideoConfig) {\n    const {\n      ws: wsConfig,\n      rtsp: rtspConfig,\n      mediaElement,\n      auth: authConfig,\n    } = config\n\n    super(rtspConfig)\n\n    if (authConfig) {\n      const auth = new Auth(authConfig)\n      this.insertBefore(this.rtsp, auth)\n    }\n\n    const mseSink = new MseSink(mediaElement)\n    mseSink.onSourceOpen = (mse, tracks) => {\n      this.tracks = tracks\n      this.onSourceOpen && this.onSourceOpen(mse, tracks)\n    }\n    this.append(mseSink)\n    this._sink = mseSink\n\n    const waitForWs = WSSource.open(wsConfig)\n    this.ready = waitForWs.then((wsSource) => {\n      wsSource.onServerClose = () => {\n        this.onServerClose && this.onServerClose()\n      }\n      this.prepend(wsSource)\n      this._src = wsSource\n    })\n  }\n\n  close() {\n    this.rtsp.stop()\n    this._src && this._src.outgoing.end()\n  }\n\n  get currentTime() {\n    return this._sink.currentTime\n  }\n\n  async play() {\n    return await this._sink.play()\n  }\n\n  pause() {\n    return this._sink.pause()\n  }\n}\n", "import { Tube } from '../components/component'\nimport { MessageType, XmlMessage } from '../components/message'\nimport { ONVIFDepay } from '../components/onvifdepay'\n\nimport { Html5VideoConfig, Html5VideoPipeline } from './html5-video-pipeline'\n\nexport interface Html5VideoMetadataConfig extends Html5VideoConfig {\n  metadataHandler: (msg: XmlMessage) => void\n}\n\n/*\n * Html5VideoPipeline\n *\n * A pipeline that connects to an RTSP server over a WebSocket connection and\n * can process H.264/AAC RTP data to produce an MP4 data stream that is sent to\n * a HTML video element.  Additionally, this pipeline passes XML metadata sent\n * in the same stream to a separate handler.\n *\n * Handlers that can be set on the pipeline:\n * - all handlers inherited from the Html5VideoPipeline\n */\nexport class Html5VideoMetadataPipeline extends Html5VideoPipeline {\n  constructor(config: Html5VideoMetadataConfig) {\n    const { metadataHandler } = config\n\n    super(config)\n\n    const onvifDepay = new ONVIFDepay()\n    this.insertAfter(this.rtsp, onvifDepay)\n\n    const onvifHandlerPipe = Tube.fromHandlers((msg) => {\n      if (msg.type === MessageType.XML) {\n        metadataHandler(msg)\n      }\n    }, undefined)\n    this.insertAfter(onvifDepay, onvifHandlerPipe)\n  }\n}\n", "import { Sink } from '../components/component'\nimport { MessageType, XmlMessage } from '../components/message'\nimport { ONVIFDepay } from '../components/onvifdepay'\nimport { RtspConfig } from '../components/rtsp-session'\nimport { WSSource } from '../components/ws-source'\nimport { WSConfig } from '../components/ws-source/openwebsocket'\n\nimport { RtspPipeline } from './rtsp-pipeline'\n\n// Default configuration for XML event stream\nconst DEFAULT_RTSP_PARAMETERS = {\n  parameters: ['audio=0', 'video=0', 'event=on', 'ptz=all'],\n}\n\nexport interface WsRtspMetadataConfig {\n  ws?: WSConfig\n  rtsp?: RtspConfig\n  metadataHandler: (msg: XmlMessage) => void\n}\n\n/*\n * MetadataPipeline\n *\n * A pipeline that connects to an RTSP server over a WebSocket connection and\n * can process XML RTP data and calls a handler to process the XML messages.\n *\n * Handlers that can be set on the pipeline:\n * - all handlers inherited from the RtspPipeline\n * - `onServerClose`: called when the WebSocket server closes the connection\n *   (only then, not when the connection is closed in a different way)\n */\nexport class MetadataPipeline extends RtspPipeline {\n  public onServerClose?: () => void\n  public ready: Promise<void>\n\n  private _src?: WSSource\n\n  constructor(config: WsRtspMetadataConfig) {\n    const { ws: wsConfig, rtsp: rtspConfig, metadataHandler } = config\n\n    super(Object.assign({}, DEFAULT_RTSP_PARAMETERS, rtspConfig))\n\n    const onvifDepay = new ONVIFDepay()\n    this.append(onvifDepay)\n    const handlerSink = Sink.fromHandler((msg) => {\n      if (msg.type === MessageType.XML) {\n        metadataHandler(msg)\n      }\n    })\n    this.append(handlerSink)\n\n    const waitForWs = WSSource.open(wsConfig)\n    this.ready = waitForWs.then((wsSource) => {\n      wsSource.onServerClose = () => {\n        this.onServerClose && this.onServerClose()\n      }\n      this.prepend(wsSource)\n      this._src = wsSource\n    })\n  }\n\n  close() {\n    this._src && this._src.outgoing.end()\n  }\n}\n", "import { Auth, AuthConfig } from '../components/auth'\nimport { RTSP_METHOD, RtspConfig } from '../components/rtsp-session'\nimport { WSSource } from '../components/ws-source'\nimport { WSConfig } from '../components/ws-source/openwebsocket'\nimport { Sdp } from '../utils/protocols'\n\nimport { RtspPipeline } from './rtsp-pipeline'\n\nexport interface TransformConfig {\n  ws?: WSConfig\n  rtsp?: RtspConfig\n  auth?: AuthConfig\n}\n\n/**\n * WsSdpPipeline\n *\n * Pipeline requesting an SDP object from an RTSP server and then\n * immediately tears down the RTSP session.\n */\nexport class WsSdpPipeline extends RtspPipeline {\n  public onServerClose?: () => void\n  public ready: Promise<void>\n\n  private _src?: WSSource\n\n  constructor(config: TransformConfig) {\n    const { ws: wsConfig, rtsp: rtspConfig, auth: authConfig } = config\n\n    super(rtspConfig)\n\n    if (authConfig) {\n      const auth = new Auth(authConfig)\n      this.insertBefore(this.rtsp, auth)\n    }\n\n    const waitForWs = WSSource.open(wsConfig)\n    this.ready = waitForWs.then((wsSource) => {\n      wsSource.onServerClose = () => {\n        this.onServerClose && this.onServerClose()\n      }\n      this.prepend(wsSource)\n      this._src = wsSource\n    })\n  }\n\n  close() {\n    this._src && this._src.outgoing.end()\n  }\n\n  get sdp() {\n    return this.ready.then(async () => {\n      const sdpPromise = new Promise<Sdp>((resolve) => {\n        this.rtsp.onSdp = resolve\n      })\n      this.rtsp.send({ method: RTSP_METHOD.DESCRIBE })\n      this.rtsp.send({ method: RTSP_METHOD.TEARDOWN })\n      return await sdpPromise\n    })\n  }\n}\n", "import registerDebug from 'debug'\n\nimport { Readable } from 'stream'\n\nimport { Source } from '../component'\nimport { MessageType } from '../message'\n\nconst debug = registerDebug('msl:http-mp4')\n\nexport interface HttpConfig {\n  uri: string\n  options?: RequestInit\n}\n\n/**\n * HttpMp4\n *\n * Stream MP4 data over HTTP/S, and use Axis-specific\n * headers to determine MIME type and stream transformation.\n */\nexport class HttpMp4Source extends Source {\n  public uri: string\n  public options?: RequestInit\n  public length?: number\n  public onHeaders?: (headers: Headers) => void\n  public onServerClose?: () => void\n\n  private _reader?: ReadableStreamDefaultReader<Uint8Array>\n  private _abortController?: AbortController\n  private _allDone: boolean\n\n  /**\n   * Create an HTTP component.\n   *\n   * The constructor sets a single readable stream from a fetch.\n   */\n  constructor(config: HttpConfig) {\n    const { uri, options } = config\n    /**\n     * Set up an incoming stream and attach it to the socket.\n     */\n    const incoming = new Readable({\n      objectMode: true,\n      read() {\n        //\n      },\n    })\n\n    // When an error is sent on the incoming stream, close the socket.\n    incoming.on('error', (e) => {\n      console.warn('closing socket due to incoming error', e)\n      this._reader && this._reader.cancel().catch((err) => console.error(err))\n    })\n\n    /**\n     * initialize the component.\n     */\n    super(incoming)\n\n    // When a read is requested, continue to pull data\n    incoming._read = () => {\n      this._pull()\n    }\n\n    this.uri = uri\n    this.options = options\n    this._allDone = false\n  }\n\n  play(): void {\n    if (this.uri === undefined) {\n      throw new Error('cannot start playing when there is no URI')\n    }\n\n    this._abortController = new AbortController()\n\n    this.length = 0\n    fetch(this.uri, {\n      credentials: 'include',\n      signal: this._abortController.signal,\n      ...this.options,\n    })\n      .then((rsp) => {\n        if (rsp.body === null) {\n          throw new Error('empty response body')\n        }\n\n        const contentType = rsp.headers.get('Content-Type')\n        this.incoming.push({\n          data: Buffer.alloc(0),\n          type: MessageType.ISOM,\n          mime: contentType,\n        })\n\n        this.onHeaders && this.onHeaders(rsp.headers)\n\n        this._reader = rsp.body.getReader()\n        this._pull()\n      })\n      .catch((err) => {\n        console.error('http-source: fetch failed: ', err)\n      })\n  }\n\n  abort(): void {\n    this._reader\n      && this._reader.cancel().catch((err) => {\n        console.log('http-source: cancel reader failed: ', err)\n      })\n    this._abortController && this._abortController.abort()\n  }\n\n  _isClosed(): boolean {\n    return this._allDone\n  }\n\n  _close(): void {\n    this._reader = undefined\n    this._allDone = true\n    this.incoming.push(null)\n    this.onServerClose?.()\n  }\n\n  _pull(): void {\n    if (this._reader === undefined) {\n      return\n    }\n\n    this._reader\n      .read()\n      .then(({ done, value }) => {\n        if (done) {\n          if (!this._isClosed()) {\n            debug('fetch completed, total downloaded: ', this.length, ' bytes')\n            this._close()\n          }\n          return\n        }\n        if (value === undefined) {\n          throw new Error('expected value to be defined')\n        }\n        if (this.length === undefined) {\n          throw new Error('expected length to be defined')\n        }\n        this.length += value.length\n        const buffer = Buffer.from(value)\n        if (!this.incoming.push({ data: buffer, type: MessageType.ISOM })) {\n          // Something happened down stream that it is no longer processing the\n          // incoming data, and the stream buffer got full.\n          // This could be because we are downloading too much data at once,\n          // or because the downstream is frozen. The latter is most likely\n          // when dealing with a live stream (as in that case we would expect\n          // downstream to be able to handle the data).\n          debug('downstream back pressure: pausing read')\n        } else {\n          // It's ok to read more data\n          this._pull()\n        }\n      })\n      .catch((err) => {\n        debug('http-source: read failed: ', err)\n        if (!this._isClosed()) {\n          this._close()\n        }\n      })\n  }\n}\n", "import { HttpConfig, HttpMp4Source } from '../components/http-mp4'\nimport { MseSink } from '../components/mse'\n\nimport { Pipeline } from './pipeline'\n\nexport interface HttpMseConfig {\n  http: HttpConfig\n  mediaElement: HTMLVideoElement\n}\n\n/*\n * HttpMsePipeline\n *\n * A pipeline that connects to an HTTP server and can process an MP4 data stream\n * that is then sent to a HTML video element\n *\n * Handlers that can be set on the pipeline:\n * - `onServerClose`: called when the server closes the connection\n */\nexport class HttpMsePipeline extends Pipeline {\n  public onHeaders?: (headers: Headers) => void\n  public onServerClose?: () => void\n  public http: HttpMp4Source\n\n  private readonly _src?: HttpMp4Source\n  private readonly _sink: MseSink\n\n  constructor(config: HttpMseConfig) {\n    const { http: httpConfig, mediaElement } = config\n\n    const httpSource = new HttpMp4Source(httpConfig)\n    const mseSink = new MseSink(mediaElement)\n\n    httpSource.onHeaders = (headers) => {\n      this.onHeaders && this.onHeaders(headers)\n    }\n\n    httpSource.onServerClose = () => this.onServerClose?.()\n\n    super(httpSource, mseSink)\n\n    this._src = httpSource\n    this._sink = mseSink\n\n    // Expose session for external use\n    this.http = httpSource\n  }\n\n  close() {\n    this._src && this._src.abort()\n  }\n\n  get currentTime() {\n    return this._sink.currentTime\n  }\n\n  async play() {\n    return await this._sink.play()\n  }\n\n  pause() {\n    return this._sink.pause()\n  }\n}\n", "export * from './protocols'\nexport * from './retry'\nexport { Scheduler } from './scheduler'\n", "import { RtspSession } from '../components/rtsp-session'\n\n/**\n * Retry failed commands.\n *\n * This retries RTSP commands that fails up to a certain\n * limit of times.\n */\nexport const addRTSPRetry = (\n  rtspSession: RtspSession,\n  { maxRetries, errors } = { maxRetries: 20, errors: [503] }\n) => {\n  let retries = 0\n\n  const oldOnError = rtspSession.onError\n\n  rtspSession.onError = (err) => {\n    oldOnError?.(err)\n\n    if (!errors.includes(err.code)) {\n      return\n    }\n\n    // Stop retrying after 20 tries (~20 seconds)\n    if ((retries += 1) > maxRetries) {\n      console.log('retry, too many', retries, maxRetries)\n      return\n    }\n\n    // Retry\n    setTimeout(() => rtspSession.retry?.(), retries * 100)\n  }\n}\n"],
  "mappings": "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",
  "names": ["index_browser_exports", "parse", "import_stream", "timestamp", "MessageType", "import_stream", "import_stream", "timestamp", "import_stream", "debug", "import_debug", "import_stream", "debug", "registerDebug", "import_stream", "timestamp", "import_stream", "type", "width", "height", "precision", "qTable", "import_debug", "import_stream", "debug", "import_debug", "import_stream", "payloadType", "timestamp", "debug", "payloadType", "timestamp", "import_debug", "import_stream", "RTCPPacketType", "SDESItem", "debug", "registerDebug", "import_stream", "import_stream", "import_debug", "debug", "payloadType", "sessionId", "parse", "import_debug", "import_stream", "RTSP_METHOD", "debug", "import_debug", "import_stream", "defaultConfig", "debug", "index_browser_exports", "range", "MD5", "import_debug", "import_stream", "debug", "registerDebug", "index_browser_exports", "parse"]
}
