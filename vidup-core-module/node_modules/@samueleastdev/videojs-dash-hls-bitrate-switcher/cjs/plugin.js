"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _video = _interopRequireDefault(require("video.js"));

var _package = require("../package.json");

var _items = require("./items.js");

var Plugin = _video.default.getPlugin('plugin');

var Component = _video.default.getComponent('Component');

var MenuButton = _video.default.getComponent('MenuButton');

// Default options for the plugin.
var defaults = {
  now: null,
  then: Date.now(),
  interval: 1000,
  frames: 0,
  delta: null,
  showInfo: false
};
/**
 * An advanced Video.js plugin. For more information on the API
 *
 * See: https://blog.videojs.com/feature-spotlight-advanced-plugins/
 */

var DashHlsBitrateSwitcher = /*#__PURE__*/function (_Plugin) {
  (0, _inheritsLoose2.default)(DashHlsBitrateSwitcher, _Plugin);

  /**
   * Create a DashHlsBitrateSwitcher plugin instance.
   *
   * @param  {Player} player
   *         A Video.js Player instance.
   *
   * @param  {Object} [options]
   *         An optional options object.
   *
   *         While not a core part of the Video.js plugin architecture, a
   *         second argument of options is a convenient way to accept inputs
   *         from your plugin's caller.
   */
  function DashHlsBitrateSwitcher(player, options) {
    var _this;

    _this = _Plugin.call(this, player) || this;
    var self = (0, _assertThisInitialized2.default)(_this);
    _this.options = _video.default.mergeOptions(defaults, options);

    _this.player.ready(function () {
      _this.player.addClass('vjs-dash-hls-bitrate-switcher');

      if (_this.options.showInfo) {
        self.buildUi();
      }
    });

    _this.player.on('loadstart', function (_event) {
      if (this.getChild('controlBar').getChild('RatesButton')) {
        this.getChild('controlBar').removeChild('RatesButton');
        self.qualityLevels.off('change');
      }

      this.one(_video.default.browser.IS_IOS ? 'canplaythrough' : 'loadedmetadata', function (_evt) {
        if (['m3u8', 'mpd'].includes(self.getExtension(this.currentSrc()))) {
          self.qualityLevels = this.qualityLevels();

          if (self.qualityLevels.levels_.length > 1) {
            self.init();
          }
        }
      });
    });

    return _this;
  }

  var _proto = DashHlsBitrateSwitcher.prototype;

  _proto.getExtension = function getExtension(url) {
    return url.split(/[#?]/)[0].split('.').pop().trim();
  };

  _proto.sortProperties = function sortProperties(obj) {
    obj = obj.levels_; // convert object into array

    var sortable = [];

    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        sortable.push(obj[key]);
      }
    } // sort items by value


    sortable.sort(function (a, b) {
      if (b.hasOwnProperty('height')) {
        return a.height - b.height;
      }

      if (b.hasOwnProperty('bandwidth')) {
        return a.bandwidth - b.bandwidth;
      }
    });
    return sortable.reverse();
  };

  _proto.formatBitrate = function formatBitrate(bits) {
    var i = -1;
    var byteUnits = [' kbps', ' Mbps', ' Gbps', ' Tbps', 'Pbps', 'Ebps', 'Zbps', 'Ybps'];

    do {
      bits = bits / 1024;
      i++;
    } while (bits > 1024);

    return Math.max(bits, 0.1).toFixed(1) + byteUnits[i];
  };

  _proto.formatRendition = function formatRendition(level) {
    if (level.hasOwnProperty('height')) {
      if (level.height) {
        return level.height + "p, " + this.formatBitrate(level.bitrate);
      }

      return '';
    } else {
      return "" + this.formatBitrate(level.bitrate);
    }
  };

  _proto.init = function init(levels) {
    var self = this;

    var RatesButton = /*#__PURE__*/function (_MenuButton) {
      (0, _inheritsLoose2.default)(RatesButton, _MenuButton);

      function RatesButton(player, options) {
        return _MenuButton.call(this, player, options) || this;
      }

      var _proto2 = RatesButton.prototype;

      _proto2.buildCSSClass = function buildCSSClass() {
        return "vjs-icon-cog " + _MenuButton.prototype.buildCSSClass.call(this);
      };

      _proto2.buildWrapperCSSClass = function buildWrapperCSSClass() {
        return "vjs-dash-hls-bitrate-switcher-menu " + _MenuButton.prototype.buildWrapperCSSClass.call(this);
      };

      _proto2.updateSelected = function updateSelected(item) {
        this.items.forEach(function (child) {
          if (item.bitrate === parseInt(child.el().getAttribute('data-bitrate'))) {
            child.addClass('vjs-selected');
          } else {
            child.removeClass('vjs-selected');
          }
        });
      };

      _proto2.createItems = function createItems(items) {
        var _this2 = this;

        if (items === void 0) {
          items = [];
        }

        var qualityLevels = self.sortProperties(self.qualityLevels);
        qualityLevels.forEach(function (level) {
          // bitrate need to be set
          if (level.bitrate) {
            items.push(new _items.PlayBackRatesBtn(_this2.player(), {
              levels: qualityLevels,
              label: "" + self.formatRendition(level),
              bitrate: level.bitrate,
              type: level.bitrate
            }));
          }
        });
        return items;
      };

      return RatesButton;
    }(MenuButton);

    _video.default.registerComponent('RatesButton', RatesButton);

    var comps = self.player.getChild('controlBar').children().length;

    if (self.player.getChild('controlBar').getChild('fullscreenToggle')) {
      self.player.getChild('controlBar').addChild('ratesButton', {}, comps - 1);
    } else {
      self.player.getChild('controlBar').addChild('ratesButton', {}, comps);
    } // Listen to change events for when the player selects a new quality level


    self.qualityLevels.on('change', function () {
      var rendition = self.qualityLevels[self.qualityLevels.selectedIndex];
      self.player.getChild('controlBar').getChild('ratesButton').updateSelected(rendition);

      if (self.player.getChild('streamInfo')) {
        self.player.getChild('streamInfo').updateTextContent("<div class=\"vjs-stream-info-box\">Dimensions:" + rendition.width + "x" + rendition.height + "<br/>Bitrate:" + self.formatBitrate(rendition.bitrate) + "<br/>Renditions:" + self.qualityLevels.length + "<br/>Type:" + self.player.currentType() + "</div>");
      }
    }); // Set initial value

    var rendition = self.qualityLevels[self.qualityLevels.selectedIndex];
    self.player.getChild('controlBar').getChild('ratesButton').updateSelected(rendition);

    if (self.player.getChild('streamInfo')) {
      self.player.getChild('streamInfo').updateTextContent("<div class=\"vjs-stream-info-box\">Dimensions:" + rendition.width + "x" + rendition.height + "<br/>Bitrate:" + self.formatBitrate(rendition.bitrate) + "<br/>Renditions:" + self.qualityLevels.length + "<br/>Type:" + self.player.currentType() + "</div>");
    }
  };

  _proto.buildUi = function buildUi() {
    var streamInfo = _video.default.extend(Component, {
      constructor: function constructor(player, options) {
        Component.apply(this, arguments);

        if (options.text) {
          this.updateTextContent(options.text);
        }
      },
      createEl: function createEl() {
        return _video.default.createEl('div', {
          className: 'vjs-stream-info',
          innerHTML: ''
        });
      },
      updateTextContent: function updateTextContent(text) {
        if (typeof text !== 'string') {
          text = '';
        }

        this.el().innerHTML = text;
      }
    });

    window.videojs = _video.default;

    _video.default.registerComponent('streamInfo', streamInfo);

    this.player.addChild('streamInfo', {
      text: ''
    });
  };

  return DashHlsBitrateSwitcher;
}(Plugin); // Define default values for the plugin's `state` object here.


DashHlsBitrateSwitcher.defaultState = {}; // Include the version number.

DashHlsBitrateSwitcher.VERSION = _package.version; // Register the plugin with video.js.

_video.default.registerPlugin('dashHlsBitrateSwitcher', DashHlsBitrateSwitcher);

var _default = DashHlsBitrateSwitcher;
exports.default = _default;
module.exports = exports.default;